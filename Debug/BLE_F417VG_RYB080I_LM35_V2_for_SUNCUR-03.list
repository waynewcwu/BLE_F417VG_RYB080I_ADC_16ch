
BLE_F417VG_RYB080I_LM35_V2_for_SUNCUR-03.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007074  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000043c  08007208  08007208  00017208  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007644  08007644  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  08007644  08007644  00017644  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800764c  0800764c  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800764c  0800764c  0001764c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007650  08007650  00017650  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08007654  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000027c  200001e0  08007830  000201e0  2**5
                  ALLOC
 10 ._user_heap_stack 00000604  2000045c  08007830  0002045c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e9e7  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000022be  00000000  00000000  0002ebf3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d18  00000000  00000000  00030eb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c10  00000000  00000000  00031bd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022de3  00000000  00000000  000327e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d658  00000000  00000000  000555c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d1723  00000000  00000000  00062c1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0013433e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000047ec  00000000  00000000  00134394  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080071ec 	.word	0x080071ec

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	080071ec 	.word	0x080071ec

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b96e 	b.w	8000e9c <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	468c      	mov	ip, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	f040 8083 	bne.w	8000cee <__udivmoddi4+0x116>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4617      	mov	r7, r2
 8000bec:	d947      	bls.n	8000c7e <__udivmoddi4+0xa6>
 8000bee:	fab2 f282 	clz	r2, r2
 8000bf2:	b142      	cbz	r2, 8000c06 <__udivmoddi4+0x2e>
 8000bf4:	f1c2 0020 	rsb	r0, r2, #32
 8000bf8:	fa24 f000 	lsr.w	r0, r4, r0
 8000bfc:	4091      	lsls	r1, r2
 8000bfe:	4097      	lsls	r7, r2
 8000c00:	ea40 0c01 	orr.w	ip, r0, r1
 8000c04:	4094      	lsls	r4, r2
 8000c06:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c0a:	0c23      	lsrs	r3, r4, #16
 8000c0c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c10:	fa1f fe87 	uxth.w	lr, r7
 8000c14:	fb08 c116 	mls	r1, r8, r6, ip
 8000c18:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c1c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c20:	4299      	cmp	r1, r3
 8000c22:	d909      	bls.n	8000c38 <__udivmoddi4+0x60>
 8000c24:	18fb      	adds	r3, r7, r3
 8000c26:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c2a:	f080 8119 	bcs.w	8000e60 <__udivmoddi4+0x288>
 8000c2e:	4299      	cmp	r1, r3
 8000c30:	f240 8116 	bls.w	8000e60 <__udivmoddi4+0x288>
 8000c34:	3e02      	subs	r6, #2
 8000c36:	443b      	add	r3, r7
 8000c38:	1a5b      	subs	r3, r3, r1
 8000c3a:	b2a4      	uxth	r4, r4
 8000c3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c40:	fb08 3310 	mls	r3, r8, r0, r3
 8000c44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c48:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c4c:	45a6      	cmp	lr, r4
 8000c4e:	d909      	bls.n	8000c64 <__udivmoddi4+0x8c>
 8000c50:	193c      	adds	r4, r7, r4
 8000c52:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c56:	f080 8105 	bcs.w	8000e64 <__udivmoddi4+0x28c>
 8000c5a:	45a6      	cmp	lr, r4
 8000c5c:	f240 8102 	bls.w	8000e64 <__udivmoddi4+0x28c>
 8000c60:	3802      	subs	r0, #2
 8000c62:	443c      	add	r4, r7
 8000c64:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c68:	eba4 040e 	sub.w	r4, r4, lr
 8000c6c:	2600      	movs	r6, #0
 8000c6e:	b11d      	cbz	r5, 8000c78 <__udivmoddi4+0xa0>
 8000c70:	40d4      	lsrs	r4, r2
 8000c72:	2300      	movs	r3, #0
 8000c74:	e9c5 4300 	strd	r4, r3, [r5]
 8000c78:	4631      	mov	r1, r6
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	b902      	cbnz	r2, 8000c82 <__udivmoddi4+0xaa>
 8000c80:	deff      	udf	#255	; 0xff
 8000c82:	fab2 f282 	clz	r2, r2
 8000c86:	2a00      	cmp	r2, #0
 8000c88:	d150      	bne.n	8000d2c <__udivmoddi4+0x154>
 8000c8a:	1bcb      	subs	r3, r1, r7
 8000c8c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c90:	fa1f f887 	uxth.w	r8, r7
 8000c94:	2601      	movs	r6, #1
 8000c96:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c9a:	0c21      	lsrs	r1, r4, #16
 8000c9c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000ca0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ca4:	fb08 f30c 	mul.w	r3, r8, ip
 8000ca8:	428b      	cmp	r3, r1
 8000caa:	d907      	bls.n	8000cbc <__udivmoddi4+0xe4>
 8000cac:	1879      	adds	r1, r7, r1
 8000cae:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cb2:	d202      	bcs.n	8000cba <__udivmoddi4+0xe2>
 8000cb4:	428b      	cmp	r3, r1
 8000cb6:	f200 80e9 	bhi.w	8000e8c <__udivmoddi4+0x2b4>
 8000cba:	4684      	mov	ip, r0
 8000cbc:	1ac9      	subs	r1, r1, r3
 8000cbe:	b2a3      	uxth	r3, r4
 8000cc0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cc4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cc8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000ccc:	fb08 f800 	mul.w	r8, r8, r0
 8000cd0:	45a0      	cmp	r8, r4
 8000cd2:	d907      	bls.n	8000ce4 <__udivmoddi4+0x10c>
 8000cd4:	193c      	adds	r4, r7, r4
 8000cd6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cda:	d202      	bcs.n	8000ce2 <__udivmoddi4+0x10a>
 8000cdc:	45a0      	cmp	r8, r4
 8000cde:	f200 80d9 	bhi.w	8000e94 <__udivmoddi4+0x2bc>
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	eba4 0408 	sub.w	r4, r4, r8
 8000ce8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cec:	e7bf      	b.n	8000c6e <__udivmoddi4+0x96>
 8000cee:	428b      	cmp	r3, r1
 8000cf0:	d909      	bls.n	8000d06 <__udivmoddi4+0x12e>
 8000cf2:	2d00      	cmp	r5, #0
 8000cf4:	f000 80b1 	beq.w	8000e5a <__udivmoddi4+0x282>
 8000cf8:	2600      	movs	r6, #0
 8000cfa:	e9c5 0100 	strd	r0, r1, [r5]
 8000cfe:	4630      	mov	r0, r6
 8000d00:	4631      	mov	r1, r6
 8000d02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d06:	fab3 f683 	clz	r6, r3
 8000d0a:	2e00      	cmp	r6, #0
 8000d0c:	d14a      	bne.n	8000da4 <__udivmoddi4+0x1cc>
 8000d0e:	428b      	cmp	r3, r1
 8000d10:	d302      	bcc.n	8000d18 <__udivmoddi4+0x140>
 8000d12:	4282      	cmp	r2, r0
 8000d14:	f200 80b8 	bhi.w	8000e88 <__udivmoddi4+0x2b0>
 8000d18:	1a84      	subs	r4, r0, r2
 8000d1a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d1e:	2001      	movs	r0, #1
 8000d20:	468c      	mov	ip, r1
 8000d22:	2d00      	cmp	r5, #0
 8000d24:	d0a8      	beq.n	8000c78 <__udivmoddi4+0xa0>
 8000d26:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d2a:	e7a5      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000d2c:	f1c2 0320 	rsb	r3, r2, #32
 8000d30:	fa20 f603 	lsr.w	r6, r0, r3
 8000d34:	4097      	lsls	r7, r2
 8000d36:	fa01 f002 	lsl.w	r0, r1, r2
 8000d3a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d3e:	40d9      	lsrs	r1, r3
 8000d40:	4330      	orrs	r0, r6
 8000d42:	0c03      	lsrs	r3, r0, #16
 8000d44:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d48:	fa1f f887 	uxth.w	r8, r7
 8000d4c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d50:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d54:	fb06 f108 	mul.w	r1, r6, r8
 8000d58:	4299      	cmp	r1, r3
 8000d5a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d5e:	d909      	bls.n	8000d74 <__udivmoddi4+0x19c>
 8000d60:	18fb      	adds	r3, r7, r3
 8000d62:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d66:	f080 808d 	bcs.w	8000e84 <__udivmoddi4+0x2ac>
 8000d6a:	4299      	cmp	r1, r3
 8000d6c:	f240 808a 	bls.w	8000e84 <__udivmoddi4+0x2ac>
 8000d70:	3e02      	subs	r6, #2
 8000d72:	443b      	add	r3, r7
 8000d74:	1a5b      	subs	r3, r3, r1
 8000d76:	b281      	uxth	r1, r0
 8000d78:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d7c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d80:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d84:	fb00 f308 	mul.w	r3, r0, r8
 8000d88:	428b      	cmp	r3, r1
 8000d8a:	d907      	bls.n	8000d9c <__udivmoddi4+0x1c4>
 8000d8c:	1879      	adds	r1, r7, r1
 8000d8e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d92:	d273      	bcs.n	8000e7c <__udivmoddi4+0x2a4>
 8000d94:	428b      	cmp	r3, r1
 8000d96:	d971      	bls.n	8000e7c <__udivmoddi4+0x2a4>
 8000d98:	3802      	subs	r0, #2
 8000d9a:	4439      	add	r1, r7
 8000d9c:	1acb      	subs	r3, r1, r3
 8000d9e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000da2:	e778      	b.n	8000c96 <__udivmoddi4+0xbe>
 8000da4:	f1c6 0c20 	rsb	ip, r6, #32
 8000da8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dac:	fa22 f30c 	lsr.w	r3, r2, ip
 8000db0:	431c      	orrs	r4, r3
 8000db2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000db6:	fa01 f306 	lsl.w	r3, r1, r6
 8000dba:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dbe:	fa21 f10c 	lsr.w	r1, r1, ip
 8000dc2:	431f      	orrs	r7, r3
 8000dc4:	0c3b      	lsrs	r3, r7, #16
 8000dc6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dca:	fa1f f884 	uxth.w	r8, r4
 8000dce:	fb0e 1119 	mls	r1, lr, r9, r1
 8000dd2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000dd6:	fb09 fa08 	mul.w	sl, r9, r8
 8000dda:	458a      	cmp	sl, r1
 8000ddc:	fa02 f206 	lsl.w	r2, r2, r6
 8000de0:	fa00 f306 	lsl.w	r3, r0, r6
 8000de4:	d908      	bls.n	8000df8 <__udivmoddi4+0x220>
 8000de6:	1861      	adds	r1, r4, r1
 8000de8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000dec:	d248      	bcs.n	8000e80 <__udivmoddi4+0x2a8>
 8000dee:	458a      	cmp	sl, r1
 8000df0:	d946      	bls.n	8000e80 <__udivmoddi4+0x2a8>
 8000df2:	f1a9 0902 	sub.w	r9, r9, #2
 8000df6:	4421      	add	r1, r4
 8000df8:	eba1 010a 	sub.w	r1, r1, sl
 8000dfc:	b2bf      	uxth	r7, r7
 8000dfe:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e02:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e06:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e0a:	fb00 f808 	mul.w	r8, r0, r8
 8000e0e:	45b8      	cmp	r8, r7
 8000e10:	d907      	bls.n	8000e22 <__udivmoddi4+0x24a>
 8000e12:	19e7      	adds	r7, r4, r7
 8000e14:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e18:	d22e      	bcs.n	8000e78 <__udivmoddi4+0x2a0>
 8000e1a:	45b8      	cmp	r8, r7
 8000e1c:	d92c      	bls.n	8000e78 <__udivmoddi4+0x2a0>
 8000e1e:	3802      	subs	r0, #2
 8000e20:	4427      	add	r7, r4
 8000e22:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e26:	eba7 0708 	sub.w	r7, r7, r8
 8000e2a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e2e:	454f      	cmp	r7, r9
 8000e30:	46c6      	mov	lr, r8
 8000e32:	4649      	mov	r1, r9
 8000e34:	d31a      	bcc.n	8000e6c <__udivmoddi4+0x294>
 8000e36:	d017      	beq.n	8000e68 <__udivmoddi4+0x290>
 8000e38:	b15d      	cbz	r5, 8000e52 <__udivmoddi4+0x27a>
 8000e3a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e3e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e42:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e46:	40f2      	lsrs	r2, r6
 8000e48:	ea4c 0202 	orr.w	r2, ip, r2
 8000e4c:	40f7      	lsrs	r7, r6
 8000e4e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e52:	2600      	movs	r6, #0
 8000e54:	4631      	mov	r1, r6
 8000e56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e5a:	462e      	mov	r6, r5
 8000e5c:	4628      	mov	r0, r5
 8000e5e:	e70b      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000e60:	4606      	mov	r6, r0
 8000e62:	e6e9      	b.n	8000c38 <__udivmoddi4+0x60>
 8000e64:	4618      	mov	r0, r3
 8000e66:	e6fd      	b.n	8000c64 <__udivmoddi4+0x8c>
 8000e68:	4543      	cmp	r3, r8
 8000e6a:	d2e5      	bcs.n	8000e38 <__udivmoddi4+0x260>
 8000e6c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e70:	eb69 0104 	sbc.w	r1, r9, r4
 8000e74:	3801      	subs	r0, #1
 8000e76:	e7df      	b.n	8000e38 <__udivmoddi4+0x260>
 8000e78:	4608      	mov	r0, r1
 8000e7a:	e7d2      	b.n	8000e22 <__udivmoddi4+0x24a>
 8000e7c:	4660      	mov	r0, ip
 8000e7e:	e78d      	b.n	8000d9c <__udivmoddi4+0x1c4>
 8000e80:	4681      	mov	r9, r0
 8000e82:	e7b9      	b.n	8000df8 <__udivmoddi4+0x220>
 8000e84:	4666      	mov	r6, ip
 8000e86:	e775      	b.n	8000d74 <__udivmoddi4+0x19c>
 8000e88:	4630      	mov	r0, r6
 8000e8a:	e74a      	b.n	8000d22 <__udivmoddi4+0x14a>
 8000e8c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e90:	4439      	add	r1, r7
 8000e92:	e713      	b.n	8000cbc <__udivmoddi4+0xe4>
 8000e94:	3802      	subs	r0, #2
 8000e96:	443c      	add	r4, r7
 8000e98:	e724      	b.n	8000ce4 <__udivmoddi4+0x10c>
 8000e9a:	bf00      	nop

08000e9c <__aeabi_idiv0>:
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop

08000ea0 <ADC1_Conv>:

/* Private typedef -----------------------------------------------------------*/
ADC1_t ADC_1;

void ADC1_Conv(ADC_HandleTypeDef *hadc)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b084      	sub	sp, #16
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
	//ADC start, LED status = 0
	HAL_GPIO_WritePin(GPIOD, RedLED , GPIO_PIN_RESET);
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000eae:	4847      	ldr	r0, [pc, #284]	; (8000fcc <ADC1_Conv+0x12c>)
 8000eb0:	f001 fda0 	bl	80029f4 <HAL_GPIO_WritePin>
	unsigned char Count_in, Count_Sum;
	unsigned char Count_Sum_value = 200;//adc value Sum count
 8000eb4:	23c8      	movs	r3, #200	; 0xc8
 8000eb6:	737b      	strb	r3, [r7, #13]
    for(Count_Sum=0; Count_Sum < Count_Sum_value; Count_Sum++)//take the adc value sum by count 60
 8000eb8:	2300      	movs	r3, #0
 8000eba:	73bb      	strb	r3, [r7, #14]
 8000ebc:	e03d      	b.n	8000f3a <ADC1_Conv+0x9a>
    {
    	for(Count_in=0; Count_in < ADC_Buffer_Ch; Count_in++)//Convert ADC IN by scan channel
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	73fb      	strb	r3, [r7, #15]
 8000ec2:	e031      	b.n	8000f28 <ADC1_Conv+0x88>
    	{
    		/*##-1- Start the conversion process #######################################*/
    		HAL_ADC_Start(hadc);
 8000ec4:	6878      	ldr	r0, [r7, #4]
 8000ec6:	f000 ff33 	bl	8001d30 <HAL_ADC_Start>
    			the peripheral; if it?�s busy you need to wait for the end of current
    			conversion before starting a new one.
    			For simplicity reasons, this example is just waiting till the end of the
    	 	 	conversion, but application may perform other tasks while conversion
    			operation is ongoing. */
    		HAL_ADC_PollForConversion(hadc, 50);
 8000eca:	2132      	movs	r1, #50	; 0x32
 8000ecc:	6878      	ldr	r0, [r7, #4]
 8000ece:	f001 f828 	bl	8001f22 <HAL_ADC_PollForConversion>
    
    			/* Check if the continous conversion of regular channel is finished */
    		while(!HAL_IS_BIT_SET(HAL_ADC_GetState(hadc), HAL_ADC_STATE_REG_EOC)){};
 8000ed2:	bf00      	nop
 8000ed4:	6878      	ldr	r0, [r7, #4]
 8000ed6:	f001 f9d7 	bl	8002288 <HAL_ADC_GetState>
 8000eda:	4603      	mov	r3, r0
 8000edc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000ee0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000ee4:	d1f6      	bne.n	8000ed4 <ADC1_Conv+0x34>
    		/*##-3- Get the converted value of regular channel  ######################*/
    		ADC_1.BufferValue[Count_in] = HAL_ADC_GetValue(hadc);
 8000ee6:	6878      	ldr	r0, [r7, #4]
 8000ee8:	f001 f89f 	bl	800202a <HAL_ADC_GetValue>
 8000eec:	4602      	mov	r2, r0
 8000eee:	7bfb      	ldrb	r3, [r7, #15]
 8000ef0:	b291      	uxth	r1, r2
 8000ef2:	4a37      	ldr	r2, [pc, #220]	; (8000fd0 <ADC1_Conv+0x130>)
 8000ef4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            ADC_1.BufferValue_Sum[Count_in] += ADC_1.BufferValue[Count_in];
 8000ef8:	7bfb      	ldrb	r3, [r7, #15]
 8000efa:	4a35      	ldr	r2, [pc, #212]	; (8000fd0 <ADC1_Conv+0x130>)
 8000efc:	3308      	adds	r3, #8
 8000efe:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000f02:	7bfb      	ldrb	r3, [r7, #15]
 8000f04:	4932      	ldr	r1, [pc, #200]	; (8000fd0 <ADC1_Conv+0x130>)
 8000f06:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000f0a:	4619      	mov	r1, r3
 8000f0c:	7bfb      	ldrb	r3, [r7, #15]
 8000f0e:	440a      	add	r2, r1
 8000f10:	492f      	ldr	r1, [pc, #188]	; (8000fd0 <ADC1_Conv+0x130>)
 8000f12:	3308      	adds	r3, #8
 8000f14:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            ADC_1.BufferValue[Count_in]=0;//clear adc bufferValue
 8000f18:	7bfb      	ldrb	r3, [r7, #15]
 8000f1a:	4a2d      	ldr	r2, [pc, #180]	; (8000fd0 <ADC1_Conv+0x130>)
 8000f1c:	2100      	movs	r1, #0
 8000f1e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    	for(Count_in=0; Count_in < ADC_Buffer_Ch; Count_in++)//Convert ADC IN by scan channel
 8000f22:	7bfb      	ldrb	r3, [r7, #15]
 8000f24:	3301      	adds	r3, #1
 8000f26:	73fb      	strb	r3, [r7, #15]
 8000f28:	7bfb      	ldrb	r3, [r7, #15]
 8000f2a:	2b0f      	cmp	r3, #15
 8000f2c:	d9ca      	bls.n	8000ec4 <ADC1_Conv+0x24>
    
    	}
    	HAL_ADC_Stop(hadc);
 8000f2e:	6878      	ldr	r0, [r7, #4]
 8000f30:	f000 ffc4 	bl	8001ebc <HAL_ADC_Stop>
    for(Count_Sum=0; Count_Sum < Count_Sum_value; Count_Sum++)//take the adc value sum by count 60
 8000f34:	7bbb      	ldrb	r3, [r7, #14]
 8000f36:	3301      	adds	r3, #1
 8000f38:	73bb      	strb	r3, [r7, #14]
 8000f3a:	7bba      	ldrb	r2, [r7, #14]
 8000f3c:	7b7b      	ldrb	r3, [r7, #13]
 8000f3e:	429a      	cmp	r2, r3
 8000f40:	d3bd      	bcc.n	8000ebe <ADC1_Conv+0x1e>
    }//End adc value sum by count 60
    
    for(Count_in=0; Count_in < ADC_Buffer_Ch; Count_in++)//Calculate the ADC value average Convert to the Temp value
 8000f42:	2300      	movs	r3, #0
 8000f44:	73fb      	strb	r3, [r7, #15]
 8000f46:	e033      	b.n	8000fb0 <ADC1_Conv+0x110>
    {
        ADC_1.BufferValue_Avg[Count_in] = ADC_1.BufferValue_Sum[Count_in]/Count_Sum_value ;
 8000f48:	7bfb      	ldrb	r3, [r7, #15]
 8000f4a:	4a21      	ldr	r2, [pc, #132]	; (8000fd0 <ADC1_Conv+0x130>)
 8000f4c:	3308      	adds	r3, #8
 8000f4e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000f52:	7b7b      	ldrb	r3, [r7, #13]
 8000f54:	fbb2 f2f3 	udiv	r2, r2, r3
 8000f58:	7bfb      	ldrb	r3, [r7, #15]
 8000f5a:	b291      	uxth	r1, r2
 8000f5c:	4a1c      	ldr	r2, [pc, #112]	; (8000fd0 <ADC1_Conv+0x130>)
 8000f5e:	3330      	adds	r3, #48	; 0x30
 8000f60:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        
        //ADC voltage digital valve, max:4095
//        ADC_1.Vol[Count_in]=ADC_1.BufferValue_Avg[Count_in];
        
        //Calculate LM35 Temperature Sensor value
        ADC_1.Temp[Count_in]=ADC_1.BufferValue_Avg[Count_in]*3300/4095;//LM35 output voltage(mv)
 8000f64:	7bfb      	ldrb	r3, [r7, #15]
 8000f66:	4a1a      	ldr	r2, [pc, #104]	; (8000fd0 <ADC1_Conv+0x130>)
 8000f68:	3330      	adds	r3, #48	; 0x30
 8000f6a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000f6e:	461a      	mov	r2, r3
 8000f70:	f640 43e4 	movw	r3, #3300	; 0xce4
 8000f74:	fb03 f302 	mul.w	r3, r3, r2
 8000f78:	4a16      	ldr	r2, [pc, #88]	; (8000fd4 <ADC1_Conv+0x134>)
 8000f7a:	fb82 1203 	smull	r1, r2, r2, r3
 8000f7e:	441a      	add	r2, r3
 8000f80:	12d2      	asrs	r2, r2, #11
 8000f82:	17db      	asrs	r3, r3, #31
 8000f84:	1ad2      	subs	r2, r2, r3
 8000f86:	7bfb      	ldrb	r3, [r7, #15]
 8000f88:	b291      	uxth	r1, r2
 8000f8a:	4a11      	ldr	r2, [pc, #68]	; (8000fd0 <ADC1_Conv+0x130>)
 8000f8c:	3350      	adds	r3, #80	; 0x50
 8000f8e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        
        ADC_1.BufferValue_Sum[Count_in]=0;//clear Sum ValueV                
 8000f92:	7bfb      	ldrb	r3, [r7, #15]
 8000f94:	4a0e      	ldr	r2, [pc, #56]	; (8000fd0 <ADC1_Conv+0x130>)
 8000f96:	3308      	adds	r3, #8
 8000f98:	2100      	movs	r1, #0
 8000f9a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        ADC_1.BufferValue_Avg[Count_in]=0;//clear avg Value
 8000f9e:	7bfb      	ldrb	r3, [r7, #15]
 8000fa0:	4a0b      	ldr	r2, [pc, #44]	; (8000fd0 <ADC1_Conv+0x130>)
 8000fa2:	3330      	adds	r3, #48	; 0x30
 8000fa4:	2100      	movs	r1, #0
 8000fa6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for(Count_in=0; Count_in < ADC_Buffer_Ch; Count_in++)//Calculate the ADC value average Convert to the Temp value
 8000faa:	7bfb      	ldrb	r3, [r7, #15]
 8000fac:	3301      	adds	r3, #1
 8000fae:	73fb      	strb	r3, [r7, #15]
 8000fb0:	7bfb      	ldrb	r3, [r7, #15]
 8000fb2:	2b0f      	cmp	r3, #15
 8000fb4:	d9c8      	bls.n	8000f48 <ADC1_Conv+0xa8>
                
    }
    //ADC end cycle, LED status =1
    HAL_GPIO_WritePin(GPIOD, RedLED , GPIO_PIN_SET);
 8000fb6:	2201      	movs	r2, #1
 8000fb8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000fbc:	4803      	ldr	r0, [pc, #12]	; (8000fcc <ADC1_Conv+0x12c>)
 8000fbe:	f001 fd19 	bl	80029f4 <HAL_GPIO_WritePin>
}
 8000fc2:	bf00      	nop
 8000fc4:	3710      	adds	r7, #16
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	40020c00 	.word	0x40020c00
 8000fd0:	20000208 	.word	0x20000208
 8000fd4:	80080081 	.word	0x80080081

08000fd8 <BLE_USART>:
USART_BLE USARTBLE;
ADC1_t ADC_1;


void BLE_USART(UART_HandleTypeDef *huart)
{
 8000fd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000fda:	b097      	sub	sp, #92	; 0x5c
 8000fdc:	af0e      	add	r7, sp, #56	; 0x38
 8000fde:	61f8      	str	r0, [r7, #28]
	if(USARTBLE.sendflag ==1)
 8000fe0:	4b50      	ldr	r3, [pc, #320]	; (8001124 <BLE_USART+0x14c>)
 8000fe2:	781b      	ldrb	r3, [r3, #0]
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	f000 8099 	beq.w	800111c <BLE_USART+0x144>
	{
		//transmit LED status
		HAL_GPIO_WritePin(GPIOD, GreenLED , GPIO_PIN_SET);
 8000fea:	2201      	movs	r2, #1
 8000fec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ff0:	484d      	ldr	r0, [pc, #308]	; (8001128 <BLE_USART+0x150>)
 8000ff2:	f001 fcff 	bl	80029f4 <HAL_GPIO_WritePin>
//
//		memset( ADC_1.Vol, 0, strlen(ADC_1.Vol) ); //clear ADC_1.Vol

		sprintf(USARTBLE.buffer,
						"%d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d",
						ADC_1.Temp[0],ADC_1.Temp[1],ADC_1.Temp[2],ADC_1.Temp[3],ADC_1.Temp[4],
 8000ff6:	4b4d      	ldr	r3, [pc, #308]	; (800112c <BLE_USART+0x154>)
 8000ff8:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
		sprintf(USARTBLE.buffer,
 8000ffc:	469c      	mov	ip, r3
						ADC_1.Temp[0],ADC_1.Temp[1],ADC_1.Temp[2],ADC_1.Temp[3],ADC_1.Temp[4],
 8000ffe:	4b4b      	ldr	r3, [pc, #300]	; (800112c <BLE_USART+0x154>)
 8001000:	f8b3 30a2 	ldrh.w	r3, [r3, #162]	; 0xa2
		sprintf(USARTBLE.buffer,
 8001004:	469e      	mov	lr, r3
						ADC_1.Temp[0],ADC_1.Temp[1],ADC_1.Temp[2],ADC_1.Temp[3],ADC_1.Temp[4],
 8001006:	4b49      	ldr	r3, [pc, #292]	; (800112c <BLE_USART+0x154>)
 8001008:	f8b3 30a4 	ldrh.w	r3, [r3, #164]	; 0xa4
		sprintf(USARTBLE.buffer,
 800100c:	4618      	mov	r0, r3
						ADC_1.Temp[0],ADC_1.Temp[1],ADC_1.Temp[2],ADC_1.Temp[3],ADC_1.Temp[4],
 800100e:	4b47      	ldr	r3, [pc, #284]	; (800112c <BLE_USART+0x154>)
 8001010:	f8b3 30a6 	ldrh.w	r3, [r3, #166]	; 0xa6
		sprintf(USARTBLE.buffer,
 8001014:	461c      	mov	r4, r3
						ADC_1.Temp[0],ADC_1.Temp[1],ADC_1.Temp[2],ADC_1.Temp[3],ADC_1.Temp[4],
 8001016:	4b45      	ldr	r3, [pc, #276]	; (800112c <BLE_USART+0x154>)
 8001018:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	; 0xa8
		sprintf(USARTBLE.buffer,
 800101c:	461d      	mov	r5, r3
						ADC_1.Temp[5],ADC_1.Temp[6],ADC_1.Temp[7],ADC_1.Temp[8],ADC_1.Temp[9],
 800101e:	4b43      	ldr	r3, [pc, #268]	; (800112c <BLE_USART+0x154>)
 8001020:	f8b3 30aa 	ldrh.w	r3, [r3, #170]	; 0xaa
		sprintf(USARTBLE.buffer,
 8001024:	461e      	mov	r6, r3
						ADC_1.Temp[5],ADC_1.Temp[6],ADC_1.Temp[7],ADC_1.Temp[8],ADC_1.Temp[9],
 8001026:	4b41      	ldr	r3, [pc, #260]	; (800112c <BLE_USART+0x154>)
 8001028:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
		sprintf(USARTBLE.buffer,
 800102c:	61bb      	str	r3, [r7, #24]
						ADC_1.Temp[5],ADC_1.Temp[6],ADC_1.Temp[7],ADC_1.Temp[8],ADC_1.Temp[9],
 800102e:	4b3f      	ldr	r3, [pc, #252]	; (800112c <BLE_USART+0x154>)
 8001030:	f8b3 30ae 	ldrh.w	r3, [r3, #174]	; 0xae
		sprintf(USARTBLE.buffer,
 8001034:	617b      	str	r3, [r7, #20]
						ADC_1.Temp[5],ADC_1.Temp[6],ADC_1.Temp[7],ADC_1.Temp[8],ADC_1.Temp[9],
 8001036:	4b3d      	ldr	r3, [pc, #244]	; (800112c <BLE_USART+0x154>)
 8001038:	f8b3 30b0 	ldrh.w	r3, [r3, #176]	; 0xb0
		sprintf(USARTBLE.buffer,
 800103c:	613b      	str	r3, [r7, #16]
						ADC_1.Temp[5],ADC_1.Temp[6],ADC_1.Temp[7],ADC_1.Temp[8],ADC_1.Temp[9],
 800103e:	4b3b      	ldr	r3, [pc, #236]	; (800112c <BLE_USART+0x154>)
 8001040:	f8b3 30b2 	ldrh.w	r3, [r3, #178]	; 0xb2
		sprintf(USARTBLE.buffer,
 8001044:	60fb      	str	r3, [r7, #12]
						ADC_1.Temp[10],ADC_1.Temp[11],ADC_1.Temp[12],ADC_1.Temp[13],ADC_1.Temp[14],
 8001046:	4b39      	ldr	r3, [pc, #228]	; (800112c <BLE_USART+0x154>)
 8001048:	f8b3 30b4 	ldrh.w	r3, [r3, #180]	; 0xb4
		sprintf(USARTBLE.buffer,
 800104c:	60bb      	str	r3, [r7, #8]
						ADC_1.Temp[10],ADC_1.Temp[11],ADC_1.Temp[12],ADC_1.Temp[13],ADC_1.Temp[14],
 800104e:	4b37      	ldr	r3, [pc, #220]	; (800112c <BLE_USART+0x154>)
 8001050:	f8b3 30b6 	ldrh.w	r3, [r3, #182]	; 0xb6
		sprintf(USARTBLE.buffer,
 8001054:	607b      	str	r3, [r7, #4]
						ADC_1.Temp[10],ADC_1.Temp[11],ADC_1.Temp[12],ADC_1.Temp[13],ADC_1.Temp[14],
 8001056:	4b35      	ldr	r3, [pc, #212]	; (800112c <BLE_USART+0x154>)
 8001058:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	; 0xb8
		sprintf(USARTBLE.buffer,
 800105c:	603b      	str	r3, [r7, #0]
						ADC_1.Temp[10],ADC_1.Temp[11],ADC_1.Temp[12],ADC_1.Temp[13],ADC_1.Temp[14],
 800105e:	4b33      	ldr	r3, [pc, #204]	; (800112c <BLE_USART+0x154>)
 8001060:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	; 0xba
		sprintf(USARTBLE.buffer,
 8001064:	4619      	mov	r1, r3
						ADC_1.Temp[10],ADC_1.Temp[11],ADC_1.Temp[12],ADC_1.Temp[13],ADC_1.Temp[14],
 8001066:	4b31      	ldr	r3, [pc, #196]	; (800112c <BLE_USART+0x154>)
 8001068:	f8b3 30bc 	ldrh.w	r3, [r3, #188]	; 0xbc
		sprintf(USARTBLE.buffer,
 800106c:	461a      	mov	r2, r3
						ADC_1.Temp[15]);
 800106e:	4b2f      	ldr	r3, [pc, #188]	; (800112c <BLE_USART+0x154>)
 8001070:	f8b3 30be 	ldrh.w	r3, [r3, #190]	; 0xbe
		sprintf(USARTBLE.buffer,
 8001074:	930d      	str	r3, [sp, #52]	; 0x34
 8001076:	920c      	str	r2, [sp, #48]	; 0x30
 8001078:	910b      	str	r1, [sp, #44]	; 0x2c
 800107a:	683a      	ldr	r2, [r7, #0]
 800107c:	920a      	str	r2, [sp, #40]	; 0x28
 800107e:	687a      	ldr	r2, [r7, #4]
 8001080:	9209      	str	r2, [sp, #36]	; 0x24
 8001082:	68ba      	ldr	r2, [r7, #8]
 8001084:	9208      	str	r2, [sp, #32]
 8001086:	68fa      	ldr	r2, [r7, #12]
 8001088:	9207      	str	r2, [sp, #28]
 800108a:	693a      	ldr	r2, [r7, #16]
 800108c:	9206      	str	r2, [sp, #24]
 800108e:	697a      	ldr	r2, [r7, #20]
 8001090:	9205      	str	r2, [sp, #20]
 8001092:	69bb      	ldr	r3, [r7, #24]
 8001094:	9304      	str	r3, [sp, #16]
 8001096:	9603      	str	r6, [sp, #12]
 8001098:	9502      	str	r5, [sp, #8]
 800109a:	9401      	str	r4, [sp, #4]
 800109c:	9000      	str	r0, [sp, #0]
 800109e:	4673      	mov	r3, lr
 80010a0:	4662      	mov	r2, ip
 80010a2:	4923      	ldr	r1, [pc, #140]	; (8001130 <BLE_USART+0x158>)
 80010a4:	4823      	ldr	r0, [pc, #140]	; (8001134 <BLE_USART+0x15c>)
 80010a6:	f003 fe75 	bl	8004d94 <siprintf>

		memset( ADC_1.Temp, 0, strlen(ADC_1.Temp) ); //clear ADC_1.Temp
 80010aa:	4823      	ldr	r0, [pc, #140]	; (8001138 <BLE_USART+0x160>)
 80010ac:	f7ff f890 	bl	80001d0 <strlen>
 80010b0:	4603      	mov	r3, r0
 80010b2:	461a      	mov	r2, r3
 80010b4:	2100      	movs	r1, #0
 80010b6:	4820      	ldr	r0, [pc, #128]	; (8001138 <BLE_USART+0x160>)
 80010b8:	f003 f9fa 	bl	80044b0 <memset>
		//--------------------------------------------------------------------------------------------------------
		USARTBLE.bufferSize = min(Uart_Buffer_Size, strlen(USARTBLE.buffer));
 80010bc:	481d      	ldr	r0, [pc, #116]	; (8001134 <BLE_USART+0x15c>)
 80010be:	f7ff f887 	bl	80001d0 <strlen>
 80010c2:	4603      	mov	r3, r0
 80010c4:	2b64      	cmp	r3, #100	; 0x64
 80010c6:	d804      	bhi.n	80010d2 <BLE_USART+0xfa>
 80010c8:	481a      	ldr	r0, [pc, #104]	; (8001134 <BLE_USART+0x15c>)
 80010ca:	f7ff f881 	bl	80001d0 <strlen>
 80010ce:	4603      	mov	r3, r0
 80010d0:	e000      	b.n	80010d4 <BLE_USART+0xfc>
 80010d2:	2364      	movs	r3, #100	; 0x64
 80010d4:	4a13      	ldr	r2, [pc, #76]	; (8001124 <BLE_USART+0x14c>)
 80010d6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88


		//USARTBLE.bufferSize = 3;
		USARTBLE.sendTimeout = 60 ;
 80010da:	4b12      	ldr	r3, [pc, #72]	; (8001124 <BLE_USART+0x14c>)
 80010dc:	223c      	movs	r2, #60	; 0x3c
 80010de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		* @param huart   UART handle.
		* @param pData   Pointer to data buffer.
		* @param Size    Amount of data to be received.
		* @param Timeout Timeout duration.(ms)
		*/
		HAL_UART_Transmit(huart, &USARTBLE.buffer, USARTBLE.bufferSize, USARTBLE.sendTimeout );
 80010e2:	4b10      	ldr	r3, [pc, #64]	; (8001124 <BLE_USART+0x14c>)
 80010e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010e8:	b29a      	uxth	r2, r3
 80010ea:	4b0e      	ldr	r3, [pc, #56]	; (8001124 <BLE_USART+0x14c>)
 80010ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80010f0:	4910      	ldr	r1, [pc, #64]	; (8001134 <BLE_USART+0x15c>)
 80010f2:	69f8      	ldr	r0, [r7, #28]
 80010f4:	f002 fd33 	bl	8003b5e <HAL_UART_Transmit>

		memset( USARTBLE.buffer, 0, strlen(USARTBLE.buffer) ); //clear Transmit buffer
 80010f8:	480e      	ldr	r0, [pc, #56]	; (8001134 <BLE_USART+0x15c>)
 80010fa:	f7ff f869 	bl	80001d0 <strlen>
 80010fe:	4603      	mov	r3, r0
 8001100:	461a      	mov	r2, r3
 8001102:	2100      	movs	r1, #0
 8001104:	480b      	ldr	r0, [pc, #44]	; (8001134 <BLE_USART+0x15c>)
 8001106:	f003 f9d3 	bl	80044b0 <memset>
		* @param Timeout Timeout duration.(ms)
		*/
		//HAL_UART_Receive(huart , &USARTBLE.Rbuffer, 14, 10);
		//char C[20];
		//strcpy(C,  USARTBLE.Rbuffer );
		USARTBLE.sendflag = 0;
 800110a:	4b06      	ldr	r3, [pc, #24]	; (8001124 <BLE_USART+0x14c>)
 800110c:	2200      	movs	r2, #0
 800110e:	701a      	strb	r2, [r3, #0]
		//transmit LED status
//		HAL_GPIO_WritePin(GPIOD, GreenLED , GPIO_PIN_SET);
//		HAL_Delay(1);
		HAL_GPIO_WritePin(GPIOD, GreenLED , GPIO_PIN_RESET);
 8001110:	2200      	movs	r2, #0
 8001112:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001116:	4804      	ldr	r0, [pc, #16]	; (8001128 <BLE_USART+0x150>)
 8001118:	f001 fc6c 	bl	80029f4 <HAL_GPIO_WritePin>
		//0x1;
	}
}
 800111c:	bf00      	nop
 800111e:	3724      	adds	r7, #36	; 0x24
 8001120:	46bd      	mov	sp, r7
 8001122:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001124:	200002e0 	.word	0x200002e0
 8001128:	40020c00 	.word	0x40020c00
 800112c:	20000208 	.word	0x20000208
 8001130:	08007208 	.word	0x08007208
 8001134:	20000300 	.word	0x20000300
 8001138:	200002a8 	.word	0x200002a8

0800113c <RYB080E_Init>:
	HAL_GPIO_WritePin(GPIOC, RSTPin , GPIO_PIN_RESET);
	HAL_Delay(1);
	HAL_GPIO_WritePin(GPIOC, RSTPin , GPIO_PIN_SET);
}
void RYB080E_Init(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	af00      	add	r7, sp, #0
	//Set Reset pin to high
	HAL_GPIO_WritePin(GPIOC, RSTPin , GPIO_PIN_SET);
 8001140:	2201      	movs	r2, #1
 8001142:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001146:	4802      	ldr	r0, [pc, #8]	; (8001150 <RYB080E_Init+0x14>)
 8001148:	f001 fc54 	bl	80029f4 <HAL_GPIO_WritePin>

//	//set power slave mode
//	HAL_Delay(20);
//	BLECommand(&huart6, PWSlaveMode);
//	BLE_HW_RSEST();
}
 800114c:	bf00      	nop
 800114e:	bd80      	pop	{r7, pc}
 8001150:	40020800 	.word	0x40020800

08001154 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001158:	f000 fd34 	bl	8001bc4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800115c:	f000 f81a 	bl	8001194 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001160:	f000 fa22 	bl	80015a8 <MX_GPIO_Init>
  MX_ADC1_Init();
 8001164:	f000 f880 	bl	8001268 <MX_ADC1_Init>
  MX_TIM2_Init();
 8001168:	f000 f9a6 	bl	80014b8 <MX_TIM2_Init>
  MX_USART6_UART_Init();
 800116c:	f000 f9f2 	bl	8001554 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);//UART TIM
 8001170:	4805      	ldr	r0, [pc, #20]	; (8001188 <main+0x34>)
 8001172:	f002 f8c4 	bl	80032fe <HAL_TIM_Base_Start_IT>
  RYB080E_Init();
 8001176:	f7ff ffe1 	bl	800113c <RYB080E_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  ADC1_Conv(&hadc1);
 800117a:	4804      	ldr	r0, [pc, #16]	; (800118c <main+0x38>)
 800117c:	f7ff fe90 	bl	8000ea0 <ADC1_Conv>
	  BLE_USART(&huart6);
 8001180:	4803      	ldr	r0, [pc, #12]	; (8001190 <main+0x3c>)
 8001182:	f7ff ff29 	bl	8000fd8 <BLE_USART>
	  ADC1_Conv(&hadc1);
 8001186:	e7f8      	b.n	800117a <main+0x26>
 8001188:	20000408 	.word	0x20000408
 800118c:	20000380 	.word	0x20000380
 8001190:	200003c8 	.word	0x200003c8

08001194 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b094      	sub	sp, #80	; 0x50
 8001198:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800119a:	f107 0320 	add.w	r3, r7, #32
 800119e:	2230      	movs	r2, #48	; 0x30
 80011a0:	2100      	movs	r1, #0
 80011a2:	4618      	mov	r0, r3
 80011a4:	f003 f984 	bl	80044b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011a8:	f107 030c 	add.w	r3, r7, #12
 80011ac:	2200      	movs	r2, #0
 80011ae:	601a      	str	r2, [r3, #0]
 80011b0:	605a      	str	r2, [r3, #4]
 80011b2:	609a      	str	r2, [r3, #8]
 80011b4:	60da      	str	r2, [r3, #12]
 80011b6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80011b8:	2300      	movs	r3, #0
 80011ba:	60bb      	str	r3, [r7, #8]
 80011bc:	4b28      	ldr	r3, [pc, #160]	; (8001260 <SystemClock_Config+0xcc>)
 80011be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011c0:	4a27      	ldr	r2, [pc, #156]	; (8001260 <SystemClock_Config+0xcc>)
 80011c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011c6:	6413      	str	r3, [r2, #64]	; 0x40
 80011c8:	4b25      	ldr	r3, [pc, #148]	; (8001260 <SystemClock_Config+0xcc>)
 80011ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011d0:	60bb      	str	r3, [r7, #8]
 80011d2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80011d4:	2300      	movs	r3, #0
 80011d6:	607b      	str	r3, [r7, #4]
 80011d8:	4b22      	ldr	r3, [pc, #136]	; (8001264 <SystemClock_Config+0xd0>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	4a21      	ldr	r2, [pc, #132]	; (8001264 <SystemClock_Config+0xd0>)
 80011de:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011e2:	6013      	str	r3, [r2, #0]
 80011e4:	4b1f      	ldr	r3, [pc, #124]	; (8001264 <SystemClock_Config+0xd0>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011ec:	607b      	str	r3, [r7, #4]
 80011ee:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80011f0:	2302      	movs	r3, #2
 80011f2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011f4:	2301      	movs	r3, #1
 80011f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011f8:	2310      	movs	r3, #16
 80011fa:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011fc:	2302      	movs	r3, #2
 80011fe:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001200:	2300      	movs	r3, #0
 8001202:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001204:	2308      	movs	r3, #8
 8001206:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001208:	23a8      	movs	r3, #168	; 0xa8
 800120a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800120c:	2302      	movs	r3, #2
 800120e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001210:	2304      	movs	r3, #4
 8001212:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001214:	f107 0320 	add.w	r3, r7, #32
 8001218:	4618      	mov	r0, r3
 800121a:	f001 fc05 	bl	8002a28 <HAL_RCC_OscConfig>
 800121e:	4603      	mov	r3, r0
 8001220:	2b00      	cmp	r3, #0
 8001222:	d001      	beq.n	8001228 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001224:	f000 fa60 	bl	80016e8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001228:	230f      	movs	r3, #15
 800122a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800122c:	2302      	movs	r3, #2
 800122e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001230:	2300      	movs	r3, #0
 8001232:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001234:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001238:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800123a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800123e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001240:	f107 030c 	add.w	r3, r7, #12
 8001244:	2105      	movs	r1, #5
 8001246:	4618      	mov	r0, r3
 8001248:	f001 fe5e 	bl	8002f08 <HAL_RCC_ClockConfig>
 800124c:	4603      	mov	r3, r0
 800124e:	2b00      	cmp	r3, #0
 8001250:	d001      	beq.n	8001256 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001252:	f000 fa49 	bl	80016e8 <Error_Handler>
  }
}
 8001256:	bf00      	nop
 8001258:	3750      	adds	r7, #80	; 0x50
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	40023800 	.word	0x40023800
 8001264:	40007000 	.word	0x40007000

08001268 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b084      	sub	sp, #16
 800126c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800126e:	463b      	mov	r3, r7
 8001270:	2200      	movs	r2, #0
 8001272:	601a      	str	r2, [r3, #0]
 8001274:	605a      	str	r2, [r3, #4]
 8001276:	609a      	str	r2, [r3, #8]
 8001278:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 800127a:	4b8c      	ldr	r3, [pc, #560]	; (80014ac <MX_ADC1_Init+0x244>)
 800127c:	4a8c      	ldr	r2, [pc, #560]	; (80014b0 <MX_ADC1_Init+0x248>)
 800127e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001280:	4b8a      	ldr	r3, [pc, #552]	; (80014ac <MX_ADC1_Init+0x244>)
 8001282:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001286:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001288:	4b88      	ldr	r3, [pc, #544]	; (80014ac <MX_ADC1_Init+0x244>)
 800128a:	2200      	movs	r2, #0
 800128c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800128e:	4b87      	ldr	r3, [pc, #540]	; (80014ac <MX_ADC1_Init+0x244>)
 8001290:	2201      	movs	r2, #1
 8001292:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001294:	4b85      	ldr	r3, [pc, #532]	; (80014ac <MX_ADC1_Init+0x244>)
 8001296:	2200      	movs	r2, #0
 8001298:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = ENABLE;
 800129a:	4b84      	ldr	r3, [pc, #528]	; (80014ac <MX_ADC1_Init+0x244>)
 800129c:	2201      	movs	r2, #1
 800129e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.NbrOfDiscConversion = 1;
 80012a2:	4b82      	ldr	r3, [pc, #520]	; (80014ac <MX_ADC1_Init+0x244>)
 80012a4:	2201      	movs	r2, #1
 80012a6:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80012a8:	4b80      	ldr	r3, [pc, #512]	; (80014ac <MX_ADC1_Init+0x244>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80012ae:	4b7f      	ldr	r3, [pc, #508]	; (80014ac <MX_ADC1_Init+0x244>)
 80012b0:	4a80      	ldr	r2, [pc, #512]	; (80014b4 <MX_ADC1_Init+0x24c>)
 80012b2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80012b4:	4b7d      	ldr	r3, [pc, #500]	; (80014ac <MX_ADC1_Init+0x244>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 16;
 80012ba:	4b7c      	ldr	r3, [pc, #496]	; (80014ac <MX_ADC1_Init+0x244>)
 80012bc:	2210      	movs	r2, #16
 80012be:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80012c0:	4b7a      	ldr	r3, [pc, #488]	; (80014ac <MX_ADC1_Init+0x244>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80012c8:	4b78      	ldr	r3, [pc, #480]	; (80014ac <MX_ADC1_Init+0x244>)
 80012ca:	2201      	movs	r2, #1
 80012cc:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80012ce:	4877      	ldr	r0, [pc, #476]	; (80014ac <MX_ADC1_Init+0x244>)
 80012d0:	f000 fcea 	bl	8001ca8 <HAL_ADC_Init>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d001      	beq.n	80012de <MX_ADC1_Init+0x76>
  {
    Error_Handler();
 80012da:	f000 fa05 	bl	80016e8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80012de:	230a      	movs	r3, #10
 80012e0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80012e2:	2301      	movs	r3, #1
 80012e4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80012e6:	2300      	movs	r3, #0
 80012e8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012ea:	463b      	mov	r3, r7
 80012ec:	4619      	mov	r1, r3
 80012ee:	486f      	ldr	r0, [pc, #444]	; (80014ac <MX_ADC1_Init+0x244>)
 80012f0:	f000 fea8 	bl	8002044 <HAL_ADC_ConfigChannel>
 80012f4:	4603      	mov	r3, r0
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d001      	beq.n	80012fe <MX_ADC1_Init+0x96>
  {
    Error_Handler();
 80012fa:	f000 f9f5 	bl	80016e8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80012fe:	230b      	movs	r3, #11
 8001300:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001302:	2302      	movs	r3, #2
 8001304:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001306:	463b      	mov	r3, r7
 8001308:	4619      	mov	r1, r3
 800130a:	4868      	ldr	r0, [pc, #416]	; (80014ac <MX_ADC1_Init+0x244>)
 800130c:	f000 fe9a 	bl	8002044 <HAL_ADC_ConfigChannel>
 8001310:	4603      	mov	r3, r0
 8001312:	2b00      	cmp	r3, #0
 8001314:	d001      	beq.n	800131a <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8001316:	f000 f9e7 	bl	80016e8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_12;
 800131a:	230c      	movs	r3, #12
 800131c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 800131e:	2303      	movs	r3, #3
 8001320:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001322:	463b      	mov	r3, r7
 8001324:	4619      	mov	r1, r3
 8001326:	4861      	ldr	r0, [pc, #388]	; (80014ac <MX_ADC1_Init+0x244>)
 8001328:	f000 fe8c 	bl	8002044 <HAL_ADC_ConfigChannel>
 800132c:	4603      	mov	r3, r0
 800132e:	2b00      	cmp	r3, #0
 8001330:	d001      	beq.n	8001336 <MX_ADC1_Init+0xce>
  {
    Error_Handler();
 8001332:	f000 f9d9 	bl	80016e8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8001336:	230d      	movs	r3, #13
 8001338:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 800133a:	2304      	movs	r3, #4
 800133c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800133e:	463b      	mov	r3, r7
 8001340:	4619      	mov	r1, r3
 8001342:	485a      	ldr	r0, [pc, #360]	; (80014ac <MX_ADC1_Init+0x244>)
 8001344:	f000 fe7e 	bl	8002044 <HAL_ADC_ConfigChannel>
 8001348:	4603      	mov	r3, r0
 800134a:	2b00      	cmp	r3, #0
 800134c:	d001      	beq.n	8001352 <MX_ADC1_Init+0xea>
  {
    Error_Handler();
 800134e:	f000 f9cb 	bl	80016e8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001352:	2300      	movs	r3, #0
 8001354:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8001356:	2305      	movs	r3, #5
 8001358:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800135a:	463b      	mov	r3, r7
 800135c:	4619      	mov	r1, r3
 800135e:	4853      	ldr	r0, [pc, #332]	; (80014ac <MX_ADC1_Init+0x244>)
 8001360:	f000 fe70 	bl	8002044 <HAL_ADC_ConfigChannel>
 8001364:	4603      	mov	r3, r0
 8001366:	2b00      	cmp	r3, #0
 8001368:	d001      	beq.n	800136e <MX_ADC1_Init+0x106>
  {
    Error_Handler();
 800136a:	f000 f9bd 	bl	80016e8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800136e:	2301      	movs	r3, #1
 8001370:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8001372:	2306      	movs	r3, #6
 8001374:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001376:	463b      	mov	r3, r7
 8001378:	4619      	mov	r1, r3
 800137a:	484c      	ldr	r0, [pc, #304]	; (80014ac <MX_ADC1_Init+0x244>)
 800137c:	f000 fe62 	bl	8002044 <HAL_ADC_ConfigChannel>
 8001380:	4603      	mov	r3, r0
 8001382:	2b00      	cmp	r3, #0
 8001384:	d001      	beq.n	800138a <MX_ADC1_Init+0x122>
  {
    Error_Handler();
 8001386:	f000 f9af 	bl	80016e8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800138a:	2302      	movs	r3, #2
 800138c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 800138e:	2307      	movs	r3, #7
 8001390:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001392:	463b      	mov	r3, r7
 8001394:	4619      	mov	r1, r3
 8001396:	4845      	ldr	r0, [pc, #276]	; (80014ac <MX_ADC1_Init+0x244>)
 8001398:	f000 fe54 	bl	8002044 <HAL_ADC_ConfigChannel>
 800139c:	4603      	mov	r3, r0
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d001      	beq.n	80013a6 <MX_ADC1_Init+0x13e>
  {
    Error_Handler();
 80013a2:	f000 f9a1 	bl	80016e8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80013a6:	2303      	movs	r3, #3
 80013a8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 80013aa:	2308      	movs	r3, #8
 80013ac:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013ae:	463b      	mov	r3, r7
 80013b0:	4619      	mov	r1, r3
 80013b2:	483e      	ldr	r0, [pc, #248]	; (80014ac <MX_ADC1_Init+0x244>)
 80013b4:	f000 fe46 	bl	8002044 <HAL_ADC_ConfigChannel>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d001      	beq.n	80013c2 <MX_ADC1_Init+0x15a>
  {
    Error_Handler();
 80013be:	f000 f993 	bl	80016e8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80013c2:	2304      	movs	r3, #4
 80013c4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 80013c6:	2309      	movs	r3, #9
 80013c8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013ca:	463b      	mov	r3, r7
 80013cc:	4619      	mov	r1, r3
 80013ce:	4837      	ldr	r0, [pc, #220]	; (80014ac <MX_ADC1_Init+0x244>)
 80013d0:	f000 fe38 	bl	8002044 <HAL_ADC_ConfigChannel>
 80013d4:	4603      	mov	r3, r0
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d001      	beq.n	80013de <MX_ADC1_Init+0x176>
  {
    Error_Handler();
 80013da:	f000 f985 	bl	80016e8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80013de:	2305      	movs	r3, #5
 80013e0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 10;
 80013e2:	230a      	movs	r3, #10
 80013e4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013e6:	463b      	mov	r3, r7
 80013e8:	4619      	mov	r1, r3
 80013ea:	4830      	ldr	r0, [pc, #192]	; (80014ac <MX_ADC1_Init+0x244>)
 80013ec:	f000 fe2a 	bl	8002044 <HAL_ADC_ConfigChannel>
 80013f0:	4603      	mov	r3, r0
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d001      	beq.n	80013fa <MX_ADC1_Init+0x192>
  {
    Error_Handler();
 80013f6:	f000 f977 	bl	80016e8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80013fa:	2306      	movs	r3, #6
 80013fc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 11;
 80013fe:	230b      	movs	r3, #11
 8001400:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001402:	463b      	mov	r3, r7
 8001404:	4619      	mov	r1, r3
 8001406:	4829      	ldr	r0, [pc, #164]	; (80014ac <MX_ADC1_Init+0x244>)
 8001408:	f000 fe1c 	bl	8002044 <HAL_ADC_ConfigChannel>
 800140c:	4603      	mov	r3, r0
 800140e:	2b00      	cmp	r3, #0
 8001410:	d001      	beq.n	8001416 <MX_ADC1_Init+0x1ae>
  {
    Error_Handler();
 8001412:	f000 f969 	bl	80016e8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8001416:	2307      	movs	r3, #7
 8001418:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 12;
 800141a:	230c      	movs	r3, #12
 800141c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800141e:	463b      	mov	r3, r7
 8001420:	4619      	mov	r1, r3
 8001422:	4822      	ldr	r0, [pc, #136]	; (80014ac <MX_ADC1_Init+0x244>)
 8001424:	f000 fe0e 	bl	8002044 <HAL_ADC_ConfigChannel>
 8001428:	4603      	mov	r3, r0
 800142a:	2b00      	cmp	r3, #0
 800142c:	d001      	beq.n	8001432 <MX_ADC1_Init+0x1ca>
  {
    Error_Handler();
 800142e:	f000 f95b 	bl	80016e8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8001432:	230e      	movs	r3, #14
 8001434:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 13;
 8001436:	230d      	movs	r3, #13
 8001438:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800143a:	463b      	mov	r3, r7
 800143c:	4619      	mov	r1, r3
 800143e:	481b      	ldr	r0, [pc, #108]	; (80014ac <MX_ADC1_Init+0x244>)
 8001440:	f000 fe00 	bl	8002044 <HAL_ADC_ConfigChannel>
 8001444:	4603      	mov	r3, r0
 8001446:	2b00      	cmp	r3, #0
 8001448:	d001      	beq.n	800144e <MX_ADC1_Init+0x1e6>
  {
    Error_Handler();
 800144a:	f000 f94d 	bl	80016e8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_15;
 800144e:	230f      	movs	r3, #15
 8001450:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 14;
 8001452:	230e      	movs	r3, #14
 8001454:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001456:	463b      	mov	r3, r7
 8001458:	4619      	mov	r1, r3
 800145a:	4814      	ldr	r0, [pc, #80]	; (80014ac <MX_ADC1_Init+0x244>)
 800145c:	f000 fdf2 	bl	8002044 <HAL_ADC_ConfigChannel>
 8001460:	4603      	mov	r3, r0
 8001462:	2b00      	cmp	r3, #0
 8001464:	d001      	beq.n	800146a <MX_ADC1_Init+0x202>
  {
    Error_Handler();
 8001466:	f000 f93f 	bl	80016e8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800146a:	2308      	movs	r3, #8
 800146c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 15;
 800146e:	230f      	movs	r3, #15
 8001470:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001472:	463b      	mov	r3, r7
 8001474:	4619      	mov	r1, r3
 8001476:	480d      	ldr	r0, [pc, #52]	; (80014ac <MX_ADC1_Init+0x244>)
 8001478:	f000 fde4 	bl	8002044 <HAL_ADC_ConfigChannel>
 800147c:	4603      	mov	r3, r0
 800147e:	2b00      	cmp	r3, #0
 8001480:	d001      	beq.n	8001486 <MX_ADC1_Init+0x21e>
  {
    Error_Handler();
 8001482:	f000 f931 	bl	80016e8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8001486:	2309      	movs	r3, #9
 8001488:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 16;
 800148a:	2310      	movs	r3, #16
 800148c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800148e:	463b      	mov	r3, r7
 8001490:	4619      	mov	r1, r3
 8001492:	4806      	ldr	r0, [pc, #24]	; (80014ac <MX_ADC1_Init+0x244>)
 8001494:	f000 fdd6 	bl	8002044 <HAL_ADC_ConfigChannel>
 8001498:	4603      	mov	r3, r0
 800149a:	2b00      	cmp	r3, #0
 800149c:	d001      	beq.n	80014a2 <MX_ADC1_Init+0x23a>
  {
    Error_Handler();
 800149e:	f000 f923 	bl	80016e8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80014a2:	bf00      	nop
 80014a4:	3710      	adds	r7, #16
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	20000380 	.word	0x20000380
 80014b0:	40012000 	.word	0x40012000
 80014b4:	0f000001 	.word	0x0f000001

080014b8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b086      	sub	sp, #24
 80014bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014be:	f107 0308 	add.w	r3, r7, #8
 80014c2:	2200      	movs	r2, #0
 80014c4:	601a      	str	r2, [r3, #0]
 80014c6:	605a      	str	r2, [r3, #4]
 80014c8:	609a      	str	r2, [r3, #8]
 80014ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014cc:	463b      	mov	r3, r7
 80014ce:	2200      	movs	r2, #0
 80014d0:	601a      	str	r2, [r3, #0]
 80014d2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80014d4:	4b1e      	ldr	r3, [pc, #120]	; (8001550 <MX_TIM2_Init+0x98>)
 80014d6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80014da:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8400-1;
 80014dc:	4b1c      	ldr	r3, [pc, #112]	; (8001550 <MX_TIM2_Init+0x98>)
 80014de:	f242 02cf 	movw	r2, #8399	; 0x20cf
 80014e2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014e4:	4b1a      	ldr	r3, [pc, #104]	; (8001550 <MX_TIM2_Init+0x98>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000-1;
 80014ea:	4b19      	ldr	r3, [pc, #100]	; (8001550 <MX_TIM2_Init+0x98>)
 80014ec:	f242 720f 	movw	r2, #9999	; 0x270f
 80014f0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014f2:	4b17      	ldr	r3, [pc, #92]	; (8001550 <MX_TIM2_Init+0x98>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014f8:	4b15      	ldr	r3, [pc, #84]	; (8001550 <MX_TIM2_Init+0x98>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80014fe:	4814      	ldr	r0, [pc, #80]	; (8001550 <MX_TIM2_Init+0x98>)
 8001500:	f001 fed2 	bl	80032a8 <HAL_TIM_Base_Init>
 8001504:	4603      	mov	r3, r0
 8001506:	2b00      	cmp	r3, #0
 8001508:	d001      	beq.n	800150e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800150a:	f000 f8ed 	bl	80016e8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800150e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001512:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001514:	f107 0308 	add.w	r3, r7, #8
 8001518:	4619      	mov	r1, r3
 800151a:	480d      	ldr	r0, [pc, #52]	; (8001550 <MX_TIM2_Init+0x98>)
 800151c:	f002 f81b 	bl	8003556 <HAL_TIM_ConfigClockSource>
 8001520:	4603      	mov	r3, r0
 8001522:	2b00      	cmp	r3, #0
 8001524:	d001      	beq.n	800152a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001526:	f000 f8df 	bl	80016e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800152a:	2300      	movs	r3, #0
 800152c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800152e:	2300      	movs	r3, #0
 8001530:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001532:	463b      	mov	r3, r7
 8001534:	4619      	mov	r1, r3
 8001536:	4806      	ldr	r0, [pc, #24]	; (8001550 <MX_TIM2_Init+0x98>)
 8001538:	f002 fa34 	bl	80039a4 <HAL_TIMEx_MasterConfigSynchronization>
 800153c:	4603      	mov	r3, r0
 800153e:	2b00      	cmp	r3, #0
 8001540:	d001      	beq.n	8001546 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001542:	f000 f8d1 	bl	80016e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001546:	bf00      	nop
 8001548:	3718      	adds	r7, #24
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	20000408 	.word	0x20000408

08001554 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001558:	4b11      	ldr	r3, [pc, #68]	; (80015a0 <MX_USART6_UART_Init+0x4c>)
 800155a:	4a12      	ldr	r2, [pc, #72]	; (80015a4 <MX_USART6_UART_Init+0x50>)
 800155c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800155e:	4b10      	ldr	r3, [pc, #64]	; (80015a0 <MX_USART6_UART_Init+0x4c>)
 8001560:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001564:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001566:	4b0e      	ldr	r3, [pc, #56]	; (80015a0 <MX_USART6_UART_Init+0x4c>)
 8001568:	2200      	movs	r2, #0
 800156a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800156c:	4b0c      	ldr	r3, [pc, #48]	; (80015a0 <MX_USART6_UART_Init+0x4c>)
 800156e:	2200      	movs	r2, #0
 8001570:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001572:	4b0b      	ldr	r3, [pc, #44]	; (80015a0 <MX_USART6_UART_Init+0x4c>)
 8001574:	2200      	movs	r2, #0
 8001576:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001578:	4b09      	ldr	r3, [pc, #36]	; (80015a0 <MX_USART6_UART_Init+0x4c>)
 800157a:	220c      	movs	r2, #12
 800157c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800157e:	4b08      	ldr	r3, [pc, #32]	; (80015a0 <MX_USART6_UART_Init+0x4c>)
 8001580:	2200      	movs	r2, #0
 8001582:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001584:	4b06      	ldr	r3, [pc, #24]	; (80015a0 <MX_USART6_UART_Init+0x4c>)
 8001586:	2200      	movs	r2, #0
 8001588:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800158a:	4805      	ldr	r0, [pc, #20]	; (80015a0 <MX_USART6_UART_Init+0x4c>)
 800158c:	f002 fa9a 	bl	8003ac4 <HAL_UART_Init>
 8001590:	4603      	mov	r3, r0
 8001592:	2b00      	cmp	r3, #0
 8001594:	d001      	beq.n	800159a <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8001596:	f000 f8a7 	bl	80016e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800159a:	bf00      	nop
 800159c:	bd80      	pop	{r7, pc}
 800159e:	bf00      	nop
 80015a0:	200003c8 	.word	0x200003c8
 80015a4:	40011400 	.word	0x40011400

080015a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b08a      	sub	sp, #40	; 0x28
 80015ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015ae:	f107 0314 	add.w	r3, r7, #20
 80015b2:	2200      	movs	r2, #0
 80015b4:	601a      	str	r2, [r3, #0]
 80015b6:	605a      	str	r2, [r3, #4]
 80015b8:	609a      	str	r2, [r3, #8]
 80015ba:	60da      	str	r2, [r3, #12]
 80015bc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015be:	2300      	movs	r3, #0
 80015c0:	613b      	str	r3, [r7, #16]
 80015c2:	4b32      	ldr	r3, [pc, #200]	; (800168c <MX_GPIO_Init+0xe4>)
 80015c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015c6:	4a31      	ldr	r2, [pc, #196]	; (800168c <MX_GPIO_Init+0xe4>)
 80015c8:	f043 0304 	orr.w	r3, r3, #4
 80015cc:	6313      	str	r3, [r2, #48]	; 0x30
 80015ce:	4b2f      	ldr	r3, [pc, #188]	; (800168c <MX_GPIO_Init+0xe4>)
 80015d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015d2:	f003 0304 	and.w	r3, r3, #4
 80015d6:	613b      	str	r3, [r7, #16]
 80015d8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015da:	2300      	movs	r3, #0
 80015dc:	60fb      	str	r3, [r7, #12]
 80015de:	4b2b      	ldr	r3, [pc, #172]	; (800168c <MX_GPIO_Init+0xe4>)
 80015e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015e2:	4a2a      	ldr	r2, [pc, #168]	; (800168c <MX_GPIO_Init+0xe4>)
 80015e4:	f043 0301 	orr.w	r3, r3, #1
 80015e8:	6313      	str	r3, [r2, #48]	; 0x30
 80015ea:	4b28      	ldr	r3, [pc, #160]	; (800168c <MX_GPIO_Init+0xe4>)
 80015ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ee:	f003 0301 	and.w	r3, r3, #1
 80015f2:	60fb      	str	r3, [r7, #12]
 80015f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015f6:	2300      	movs	r3, #0
 80015f8:	60bb      	str	r3, [r7, #8]
 80015fa:	4b24      	ldr	r3, [pc, #144]	; (800168c <MX_GPIO_Init+0xe4>)
 80015fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015fe:	4a23      	ldr	r2, [pc, #140]	; (800168c <MX_GPIO_Init+0xe4>)
 8001600:	f043 0302 	orr.w	r3, r3, #2
 8001604:	6313      	str	r3, [r2, #48]	; 0x30
 8001606:	4b21      	ldr	r3, [pc, #132]	; (800168c <MX_GPIO_Init+0xe4>)
 8001608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800160a:	f003 0302 	and.w	r3, r3, #2
 800160e:	60bb      	str	r3, [r7, #8]
 8001610:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001612:	2300      	movs	r3, #0
 8001614:	607b      	str	r3, [r7, #4]
 8001616:	4b1d      	ldr	r3, [pc, #116]	; (800168c <MX_GPIO_Init+0xe4>)
 8001618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800161a:	4a1c      	ldr	r2, [pc, #112]	; (800168c <MX_GPIO_Init+0xe4>)
 800161c:	f043 0308 	orr.w	r3, r3, #8
 8001620:	6313      	str	r3, [r2, #48]	; 0x30
 8001622:	4b1a      	ldr	r3, [pc, #104]	; (800168c <MX_GPIO_Init+0xe4>)
 8001624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001626:	f003 0308 	and.w	r3, r3, #8
 800162a:	607b      	str	r3, [r7, #4]
 800162c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13, GPIO_PIN_RESET);
 800162e:	2200      	movs	r2, #0
 8001630:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8001634:	4816      	ldr	r0, [pc, #88]	; (8001690 <MX_GPIO_Init+0xe8>)
 8001636:	f001 f9dd 	bl	80029f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 800163a:	2200      	movs	r2, #0
 800163c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001640:	4814      	ldr	r0, [pc, #80]	; (8001694 <MX_GPIO_Init+0xec>)
 8001642:	f001 f9d7 	bl	80029f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD12 PD13 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001646:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800164a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800164c:	2301      	movs	r3, #1
 800164e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001650:	2300      	movs	r3, #0
 8001652:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001654:	2300      	movs	r3, #0
 8001656:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001658:	f107 0314 	add.w	r3, r7, #20
 800165c:	4619      	mov	r1, r3
 800165e:	480c      	ldr	r0, [pc, #48]	; (8001690 <MX_GPIO_Init+0xe8>)
 8001660:	f001 f82c 	bl	80026bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001664:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001668:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800166a:	2301      	movs	r3, #1
 800166c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800166e:	2300      	movs	r3, #0
 8001670:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001672:	2300      	movs	r3, #0
 8001674:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001676:	f107 0314 	add.w	r3, r7, #20
 800167a:	4619      	mov	r1, r3
 800167c:	4805      	ldr	r0, [pc, #20]	; (8001694 <MX_GPIO_Init+0xec>)
 800167e:	f001 f81d 	bl	80026bc <HAL_GPIO_Init>

}
 8001682:	bf00      	nop
 8001684:	3728      	adds	r7, #40	; 0x28
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}
 800168a:	bf00      	nop
 800168c:	40023800 	.word	0x40023800
 8001690:	40020c00 	.word	0x40020c00
 8001694:	40020800 	.word	0x40020800

08001698 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)//TODO:--wayne20191211
{
 8001698:	b480      	push	{r7}
 800169a:	b083      	sub	sp, #12
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
	 if (htim->Instance == htim2.Instance)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681a      	ldr	r2, [r3, #0]
 80016a4:	4b0e      	ldr	r3, [pc, #56]	; (80016e0 <HAL_TIM_PeriodElapsedCallback+0x48>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	429a      	cmp	r2, r3
 80016aa:	d113      	bne.n	80016d4 <HAL_TIM_PeriodElapsedCallback+0x3c>
	 {
		 USARTBLE.SecCount++;
 80016ac:	4b0d      	ldr	r3, [pc, #52]	; (80016e4 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 80016ae:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 80016b2:	3301      	adds	r3, #1
 80016b4:	b2da      	uxtb	r2, r3
 80016b6:	4b0b      	ldr	r3, [pc, #44]	; (80016e4 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 80016b8:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
		 if(USARTBLE.SecCount==1)
 80016bc:	4b09      	ldr	r3, [pc, #36]	; (80016e4 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 80016be:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 80016c2:	2b01      	cmp	r3, #1
 80016c4:	d106      	bne.n	80016d4 <HAL_TIM_PeriodElapsedCallback+0x3c>
		 {
			 USARTBLE.sendflag = 1;
 80016c6:	4b07      	ldr	r3, [pc, #28]	; (80016e4 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 80016c8:	2201      	movs	r2, #1
 80016ca:	701a      	strb	r2, [r3, #0]
			 USARTBLE.SecCount=0;
 80016cc:	4b05      	ldr	r3, [pc, #20]	; (80016e4 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
		 }
	 }
}
 80016d4:	bf00      	nop
 80016d6:	370c      	adds	r7, #12
 80016d8:	46bd      	mov	sp, r7
 80016da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016de:	4770      	bx	lr
 80016e0:	20000408 	.word	0x20000408
 80016e4:	200002e0 	.word	0x200002e0

080016e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016e8:	b480      	push	{r7}
 80016ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80016ec:	bf00      	nop
 80016ee:	46bd      	mov	sp, r7
 80016f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f4:	4770      	bx	lr
	...

080016f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016f8:	b480      	push	{r7}
 80016fa:	b083      	sub	sp, #12
 80016fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016fe:	2300      	movs	r3, #0
 8001700:	607b      	str	r3, [r7, #4]
 8001702:	4b10      	ldr	r3, [pc, #64]	; (8001744 <HAL_MspInit+0x4c>)
 8001704:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001706:	4a0f      	ldr	r2, [pc, #60]	; (8001744 <HAL_MspInit+0x4c>)
 8001708:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800170c:	6453      	str	r3, [r2, #68]	; 0x44
 800170e:	4b0d      	ldr	r3, [pc, #52]	; (8001744 <HAL_MspInit+0x4c>)
 8001710:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001712:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001716:	607b      	str	r3, [r7, #4]
 8001718:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800171a:	2300      	movs	r3, #0
 800171c:	603b      	str	r3, [r7, #0]
 800171e:	4b09      	ldr	r3, [pc, #36]	; (8001744 <HAL_MspInit+0x4c>)
 8001720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001722:	4a08      	ldr	r2, [pc, #32]	; (8001744 <HAL_MspInit+0x4c>)
 8001724:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001728:	6413      	str	r3, [r2, #64]	; 0x40
 800172a:	4b06      	ldr	r3, [pc, #24]	; (8001744 <HAL_MspInit+0x4c>)
 800172c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800172e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001732:	603b      	str	r3, [r7, #0]
 8001734:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001736:	bf00      	nop
 8001738:	370c      	adds	r7, #12
 800173a:	46bd      	mov	sp, r7
 800173c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001740:	4770      	bx	lr
 8001742:	bf00      	nop
 8001744:	40023800 	.word	0x40023800

08001748 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b08c      	sub	sp, #48	; 0x30
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001750:	f107 031c 	add.w	r3, r7, #28
 8001754:	2200      	movs	r2, #0
 8001756:	601a      	str	r2, [r3, #0]
 8001758:	605a      	str	r2, [r3, #4]
 800175a:	609a      	str	r2, [r3, #8]
 800175c:	60da      	str	r2, [r3, #12]
 800175e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4a31      	ldr	r2, [pc, #196]	; (800182c <HAL_ADC_MspInit+0xe4>)
 8001766:	4293      	cmp	r3, r2
 8001768:	d15b      	bne.n	8001822 <HAL_ADC_MspInit+0xda>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800176a:	2300      	movs	r3, #0
 800176c:	61bb      	str	r3, [r7, #24]
 800176e:	4b30      	ldr	r3, [pc, #192]	; (8001830 <HAL_ADC_MspInit+0xe8>)
 8001770:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001772:	4a2f      	ldr	r2, [pc, #188]	; (8001830 <HAL_ADC_MspInit+0xe8>)
 8001774:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001778:	6453      	str	r3, [r2, #68]	; 0x44
 800177a:	4b2d      	ldr	r3, [pc, #180]	; (8001830 <HAL_ADC_MspInit+0xe8>)
 800177c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800177e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001782:	61bb      	str	r3, [r7, #24]
 8001784:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001786:	2300      	movs	r3, #0
 8001788:	617b      	str	r3, [r7, #20]
 800178a:	4b29      	ldr	r3, [pc, #164]	; (8001830 <HAL_ADC_MspInit+0xe8>)
 800178c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800178e:	4a28      	ldr	r2, [pc, #160]	; (8001830 <HAL_ADC_MspInit+0xe8>)
 8001790:	f043 0304 	orr.w	r3, r3, #4
 8001794:	6313      	str	r3, [r2, #48]	; 0x30
 8001796:	4b26      	ldr	r3, [pc, #152]	; (8001830 <HAL_ADC_MspInit+0xe8>)
 8001798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800179a:	f003 0304 	and.w	r3, r3, #4
 800179e:	617b      	str	r3, [r7, #20]
 80017a0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017a2:	2300      	movs	r3, #0
 80017a4:	613b      	str	r3, [r7, #16]
 80017a6:	4b22      	ldr	r3, [pc, #136]	; (8001830 <HAL_ADC_MspInit+0xe8>)
 80017a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017aa:	4a21      	ldr	r2, [pc, #132]	; (8001830 <HAL_ADC_MspInit+0xe8>)
 80017ac:	f043 0301 	orr.w	r3, r3, #1
 80017b0:	6313      	str	r3, [r2, #48]	; 0x30
 80017b2:	4b1f      	ldr	r3, [pc, #124]	; (8001830 <HAL_ADC_MspInit+0xe8>)
 80017b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017b6:	f003 0301 	and.w	r3, r3, #1
 80017ba:	613b      	str	r3, [r7, #16]
 80017bc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017be:	2300      	movs	r3, #0
 80017c0:	60fb      	str	r3, [r7, #12]
 80017c2:	4b1b      	ldr	r3, [pc, #108]	; (8001830 <HAL_ADC_MspInit+0xe8>)
 80017c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017c6:	4a1a      	ldr	r2, [pc, #104]	; (8001830 <HAL_ADC_MspInit+0xe8>)
 80017c8:	f043 0302 	orr.w	r3, r3, #2
 80017cc:	6313      	str	r3, [r2, #48]	; 0x30
 80017ce:	4b18      	ldr	r3, [pc, #96]	; (8001830 <HAL_ADC_MspInit+0xe8>)
 80017d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017d2:	f003 0302 	and.w	r3, r3, #2
 80017d6:	60fb      	str	r3, [r7, #12]
 80017d8:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 80017da:	233f      	movs	r3, #63	; 0x3f
 80017dc:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80017de:	2303      	movs	r3, #3
 80017e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e2:	2300      	movs	r3, #0
 80017e4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017e6:	f107 031c 	add.w	r3, r7, #28
 80017ea:	4619      	mov	r1, r3
 80017ec:	4811      	ldr	r0, [pc, #68]	; (8001834 <HAL_ADC_MspInit+0xec>)
 80017ee:	f000 ff65 	bl	80026bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 80017f2:	23ff      	movs	r3, #255	; 0xff
 80017f4:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80017f6:	2303      	movs	r3, #3
 80017f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017fa:	2300      	movs	r3, #0
 80017fc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017fe:	f107 031c 	add.w	r3, r7, #28
 8001802:	4619      	mov	r1, r3
 8001804:	480c      	ldr	r0, [pc, #48]	; (8001838 <HAL_ADC_MspInit+0xf0>)
 8001806:	f000 ff59 	bl	80026bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800180a:	2303      	movs	r3, #3
 800180c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800180e:	2303      	movs	r3, #3
 8001810:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001812:	2300      	movs	r3, #0
 8001814:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001816:	f107 031c 	add.w	r3, r7, #28
 800181a:	4619      	mov	r1, r3
 800181c:	4807      	ldr	r0, [pc, #28]	; (800183c <HAL_ADC_MspInit+0xf4>)
 800181e:	f000 ff4d 	bl	80026bc <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001822:	bf00      	nop
 8001824:	3730      	adds	r7, #48	; 0x30
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}
 800182a:	bf00      	nop
 800182c:	40012000 	.word	0x40012000
 8001830:	40023800 	.word	0x40023800
 8001834:	40020800 	.word	0x40020800
 8001838:	40020000 	.word	0x40020000
 800183c:	40020400 	.word	0x40020400

08001840 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b084      	sub	sp, #16
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001850:	d115      	bne.n	800187e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001852:	2300      	movs	r3, #0
 8001854:	60fb      	str	r3, [r7, #12]
 8001856:	4b0c      	ldr	r3, [pc, #48]	; (8001888 <HAL_TIM_Base_MspInit+0x48>)
 8001858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800185a:	4a0b      	ldr	r2, [pc, #44]	; (8001888 <HAL_TIM_Base_MspInit+0x48>)
 800185c:	f043 0301 	orr.w	r3, r3, #1
 8001860:	6413      	str	r3, [r2, #64]	; 0x40
 8001862:	4b09      	ldr	r3, [pc, #36]	; (8001888 <HAL_TIM_Base_MspInit+0x48>)
 8001864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001866:	f003 0301 	and.w	r3, r3, #1
 800186a:	60fb      	str	r3, [r7, #12]
 800186c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800186e:	2200      	movs	r2, #0
 8001870:	2100      	movs	r1, #0
 8001872:	201c      	movs	r0, #28
 8001874:	f000 feeb 	bl	800264e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001878:	201c      	movs	r0, #28
 800187a:	f000 ff04 	bl	8002686 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800187e:	bf00      	nop
 8001880:	3710      	adds	r7, #16
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}
 8001886:	bf00      	nop
 8001888:	40023800 	.word	0x40023800

0800188c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b08a      	sub	sp, #40	; 0x28
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001894:	f107 0314 	add.w	r3, r7, #20
 8001898:	2200      	movs	r2, #0
 800189a:	601a      	str	r2, [r3, #0]
 800189c:	605a      	str	r2, [r3, #4]
 800189e:	609a      	str	r2, [r3, #8]
 80018a0:	60da      	str	r2, [r3, #12]
 80018a2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4a19      	ldr	r2, [pc, #100]	; (8001910 <HAL_UART_MspInit+0x84>)
 80018aa:	4293      	cmp	r3, r2
 80018ac:	d12b      	bne.n	8001906 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 80018ae:	2300      	movs	r3, #0
 80018b0:	613b      	str	r3, [r7, #16]
 80018b2:	4b18      	ldr	r3, [pc, #96]	; (8001914 <HAL_UART_MspInit+0x88>)
 80018b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018b6:	4a17      	ldr	r2, [pc, #92]	; (8001914 <HAL_UART_MspInit+0x88>)
 80018b8:	f043 0320 	orr.w	r3, r3, #32
 80018bc:	6453      	str	r3, [r2, #68]	; 0x44
 80018be:	4b15      	ldr	r3, [pc, #84]	; (8001914 <HAL_UART_MspInit+0x88>)
 80018c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018c2:	f003 0320 	and.w	r3, r3, #32
 80018c6:	613b      	str	r3, [r7, #16]
 80018c8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80018ca:	2300      	movs	r3, #0
 80018cc:	60fb      	str	r3, [r7, #12]
 80018ce:	4b11      	ldr	r3, [pc, #68]	; (8001914 <HAL_UART_MspInit+0x88>)
 80018d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018d2:	4a10      	ldr	r2, [pc, #64]	; (8001914 <HAL_UART_MspInit+0x88>)
 80018d4:	f043 0304 	orr.w	r3, r3, #4
 80018d8:	6313      	str	r3, [r2, #48]	; 0x30
 80018da:	4b0e      	ldr	r3, [pc, #56]	; (8001914 <HAL_UART_MspInit+0x88>)
 80018dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018de:	f003 0304 	and.w	r3, r3, #4
 80018e2:	60fb      	str	r3, [r7, #12]
 80018e4:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration    
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80018e6:	23c0      	movs	r3, #192	; 0xc0
 80018e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ea:	2302      	movs	r3, #2
 80018ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ee:	2300      	movs	r3, #0
 80018f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018f2:	2303      	movs	r3, #3
 80018f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80018f6:	2308      	movs	r3, #8
 80018f8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018fa:	f107 0314 	add.w	r3, r7, #20
 80018fe:	4619      	mov	r1, r3
 8001900:	4805      	ldr	r0, [pc, #20]	; (8001918 <HAL_UART_MspInit+0x8c>)
 8001902:	f000 fedb 	bl	80026bc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8001906:	bf00      	nop
 8001908:	3728      	adds	r7, #40	; 0x28
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}
 800190e:	bf00      	nop
 8001910:	40011400 	.word	0x40011400
 8001914:	40023800 	.word	0x40023800
 8001918:	40020800 	.word	0x40020800

0800191c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800191c:	b480      	push	{r7}
 800191e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001920:	bf00      	nop
 8001922:	46bd      	mov	sp, r7
 8001924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001928:	4770      	bx	lr

0800192a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800192a:	b480      	push	{r7}
 800192c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800192e:	e7fe      	b.n	800192e <HardFault_Handler+0x4>

08001930 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001930:	b480      	push	{r7}
 8001932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001934:	e7fe      	b.n	8001934 <MemManage_Handler+0x4>

08001936 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001936:	b480      	push	{r7}
 8001938:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800193a:	e7fe      	b.n	800193a <BusFault_Handler+0x4>

0800193c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800193c:	b480      	push	{r7}
 800193e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001940:	e7fe      	b.n	8001940 <UsageFault_Handler+0x4>

08001942 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001942:	b480      	push	{r7}
 8001944:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001946:	bf00      	nop
 8001948:	46bd      	mov	sp, r7
 800194a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194e:	4770      	bx	lr

08001950 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001950:	b480      	push	{r7}
 8001952:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001954:	bf00      	nop
 8001956:	46bd      	mov	sp, r7
 8001958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195c:	4770      	bx	lr

0800195e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800195e:	b480      	push	{r7}
 8001960:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001962:	bf00      	nop
 8001964:	46bd      	mov	sp, r7
 8001966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196a:	4770      	bx	lr

0800196c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001970:	f000 f97a 	bl	8001c68 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001974:	bf00      	nop
 8001976:	bd80      	pop	{r7, pc}

08001978 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800197c:	4802      	ldr	r0, [pc, #8]	; (8001988 <TIM2_IRQHandler+0x10>)
 800197e:	f001 fce2 	bl	8003346 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001982:	bf00      	nop
 8001984:	bd80      	pop	{r7, pc}
 8001986:	bf00      	nop
 8001988:	20000408 	.word	0x20000408

0800198c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800198c:	b480      	push	{r7}
 800198e:	af00      	add	r7, sp, #0
	return 1;
 8001990:	2301      	movs	r3, #1
}
 8001992:	4618      	mov	r0, r3
 8001994:	46bd      	mov	sp, r7
 8001996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199a:	4770      	bx	lr

0800199c <_kill>:

int _kill(int pid, int sig)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b082      	sub	sp, #8
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
 80019a4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80019a6:	f002 fd59 	bl	800445c <__errno>
 80019aa:	4603      	mov	r3, r0
 80019ac:	2216      	movs	r2, #22
 80019ae:	601a      	str	r2, [r3, #0]
	return -1;
 80019b0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80019b4:	4618      	mov	r0, r3
 80019b6:	3708      	adds	r7, #8
 80019b8:	46bd      	mov	sp, r7
 80019ba:	bd80      	pop	{r7, pc}

080019bc <_exit>:

void _exit (int status)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b082      	sub	sp, #8
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80019c4:	f04f 31ff 	mov.w	r1, #4294967295
 80019c8:	6878      	ldr	r0, [r7, #4]
 80019ca:	f7ff ffe7 	bl	800199c <_kill>
	while (1) {}		/* Make sure we hang here */
 80019ce:	e7fe      	b.n	80019ce <_exit+0x12>

080019d0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b086      	sub	sp, #24
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	60f8      	str	r0, [r7, #12]
 80019d8:	60b9      	str	r1, [r7, #8]
 80019da:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019dc:	2300      	movs	r3, #0
 80019de:	617b      	str	r3, [r7, #20]
 80019e0:	e00a      	b.n	80019f8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80019e2:	f3af 8000 	nop.w
 80019e6:	4601      	mov	r1, r0
 80019e8:	68bb      	ldr	r3, [r7, #8]
 80019ea:	1c5a      	adds	r2, r3, #1
 80019ec:	60ba      	str	r2, [r7, #8]
 80019ee:	b2ca      	uxtb	r2, r1
 80019f0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019f2:	697b      	ldr	r3, [r7, #20]
 80019f4:	3301      	adds	r3, #1
 80019f6:	617b      	str	r3, [r7, #20]
 80019f8:	697a      	ldr	r2, [r7, #20]
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	429a      	cmp	r2, r3
 80019fe:	dbf0      	blt.n	80019e2 <_read+0x12>
	}

return len;
 8001a00:	687b      	ldr	r3, [r7, #4]
}
 8001a02:	4618      	mov	r0, r3
 8001a04:	3718      	adds	r7, #24
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}

08001a0a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001a0a:	b580      	push	{r7, lr}
 8001a0c:	b086      	sub	sp, #24
 8001a0e:	af00      	add	r7, sp, #0
 8001a10:	60f8      	str	r0, [r7, #12]
 8001a12:	60b9      	str	r1, [r7, #8]
 8001a14:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a16:	2300      	movs	r3, #0
 8001a18:	617b      	str	r3, [r7, #20]
 8001a1a:	e009      	b.n	8001a30 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001a1c:	68bb      	ldr	r3, [r7, #8]
 8001a1e:	1c5a      	adds	r2, r3, #1
 8001a20:	60ba      	str	r2, [r7, #8]
 8001a22:	781b      	ldrb	r3, [r3, #0]
 8001a24:	4618      	mov	r0, r3
 8001a26:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a2a:	697b      	ldr	r3, [r7, #20]
 8001a2c:	3301      	adds	r3, #1
 8001a2e:	617b      	str	r3, [r7, #20]
 8001a30:	697a      	ldr	r2, [r7, #20]
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	429a      	cmp	r2, r3
 8001a36:	dbf1      	blt.n	8001a1c <_write+0x12>
	}
	return len;
 8001a38:	687b      	ldr	r3, [r7, #4]
}
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	3718      	adds	r7, #24
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}

08001a42 <_close>:

int _close(int file)
{
 8001a42:	b480      	push	{r7}
 8001a44:	b083      	sub	sp, #12
 8001a46:	af00      	add	r7, sp, #0
 8001a48:	6078      	str	r0, [r7, #4]
	return -1;
 8001a4a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a4e:	4618      	mov	r0, r3
 8001a50:	370c      	adds	r7, #12
 8001a52:	46bd      	mov	sp, r7
 8001a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a58:	4770      	bx	lr

08001a5a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a5a:	b480      	push	{r7}
 8001a5c:	b083      	sub	sp, #12
 8001a5e:	af00      	add	r7, sp, #0
 8001a60:	6078      	str	r0, [r7, #4]
 8001a62:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001a6a:	605a      	str	r2, [r3, #4]
	return 0;
 8001a6c:	2300      	movs	r3, #0
}
 8001a6e:	4618      	mov	r0, r3
 8001a70:	370c      	adds	r7, #12
 8001a72:	46bd      	mov	sp, r7
 8001a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a78:	4770      	bx	lr

08001a7a <_isatty>:

int _isatty(int file)
{
 8001a7a:	b480      	push	{r7}
 8001a7c:	b083      	sub	sp, #12
 8001a7e:	af00      	add	r7, sp, #0
 8001a80:	6078      	str	r0, [r7, #4]
	return 1;
 8001a82:	2301      	movs	r3, #1
}
 8001a84:	4618      	mov	r0, r3
 8001a86:	370c      	adds	r7, #12
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8e:	4770      	bx	lr

08001a90 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a90:	b480      	push	{r7}
 8001a92:	b085      	sub	sp, #20
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	60f8      	str	r0, [r7, #12]
 8001a98:	60b9      	str	r1, [r7, #8]
 8001a9a:	607a      	str	r2, [r7, #4]
	return 0;
 8001a9c:	2300      	movs	r3, #0
}
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	3714      	adds	r7, #20
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa8:	4770      	bx	lr
	...

08001aac <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b084      	sub	sp, #16
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001ab4:	4b11      	ldr	r3, [pc, #68]	; (8001afc <_sbrk+0x50>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d102      	bne.n	8001ac2 <_sbrk+0x16>
		heap_end = &end;
 8001abc:	4b0f      	ldr	r3, [pc, #60]	; (8001afc <_sbrk+0x50>)
 8001abe:	4a10      	ldr	r2, [pc, #64]	; (8001b00 <_sbrk+0x54>)
 8001ac0:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001ac2:	4b0e      	ldr	r3, [pc, #56]	; (8001afc <_sbrk+0x50>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001ac8:	4b0c      	ldr	r3, [pc, #48]	; (8001afc <_sbrk+0x50>)
 8001aca:	681a      	ldr	r2, [r3, #0]
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	4413      	add	r3, r2
 8001ad0:	466a      	mov	r2, sp
 8001ad2:	4293      	cmp	r3, r2
 8001ad4:	d907      	bls.n	8001ae6 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001ad6:	f002 fcc1 	bl	800445c <__errno>
 8001ada:	4603      	mov	r3, r0
 8001adc:	220c      	movs	r2, #12
 8001ade:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8001ae0:	f04f 33ff 	mov.w	r3, #4294967295
 8001ae4:	e006      	b.n	8001af4 <_sbrk+0x48>
	}

	heap_end += incr;
 8001ae6:	4b05      	ldr	r3, [pc, #20]	; (8001afc <_sbrk+0x50>)
 8001ae8:	681a      	ldr	r2, [r3, #0]
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	4413      	add	r3, r2
 8001aee:	4a03      	ldr	r2, [pc, #12]	; (8001afc <_sbrk+0x50>)
 8001af0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001af2:	68fb      	ldr	r3, [r7, #12]
}
 8001af4:	4618      	mov	r0, r3
 8001af6:	3710      	adds	r7, #16
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bd80      	pop	{r7, pc}
 8001afc:	200001fc 	.word	0x200001fc
 8001b00:	20000460 	.word	0x20000460

08001b04 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b04:	b480      	push	{r7}
 8001b06:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b08:	4b16      	ldr	r3, [pc, #88]	; (8001b64 <SystemInit+0x60>)
 8001b0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b0e:	4a15      	ldr	r2, [pc, #84]	; (8001b64 <SystemInit+0x60>)
 8001b10:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b14:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001b18:	4b13      	ldr	r3, [pc, #76]	; (8001b68 <SystemInit+0x64>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4a12      	ldr	r2, [pc, #72]	; (8001b68 <SystemInit+0x64>)
 8001b1e:	f043 0301 	orr.w	r3, r3, #1
 8001b22:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001b24:	4b10      	ldr	r3, [pc, #64]	; (8001b68 <SystemInit+0x64>)
 8001b26:	2200      	movs	r2, #0
 8001b28:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001b2a:	4b0f      	ldr	r3, [pc, #60]	; (8001b68 <SystemInit+0x64>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	4a0e      	ldr	r2, [pc, #56]	; (8001b68 <SystemInit+0x64>)
 8001b30:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001b34:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b38:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001b3a:	4b0b      	ldr	r3, [pc, #44]	; (8001b68 <SystemInit+0x64>)
 8001b3c:	4a0b      	ldr	r2, [pc, #44]	; (8001b6c <SystemInit+0x68>)
 8001b3e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001b40:	4b09      	ldr	r3, [pc, #36]	; (8001b68 <SystemInit+0x64>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4a08      	ldr	r2, [pc, #32]	; (8001b68 <SystemInit+0x64>)
 8001b46:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b4a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001b4c:	4b06      	ldr	r3, [pc, #24]	; (8001b68 <SystemInit+0x64>)
 8001b4e:	2200      	movs	r2, #0
 8001b50:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001b52:	4b04      	ldr	r3, [pc, #16]	; (8001b64 <SystemInit+0x60>)
 8001b54:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001b58:	609a      	str	r2, [r3, #8]
#endif
}
 8001b5a:	bf00      	nop
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b62:	4770      	bx	lr
 8001b64:	e000ed00 	.word	0xe000ed00
 8001b68:	40023800 	.word	0x40023800
 8001b6c:	24003010 	.word	0x24003010

08001b70 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001b70:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ba8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001b74:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001b76:	e003      	b.n	8001b80 <LoopCopyDataInit>

08001b78 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001b78:	4b0c      	ldr	r3, [pc, #48]	; (8001bac <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001b7a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001b7c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001b7e:	3104      	adds	r1, #4

08001b80 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001b80:	480b      	ldr	r0, [pc, #44]	; (8001bb0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001b82:	4b0c      	ldr	r3, [pc, #48]	; (8001bb4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001b84:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001b86:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001b88:	d3f6      	bcc.n	8001b78 <CopyDataInit>
  ldr  r2, =_sbss
 8001b8a:	4a0b      	ldr	r2, [pc, #44]	; (8001bb8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001b8c:	e002      	b.n	8001b94 <LoopFillZerobss>

08001b8e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001b8e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001b90:	f842 3b04 	str.w	r3, [r2], #4

08001b94 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001b94:	4b09      	ldr	r3, [pc, #36]	; (8001bbc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001b96:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001b98:	d3f9      	bcc.n	8001b8e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001b9a:	f7ff ffb3 	bl	8001b04 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b9e:	f002 fc63 	bl	8004468 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ba2:	f7ff fad7 	bl	8001154 <main>
  bx  lr    
 8001ba6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001ba8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001bac:	08007654 	.word	0x08007654
  ldr  r0, =_sdata
 8001bb0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001bb4:	200001dc 	.word	0x200001dc
  ldr  r2, =_sbss
 8001bb8:	200001e0 	.word	0x200001e0
  ldr  r3, = _ebss
 8001bbc:	2000045c 	.word	0x2000045c

08001bc0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001bc0:	e7fe      	b.n	8001bc0 <ADC_IRQHandler>
	...

08001bc4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001bc8:	4b0e      	ldr	r3, [pc, #56]	; (8001c04 <HAL_Init+0x40>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4a0d      	ldr	r2, [pc, #52]	; (8001c04 <HAL_Init+0x40>)
 8001bce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001bd2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001bd4:	4b0b      	ldr	r3, [pc, #44]	; (8001c04 <HAL_Init+0x40>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4a0a      	ldr	r2, [pc, #40]	; (8001c04 <HAL_Init+0x40>)
 8001bda:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001bde:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001be0:	4b08      	ldr	r3, [pc, #32]	; (8001c04 <HAL_Init+0x40>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	4a07      	ldr	r2, [pc, #28]	; (8001c04 <HAL_Init+0x40>)
 8001be6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bec:	2003      	movs	r0, #3
 8001bee:	f000 fd23 	bl	8002638 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001bf2:	2000      	movs	r0, #0
 8001bf4:	f000 f808 	bl	8001c08 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001bf8:	f7ff fd7e 	bl	80016f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001bfc:	2300      	movs	r3, #0
}
 8001bfe:	4618      	mov	r0, r3
 8001c00:	bd80      	pop	{r7, pc}
 8001c02:	bf00      	nop
 8001c04:	40023c00 	.word	0x40023c00

08001c08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b082      	sub	sp, #8
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c10:	4b12      	ldr	r3, [pc, #72]	; (8001c5c <HAL_InitTick+0x54>)
 8001c12:	681a      	ldr	r2, [r3, #0]
 8001c14:	4b12      	ldr	r3, [pc, #72]	; (8001c60 <HAL_InitTick+0x58>)
 8001c16:	781b      	ldrb	r3, [r3, #0]
 8001c18:	4619      	mov	r1, r3
 8001c1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c1e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c22:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c26:	4618      	mov	r0, r3
 8001c28:	f000 fd3b 	bl	80026a2 <HAL_SYSTICK_Config>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d001      	beq.n	8001c36 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c32:	2301      	movs	r3, #1
 8001c34:	e00e      	b.n	8001c54 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	2b0f      	cmp	r3, #15
 8001c3a:	d80a      	bhi.n	8001c52 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	6879      	ldr	r1, [r7, #4]
 8001c40:	f04f 30ff 	mov.w	r0, #4294967295
 8001c44:	f000 fd03 	bl	800264e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c48:	4a06      	ldr	r2, [pc, #24]	; (8001c64 <HAL_InitTick+0x5c>)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	e000      	b.n	8001c54 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c52:	2301      	movs	r3, #1
}
 8001c54:	4618      	mov	r0, r3
 8001c56:	3708      	adds	r7, #8
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bd80      	pop	{r7, pc}
 8001c5c:	20000000 	.word	0x20000000
 8001c60:	20000008 	.word	0x20000008
 8001c64:	20000004 	.word	0x20000004

08001c68 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c6c:	4b06      	ldr	r3, [pc, #24]	; (8001c88 <HAL_IncTick+0x20>)
 8001c6e:	781b      	ldrb	r3, [r3, #0]
 8001c70:	461a      	mov	r2, r3
 8001c72:	4b06      	ldr	r3, [pc, #24]	; (8001c8c <HAL_IncTick+0x24>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	4413      	add	r3, r2
 8001c78:	4a04      	ldr	r2, [pc, #16]	; (8001c8c <HAL_IncTick+0x24>)
 8001c7a:	6013      	str	r3, [r2, #0]
}
 8001c7c:	bf00      	nop
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c84:	4770      	bx	lr
 8001c86:	bf00      	nop
 8001c88:	20000008 	.word	0x20000008
 8001c8c:	20000448 	.word	0x20000448

08001c90 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c90:	b480      	push	{r7}
 8001c92:	af00      	add	r7, sp, #0
  return uwTick;
 8001c94:	4b03      	ldr	r3, [pc, #12]	; (8001ca4 <HAL_GetTick+0x14>)
 8001c96:	681b      	ldr	r3, [r3, #0]
}
 8001c98:	4618      	mov	r0, r3
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca0:	4770      	bx	lr
 8001ca2:	bf00      	nop
 8001ca4:	20000448 	.word	0x20000448

08001ca8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b084      	sub	sp, #16
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d101      	bne.n	8001cbe <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001cba:	2301      	movs	r3, #1
 8001cbc:	e033      	b.n	8001d26 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d109      	bne.n	8001cda <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001cc6:	6878      	ldr	r0, [r7, #4]
 8001cc8:	f7ff fd3e 	bl	8001748 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	2200      	movs	r2, #0
 8001cd0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cde:	f003 0310 	and.w	r3, r3, #16
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d118      	bne.n	8001d18 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cea:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001cee:	f023 0302 	bic.w	r3, r3, #2
 8001cf2:	f043 0202 	orr.w	r2, r3, #2
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001cfa:	6878      	ldr	r0, [r7, #4]
 8001cfc:	f000 fad0 	bl	80022a0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2200      	movs	r2, #0
 8001d04:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d0a:	f023 0303 	bic.w	r3, r3, #3
 8001d0e:	f043 0201 	orr.w	r2, r3, #1
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	641a      	str	r2, [r3, #64]	; 0x40
 8001d16:	e001      	b.n	8001d1c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001d18:	2301      	movs	r3, #1
 8001d1a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	2200      	movs	r2, #0
 8001d20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001d24:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d26:	4618      	mov	r0, r3
 8001d28:	3710      	adds	r7, #16
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd80      	pop	{r7, pc}
	...

08001d30 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001d30:	b480      	push	{r7}
 8001d32:	b085      	sub	sp, #20
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d42:	2b01      	cmp	r3, #1
 8001d44:	d101      	bne.n	8001d4a <HAL_ADC_Start+0x1a>
 8001d46:	2302      	movs	r3, #2
 8001d48:	e0a5      	b.n	8001e96 <HAL_ADC_Start+0x166>
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2201      	movs	r2, #1
 8001d4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	689b      	ldr	r3, [r3, #8]
 8001d58:	f003 0301 	and.w	r3, r3, #1
 8001d5c:	2b01      	cmp	r3, #1
 8001d5e:	d018      	beq.n	8001d92 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	689a      	ldr	r2, [r3, #8]
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f042 0201 	orr.w	r2, r2, #1
 8001d6e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001d70:	4b4c      	ldr	r3, [pc, #304]	; (8001ea4 <HAL_ADC_Start+0x174>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4a4c      	ldr	r2, [pc, #304]	; (8001ea8 <HAL_ADC_Start+0x178>)
 8001d76:	fba2 2303 	umull	r2, r3, r2, r3
 8001d7a:	0c9a      	lsrs	r2, r3, #18
 8001d7c:	4613      	mov	r3, r2
 8001d7e:	005b      	lsls	r3, r3, #1
 8001d80:	4413      	add	r3, r2
 8001d82:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001d84:	e002      	b.n	8001d8c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001d86:	68bb      	ldr	r3, [r7, #8]
 8001d88:	3b01      	subs	r3, #1
 8001d8a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001d8c:	68bb      	ldr	r3, [r7, #8]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d1f9      	bne.n	8001d86 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	689b      	ldr	r3, [r3, #8]
 8001d98:	f003 0301 	and.w	r3, r3, #1
 8001d9c:	2b01      	cmp	r3, #1
 8001d9e:	d179      	bne.n	8001e94 <HAL_ADC_Start+0x164>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001da4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001da8:	f023 0301 	bic.w	r3, r3, #1
 8001dac:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	685b      	ldr	r3, [r3, #4]
 8001dba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d007      	beq.n	8001dd2 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dc6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001dca:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dd6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001dda:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001dde:	d106      	bne.n	8001dee <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001de4:	f023 0206 	bic.w	r2, r3, #6
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	645a      	str	r2, [r3, #68]	; 0x44
 8001dec:	e002      	b.n	8001df4 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	2200      	movs	r2, #0
 8001df2:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2200      	movs	r2, #0
 8001df8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001dfc:	4b2b      	ldr	r3, [pc, #172]	; (8001eac <HAL_ADC_Start+0x17c>)
 8001dfe:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001e08:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	685b      	ldr	r3, [r3, #4]
 8001e0e:	f003 031f 	and.w	r3, r3, #31
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d12a      	bne.n	8001e6c <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	4a25      	ldr	r2, [pc, #148]	; (8001eb0 <HAL_ADC_Start+0x180>)
 8001e1c:	4293      	cmp	r3, r2
 8001e1e:	d015      	beq.n	8001e4c <HAL_ADC_Start+0x11c>
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4a23      	ldr	r2, [pc, #140]	; (8001eb4 <HAL_ADC_Start+0x184>)
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d105      	bne.n	8001e36 <HAL_ADC_Start+0x106>
 8001e2a:	4b20      	ldr	r3, [pc, #128]	; (8001eac <HAL_ADC_Start+0x17c>)
 8001e2c:	685b      	ldr	r3, [r3, #4]
 8001e2e:	f003 031f 	and.w	r3, r3, #31
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d00a      	beq.n	8001e4c <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4a1f      	ldr	r2, [pc, #124]	; (8001eb8 <HAL_ADC_Start+0x188>)
 8001e3c:	4293      	cmp	r3, r2
 8001e3e:	d129      	bne.n	8001e94 <HAL_ADC_Start+0x164>
 8001e40:	4b1a      	ldr	r3, [pc, #104]	; (8001eac <HAL_ADC_Start+0x17c>)
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	f003 0310 	and.w	r3, r3, #16
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d123      	bne.n	8001e94 <HAL_ADC_Start+0x164>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	689b      	ldr	r3, [r3, #8]
 8001e52:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d11c      	bne.n	8001e94 <HAL_ADC_Start+0x164>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	689a      	ldr	r2, [r3, #8]
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001e68:	609a      	str	r2, [r3, #8]
 8001e6a:	e013      	b.n	8001e94 <HAL_ADC_Start+0x164>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4a0f      	ldr	r2, [pc, #60]	; (8001eb0 <HAL_ADC_Start+0x180>)
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d10e      	bne.n	8001e94 <HAL_ADC_Start+0x164>
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	689b      	ldr	r3, [r3, #8]
 8001e7c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d107      	bne.n	8001e94 <HAL_ADC_Start+0x164>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	689a      	ldr	r2, [r3, #8]
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001e92:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8001e94:	2300      	movs	r3, #0
}
 8001e96:	4618      	mov	r0, r3
 8001e98:	3714      	adds	r7, #20
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea0:	4770      	bx	lr
 8001ea2:	bf00      	nop
 8001ea4:	20000000 	.word	0x20000000
 8001ea8:	431bde83 	.word	0x431bde83
 8001eac:	40012300 	.word	0x40012300
 8001eb0:	40012000 	.word	0x40012000
 8001eb4:	40012100 	.word	0x40012100
 8001eb8:	40012200 	.word	0x40012200

08001ebc <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	b083      	sub	sp, #12
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001eca:	2b01      	cmp	r3, #1
 8001ecc:	d101      	bne.n	8001ed2 <HAL_ADC_Stop+0x16>
 8001ece:	2302      	movs	r3, #2
 8001ed0:	e021      	b.n	8001f16 <HAL_ADC_Stop+0x5a>
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2201      	movs	r2, #1
 8001ed6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	689a      	ldr	r2, [r3, #8]
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f022 0201 	bic.w	r2, r2, #1
 8001ee8:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	689b      	ldr	r3, [r3, #8]
 8001ef0:	f003 0301 	and.w	r3, r3, #1
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d109      	bne.n	8001f0c <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001efc:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001f00:	f023 0301 	bic.w	r3, r3, #1
 8001f04:	f043 0201 	orr.w	r2, r3, #1
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2200      	movs	r2, #0
 8001f10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001f14:	2300      	movs	r3, #0
}
 8001f16:	4618      	mov	r0, r3
 8001f18:	370c      	adds	r7, #12
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f20:	4770      	bx	lr

08001f22 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001f22:	b580      	push	{r7, lr}
 8001f24:	b084      	sub	sp, #16
 8001f26:	af00      	add	r7, sp, #0
 8001f28:	6078      	str	r0, [r7, #4]
 8001f2a:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	689b      	ldr	r3, [r3, #8]
 8001f36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f3e:	d113      	bne.n	8001f68 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	689b      	ldr	r3, [r3, #8]
 8001f46:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001f4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001f4e:	d10b      	bne.n	8001f68 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f54:	f043 0220 	orr.w	r2, r3, #32
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2200      	movs	r2, #0
 8001f60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8001f64:	2301      	movs	r3, #1
 8001f66:	e05c      	b.n	8002022 <HAL_ADC_PollForConversion+0x100>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8001f68:	f7ff fe92 	bl	8001c90 <HAL_GetTick>
 8001f6c:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001f6e:	e01a      	b.n	8001fa6 <HAL_ADC_PollForConversion+0x84>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f76:	d016      	beq.n	8001fa6 <HAL_ADC_PollForConversion+0x84>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d007      	beq.n	8001f8e <HAL_ADC_PollForConversion+0x6c>
 8001f7e:	f7ff fe87 	bl	8001c90 <HAL_GetTick>
 8001f82:	4602      	mov	r2, r0
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	1ad3      	subs	r3, r2, r3
 8001f88:	683a      	ldr	r2, [r7, #0]
 8001f8a:	429a      	cmp	r2, r3
 8001f8c:	d20b      	bcs.n	8001fa6 <HAL_ADC_PollForConversion+0x84>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f92:	f043 0204 	orr.w	r2, r3, #4
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 8001fa2:	2303      	movs	r3, #3
 8001fa4:	e03d      	b.n	8002022 <HAL_ADC_PollForConversion+0x100>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f003 0302 	and.w	r3, r3, #2
 8001fb0:	2b02      	cmp	r3, #2
 8001fb2:	d1dd      	bne.n	8001f70 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f06f 0212 	mvn.w	r2, #18
 8001fbc:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fc2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	689b      	ldr	r3, [r3, #8]
 8001fd0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d123      	bne.n	8002020 <HAL_ADC_PollForConversion+0xfe>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d11f      	bne.n	8002020 <HAL_ADC_PollForConversion+0xfe>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fe6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d006      	beq.n	8001ffc <HAL_ADC_PollForConversion+0xda>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	689b      	ldr	r3, [r3, #8]
 8001ff4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d111      	bne.n	8002020 <HAL_ADC_PollForConversion+0xfe>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002000:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800200c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002010:	2b00      	cmp	r3, #0
 8002012:	d105      	bne.n	8002020 <HAL_ADC_PollForConversion+0xfe>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002018:	f043 0201 	orr.w	r2, r3, #1
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002020:	2300      	movs	r3, #0
}
 8002022:	4618      	mov	r0, r3
 8002024:	3710      	adds	r7, #16
 8002026:	46bd      	mov	sp, r7
 8002028:	bd80      	pop	{r7, pc}

0800202a <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 800202a:	b480      	push	{r7}
 800202c:	b083      	sub	sp, #12
 800202e:	af00      	add	r7, sp, #0
 8002030:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002038:	4618      	mov	r0, r3
 800203a:	370c      	adds	r7, #12
 800203c:	46bd      	mov	sp, r7
 800203e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002042:	4770      	bx	lr

08002044 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002044:	b480      	push	{r7}
 8002046:	b085      	sub	sp, #20
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
 800204c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800204e:	2300      	movs	r3, #0
 8002050:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002058:	2b01      	cmp	r3, #1
 800205a:	d101      	bne.n	8002060 <HAL_ADC_ConfigChannel+0x1c>
 800205c:	2302      	movs	r3, #2
 800205e:	e105      	b.n	800226c <HAL_ADC_ConfigChannel+0x228>
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2201      	movs	r2, #1
 8002064:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	2b09      	cmp	r3, #9
 800206e:	d925      	bls.n	80020bc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	68d9      	ldr	r1, [r3, #12]
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	b29b      	uxth	r3, r3
 800207c:	461a      	mov	r2, r3
 800207e:	4613      	mov	r3, r2
 8002080:	005b      	lsls	r3, r3, #1
 8002082:	4413      	add	r3, r2
 8002084:	3b1e      	subs	r3, #30
 8002086:	2207      	movs	r2, #7
 8002088:	fa02 f303 	lsl.w	r3, r2, r3
 800208c:	43da      	mvns	r2, r3
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	400a      	ands	r2, r1
 8002094:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	68d9      	ldr	r1, [r3, #12]
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	689a      	ldr	r2, [r3, #8]
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	b29b      	uxth	r3, r3
 80020a6:	4618      	mov	r0, r3
 80020a8:	4603      	mov	r3, r0
 80020aa:	005b      	lsls	r3, r3, #1
 80020ac:	4403      	add	r3, r0
 80020ae:	3b1e      	subs	r3, #30
 80020b0:	409a      	lsls	r2, r3
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	430a      	orrs	r2, r1
 80020b8:	60da      	str	r2, [r3, #12]
 80020ba:	e022      	b.n	8002102 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	6919      	ldr	r1, [r3, #16]
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	b29b      	uxth	r3, r3
 80020c8:	461a      	mov	r2, r3
 80020ca:	4613      	mov	r3, r2
 80020cc:	005b      	lsls	r3, r3, #1
 80020ce:	4413      	add	r3, r2
 80020d0:	2207      	movs	r2, #7
 80020d2:	fa02 f303 	lsl.w	r3, r2, r3
 80020d6:	43da      	mvns	r2, r3
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	400a      	ands	r2, r1
 80020de:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	6919      	ldr	r1, [r3, #16]
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	689a      	ldr	r2, [r3, #8]
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	b29b      	uxth	r3, r3
 80020f0:	4618      	mov	r0, r3
 80020f2:	4603      	mov	r3, r0
 80020f4:	005b      	lsls	r3, r3, #1
 80020f6:	4403      	add	r3, r0
 80020f8:	409a      	lsls	r2, r3
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	430a      	orrs	r2, r1
 8002100:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	685b      	ldr	r3, [r3, #4]
 8002106:	2b06      	cmp	r3, #6
 8002108:	d824      	bhi.n	8002154 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	685a      	ldr	r2, [r3, #4]
 8002114:	4613      	mov	r3, r2
 8002116:	009b      	lsls	r3, r3, #2
 8002118:	4413      	add	r3, r2
 800211a:	3b05      	subs	r3, #5
 800211c:	221f      	movs	r2, #31
 800211e:	fa02 f303 	lsl.w	r3, r2, r3
 8002122:	43da      	mvns	r2, r3
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	400a      	ands	r2, r1
 800212a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	b29b      	uxth	r3, r3
 8002138:	4618      	mov	r0, r3
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	685a      	ldr	r2, [r3, #4]
 800213e:	4613      	mov	r3, r2
 8002140:	009b      	lsls	r3, r3, #2
 8002142:	4413      	add	r3, r2
 8002144:	3b05      	subs	r3, #5
 8002146:	fa00 f203 	lsl.w	r2, r0, r3
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	430a      	orrs	r2, r1
 8002150:	635a      	str	r2, [r3, #52]	; 0x34
 8002152:	e04c      	b.n	80021ee <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	2b0c      	cmp	r3, #12
 800215a:	d824      	bhi.n	80021a6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	685a      	ldr	r2, [r3, #4]
 8002166:	4613      	mov	r3, r2
 8002168:	009b      	lsls	r3, r3, #2
 800216a:	4413      	add	r3, r2
 800216c:	3b23      	subs	r3, #35	; 0x23
 800216e:	221f      	movs	r2, #31
 8002170:	fa02 f303 	lsl.w	r3, r2, r3
 8002174:	43da      	mvns	r2, r3
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	400a      	ands	r2, r1
 800217c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	b29b      	uxth	r3, r3
 800218a:	4618      	mov	r0, r3
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	685a      	ldr	r2, [r3, #4]
 8002190:	4613      	mov	r3, r2
 8002192:	009b      	lsls	r3, r3, #2
 8002194:	4413      	add	r3, r2
 8002196:	3b23      	subs	r3, #35	; 0x23
 8002198:	fa00 f203 	lsl.w	r2, r0, r3
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	430a      	orrs	r2, r1
 80021a2:	631a      	str	r2, [r3, #48]	; 0x30
 80021a4:	e023      	b.n	80021ee <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	685a      	ldr	r2, [r3, #4]
 80021b0:	4613      	mov	r3, r2
 80021b2:	009b      	lsls	r3, r3, #2
 80021b4:	4413      	add	r3, r2
 80021b6:	3b41      	subs	r3, #65	; 0x41
 80021b8:	221f      	movs	r2, #31
 80021ba:	fa02 f303 	lsl.w	r3, r2, r3
 80021be:	43da      	mvns	r2, r3
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	400a      	ands	r2, r1
 80021c6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	b29b      	uxth	r3, r3
 80021d4:	4618      	mov	r0, r3
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	685a      	ldr	r2, [r3, #4]
 80021da:	4613      	mov	r3, r2
 80021dc:	009b      	lsls	r3, r3, #2
 80021de:	4413      	add	r3, r2
 80021e0:	3b41      	subs	r3, #65	; 0x41
 80021e2:	fa00 f203 	lsl.w	r2, r0, r3
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	430a      	orrs	r2, r1
 80021ec:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80021ee:	4b22      	ldr	r3, [pc, #136]	; (8002278 <HAL_ADC_ConfigChannel+0x234>)
 80021f0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	4a21      	ldr	r2, [pc, #132]	; (800227c <HAL_ADC_ConfigChannel+0x238>)
 80021f8:	4293      	cmp	r3, r2
 80021fa:	d109      	bne.n	8002210 <HAL_ADC_ConfigChannel+0x1cc>
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	2b12      	cmp	r3, #18
 8002202:	d105      	bne.n	8002210 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	4a19      	ldr	r2, [pc, #100]	; (800227c <HAL_ADC_ConfigChannel+0x238>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d123      	bne.n	8002262 <HAL_ADC_ConfigChannel+0x21e>
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	2b10      	cmp	r3, #16
 8002220:	d003      	beq.n	800222a <HAL_ADC_ConfigChannel+0x1e6>
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	2b11      	cmp	r3, #17
 8002228:	d11b      	bne.n	8002262 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	685b      	ldr	r3, [r3, #4]
 800222e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	2b10      	cmp	r3, #16
 800223c:	d111      	bne.n	8002262 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800223e:	4b10      	ldr	r3, [pc, #64]	; (8002280 <HAL_ADC_ConfigChannel+0x23c>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4a10      	ldr	r2, [pc, #64]	; (8002284 <HAL_ADC_ConfigChannel+0x240>)
 8002244:	fba2 2303 	umull	r2, r3, r2, r3
 8002248:	0c9a      	lsrs	r2, r3, #18
 800224a:	4613      	mov	r3, r2
 800224c:	009b      	lsls	r3, r3, #2
 800224e:	4413      	add	r3, r2
 8002250:	005b      	lsls	r3, r3, #1
 8002252:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002254:	e002      	b.n	800225c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002256:	68bb      	ldr	r3, [r7, #8]
 8002258:	3b01      	subs	r3, #1
 800225a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800225c:	68bb      	ldr	r3, [r7, #8]
 800225e:	2b00      	cmp	r3, #0
 8002260:	d1f9      	bne.n	8002256 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	2200      	movs	r2, #0
 8002266:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800226a:	2300      	movs	r3, #0
}
 800226c:	4618      	mov	r0, r3
 800226e:	3714      	adds	r7, #20
 8002270:	46bd      	mov	sp, r7
 8002272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002276:	4770      	bx	lr
 8002278:	40012300 	.word	0x40012300
 800227c:	40012000 	.word	0x40012000
 8002280:	20000000 	.word	0x20000000
 8002284:	431bde83 	.word	0x431bde83

08002288 <HAL_ADC_GetState>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL state
  */
uint32_t HAL_ADC_GetState(ADC_HandleTypeDef* hadc)
{
 8002288:	b480      	push	{r7}
 800228a:	b083      	sub	sp, #12
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
  /* Return ADC state */
  return hadc->State;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002294:	4618      	mov	r0, r3
 8002296:	370c      	adds	r7, #12
 8002298:	46bd      	mov	sp, r7
 800229a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229e:	4770      	bx	lr

080022a0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80022a0:	b480      	push	{r7}
 80022a2:	b085      	sub	sp, #20
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80022a8:	4b79      	ldr	r3, [pc, #484]	; (8002490 <ADC_Init+0x1f0>)
 80022aa:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	685a      	ldr	r2, [r3, #4]
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	431a      	orrs	r2, r3
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	685a      	ldr	r2, [r3, #4]
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80022d4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	6859      	ldr	r1, [r3, #4]
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	691b      	ldr	r3, [r3, #16]
 80022e0:	021a      	lsls	r2, r3, #8
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	430a      	orrs	r2, r1
 80022e8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	685a      	ldr	r2, [r3, #4]
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80022f8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	6859      	ldr	r1, [r3, #4]
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	689a      	ldr	r2, [r3, #8]
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	430a      	orrs	r2, r1
 800230a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	689a      	ldr	r2, [r3, #8]
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800231a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	6899      	ldr	r1, [r3, #8]
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	68da      	ldr	r2, [r3, #12]
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	430a      	orrs	r2, r1
 800232c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002332:	4a58      	ldr	r2, [pc, #352]	; (8002494 <ADC_Init+0x1f4>)
 8002334:	4293      	cmp	r3, r2
 8002336:	d022      	beq.n	800237e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	689a      	ldr	r2, [r3, #8]
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002346:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	6899      	ldr	r1, [r3, #8]
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	430a      	orrs	r2, r1
 8002358:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	689a      	ldr	r2, [r3, #8]
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002368:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	6899      	ldr	r1, [r3, #8]
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	430a      	orrs	r2, r1
 800237a:	609a      	str	r2, [r3, #8]
 800237c:	e00f      	b.n	800239e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	689a      	ldr	r2, [r3, #8]
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800238c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	689a      	ldr	r2, [r3, #8]
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800239c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	689a      	ldr	r2, [r3, #8]
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f022 0202 	bic.w	r2, r2, #2
 80023ac:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	6899      	ldr	r1, [r3, #8]
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	7e1b      	ldrb	r3, [r3, #24]
 80023b8:	005a      	lsls	r2, r3, #1
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	430a      	orrs	r2, r1
 80023c0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d01b      	beq.n	8002404 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	685a      	ldr	r2, [r3, #4]
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80023da:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	685a      	ldr	r2, [r3, #4]
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80023ea:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	6859      	ldr	r1, [r3, #4]
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023f6:	3b01      	subs	r3, #1
 80023f8:	035a      	lsls	r2, r3, #13
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	430a      	orrs	r2, r1
 8002400:	605a      	str	r2, [r3, #4]
 8002402:	e007      	b.n	8002414 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	685a      	ldr	r2, [r3, #4]
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002412:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002422:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	69db      	ldr	r3, [r3, #28]
 800242e:	3b01      	subs	r3, #1
 8002430:	051a      	lsls	r2, r3, #20
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	430a      	orrs	r2, r1
 8002438:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	689a      	ldr	r2, [r3, #8]
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002448:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	6899      	ldr	r1, [r3, #8]
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002456:	025a      	lsls	r2, r3, #9
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	430a      	orrs	r2, r1
 800245e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	689a      	ldr	r2, [r3, #8]
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800246e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	6899      	ldr	r1, [r3, #8]
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	695b      	ldr	r3, [r3, #20]
 800247a:	029a      	lsls	r2, r3, #10
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	430a      	orrs	r2, r1
 8002482:	609a      	str	r2, [r3, #8]
}
 8002484:	bf00      	nop
 8002486:	3714      	adds	r7, #20
 8002488:	46bd      	mov	sp, r7
 800248a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248e:	4770      	bx	lr
 8002490:	40012300 	.word	0x40012300
 8002494:	0f000001 	.word	0x0f000001

08002498 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002498:	b480      	push	{r7}
 800249a:	b085      	sub	sp, #20
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	f003 0307 	and.w	r3, r3, #7
 80024a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80024a8:	4b0c      	ldr	r3, [pc, #48]	; (80024dc <__NVIC_SetPriorityGrouping+0x44>)
 80024aa:	68db      	ldr	r3, [r3, #12]
 80024ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80024ae:	68ba      	ldr	r2, [r7, #8]
 80024b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80024b4:	4013      	ands	r3, r2
 80024b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80024bc:	68bb      	ldr	r3, [r7, #8]
 80024be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80024c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80024c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80024ca:	4a04      	ldr	r2, [pc, #16]	; (80024dc <__NVIC_SetPriorityGrouping+0x44>)
 80024cc:	68bb      	ldr	r3, [r7, #8]
 80024ce:	60d3      	str	r3, [r2, #12]
}
 80024d0:	bf00      	nop
 80024d2:	3714      	adds	r7, #20
 80024d4:	46bd      	mov	sp, r7
 80024d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024da:	4770      	bx	lr
 80024dc:	e000ed00 	.word	0xe000ed00

080024e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80024e0:	b480      	push	{r7}
 80024e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80024e4:	4b04      	ldr	r3, [pc, #16]	; (80024f8 <__NVIC_GetPriorityGrouping+0x18>)
 80024e6:	68db      	ldr	r3, [r3, #12]
 80024e8:	0a1b      	lsrs	r3, r3, #8
 80024ea:	f003 0307 	and.w	r3, r3, #7
}
 80024ee:	4618      	mov	r0, r3
 80024f0:	46bd      	mov	sp, r7
 80024f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f6:	4770      	bx	lr
 80024f8:	e000ed00 	.word	0xe000ed00

080024fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024fc:	b480      	push	{r7}
 80024fe:	b083      	sub	sp, #12
 8002500:	af00      	add	r7, sp, #0
 8002502:	4603      	mov	r3, r0
 8002504:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002506:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800250a:	2b00      	cmp	r3, #0
 800250c:	db0b      	blt.n	8002526 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800250e:	79fb      	ldrb	r3, [r7, #7]
 8002510:	f003 021f 	and.w	r2, r3, #31
 8002514:	4907      	ldr	r1, [pc, #28]	; (8002534 <__NVIC_EnableIRQ+0x38>)
 8002516:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800251a:	095b      	lsrs	r3, r3, #5
 800251c:	2001      	movs	r0, #1
 800251e:	fa00 f202 	lsl.w	r2, r0, r2
 8002522:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002526:	bf00      	nop
 8002528:	370c      	adds	r7, #12
 800252a:	46bd      	mov	sp, r7
 800252c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002530:	4770      	bx	lr
 8002532:	bf00      	nop
 8002534:	e000e100 	.word	0xe000e100

08002538 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002538:	b480      	push	{r7}
 800253a:	b083      	sub	sp, #12
 800253c:	af00      	add	r7, sp, #0
 800253e:	4603      	mov	r3, r0
 8002540:	6039      	str	r1, [r7, #0]
 8002542:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002544:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002548:	2b00      	cmp	r3, #0
 800254a:	db0a      	blt.n	8002562 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	b2da      	uxtb	r2, r3
 8002550:	490c      	ldr	r1, [pc, #48]	; (8002584 <__NVIC_SetPriority+0x4c>)
 8002552:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002556:	0112      	lsls	r2, r2, #4
 8002558:	b2d2      	uxtb	r2, r2
 800255a:	440b      	add	r3, r1
 800255c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002560:	e00a      	b.n	8002578 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	b2da      	uxtb	r2, r3
 8002566:	4908      	ldr	r1, [pc, #32]	; (8002588 <__NVIC_SetPriority+0x50>)
 8002568:	79fb      	ldrb	r3, [r7, #7]
 800256a:	f003 030f 	and.w	r3, r3, #15
 800256e:	3b04      	subs	r3, #4
 8002570:	0112      	lsls	r2, r2, #4
 8002572:	b2d2      	uxtb	r2, r2
 8002574:	440b      	add	r3, r1
 8002576:	761a      	strb	r2, [r3, #24]
}
 8002578:	bf00      	nop
 800257a:	370c      	adds	r7, #12
 800257c:	46bd      	mov	sp, r7
 800257e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002582:	4770      	bx	lr
 8002584:	e000e100 	.word	0xe000e100
 8002588:	e000ed00 	.word	0xe000ed00

0800258c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800258c:	b480      	push	{r7}
 800258e:	b089      	sub	sp, #36	; 0x24
 8002590:	af00      	add	r7, sp, #0
 8002592:	60f8      	str	r0, [r7, #12]
 8002594:	60b9      	str	r1, [r7, #8]
 8002596:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	f003 0307 	and.w	r3, r3, #7
 800259e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80025a0:	69fb      	ldr	r3, [r7, #28]
 80025a2:	f1c3 0307 	rsb	r3, r3, #7
 80025a6:	2b04      	cmp	r3, #4
 80025a8:	bf28      	it	cs
 80025aa:	2304      	movcs	r3, #4
 80025ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80025ae:	69fb      	ldr	r3, [r7, #28]
 80025b0:	3304      	adds	r3, #4
 80025b2:	2b06      	cmp	r3, #6
 80025b4:	d902      	bls.n	80025bc <NVIC_EncodePriority+0x30>
 80025b6:	69fb      	ldr	r3, [r7, #28]
 80025b8:	3b03      	subs	r3, #3
 80025ba:	e000      	b.n	80025be <NVIC_EncodePriority+0x32>
 80025bc:	2300      	movs	r3, #0
 80025be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025c0:	f04f 32ff 	mov.w	r2, #4294967295
 80025c4:	69bb      	ldr	r3, [r7, #24]
 80025c6:	fa02 f303 	lsl.w	r3, r2, r3
 80025ca:	43da      	mvns	r2, r3
 80025cc:	68bb      	ldr	r3, [r7, #8]
 80025ce:	401a      	ands	r2, r3
 80025d0:	697b      	ldr	r3, [r7, #20]
 80025d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80025d4:	f04f 31ff 	mov.w	r1, #4294967295
 80025d8:	697b      	ldr	r3, [r7, #20]
 80025da:	fa01 f303 	lsl.w	r3, r1, r3
 80025de:	43d9      	mvns	r1, r3
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025e4:	4313      	orrs	r3, r2
         );
}
 80025e6:	4618      	mov	r0, r3
 80025e8:	3724      	adds	r7, #36	; 0x24
 80025ea:	46bd      	mov	sp, r7
 80025ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f0:	4770      	bx	lr
	...

080025f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b082      	sub	sp, #8
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	3b01      	subs	r3, #1
 8002600:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002604:	d301      	bcc.n	800260a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002606:	2301      	movs	r3, #1
 8002608:	e00f      	b.n	800262a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800260a:	4a0a      	ldr	r2, [pc, #40]	; (8002634 <SysTick_Config+0x40>)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	3b01      	subs	r3, #1
 8002610:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002612:	210f      	movs	r1, #15
 8002614:	f04f 30ff 	mov.w	r0, #4294967295
 8002618:	f7ff ff8e 	bl	8002538 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800261c:	4b05      	ldr	r3, [pc, #20]	; (8002634 <SysTick_Config+0x40>)
 800261e:	2200      	movs	r2, #0
 8002620:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002622:	4b04      	ldr	r3, [pc, #16]	; (8002634 <SysTick_Config+0x40>)
 8002624:	2207      	movs	r2, #7
 8002626:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002628:	2300      	movs	r3, #0
}
 800262a:	4618      	mov	r0, r3
 800262c:	3708      	adds	r7, #8
 800262e:	46bd      	mov	sp, r7
 8002630:	bd80      	pop	{r7, pc}
 8002632:	bf00      	nop
 8002634:	e000e010 	.word	0xe000e010

08002638 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b082      	sub	sp, #8
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002640:	6878      	ldr	r0, [r7, #4]
 8002642:	f7ff ff29 	bl	8002498 <__NVIC_SetPriorityGrouping>
}
 8002646:	bf00      	nop
 8002648:	3708      	adds	r7, #8
 800264a:	46bd      	mov	sp, r7
 800264c:	bd80      	pop	{r7, pc}

0800264e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800264e:	b580      	push	{r7, lr}
 8002650:	b086      	sub	sp, #24
 8002652:	af00      	add	r7, sp, #0
 8002654:	4603      	mov	r3, r0
 8002656:	60b9      	str	r1, [r7, #8]
 8002658:	607a      	str	r2, [r7, #4]
 800265a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800265c:	2300      	movs	r3, #0
 800265e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002660:	f7ff ff3e 	bl	80024e0 <__NVIC_GetPriorityGrouping>
 8002664:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002666:	687a      	ldr	r2, [r7, #4]
 8002668:	68b9      	ldr	r1, [r7, #8]
 800266a:	6978      	ldr	r0, [r7, #20]
 800266c:	f7ff ff8e 	bl	800258c <NVIC_EncodePriority>
 8002670:	4602      	mov	r2, r0
 8002672:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002676:	4611      	mov	r1, r2
 8002678:	4618      	mov	r0, r3
 800267a:	f7ff ff5d 	bl	8002538 <__NVIC_SetPriority>
}
 800267e:	bf00      	nop
 8002680:	3718      	adds	r7, #24
 8002682:	46bd      	mov	sp, r7
 8002684:	bd80      	pop	{r7, pc}

08002686 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002686:	b580      	push	{r7, lr}
 8002688:	b082      	sub	sp, #8
 800268a:	af00      	add	r7, sp, #0
 800268c:	4603      	mov	r3, r0
 800268e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002690:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002694:	4618      	mov	r0, r3
 8002696:	f7ff ff31 	bl	80024fc <__NVIC_EnableIRQ>
}
 800269a:	bf00      	nop
 800269c:	3708      	adds	r7, #8
 800269e:	46bd      	mov	sp, r7
 80026a0:	bd80      	pop	{r7, pc}

080026a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80026a2:	b580      	push	{r7, lr}
 80026a4:	b082      	sub	sp, #8
 80026a6:	af00      	add	r7, sp, #0
 80026a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80026aa:	6878      	ldr	r0, [r7, #4]
 80026ac:	f7ff ffa2 	bl	80025f4 <SysTick_Config>
 80026b0:	4603      	mov	r3, r0
}
 80026b2:	4618      	mov	r0, r3
 80026b4:	3708      	adds	r7, #8
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bd80      	pop	{r7, pc}
	...

080026bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80026bc:	b480      	push	{r7}
 80026be:	b089      	sub	sp, #36	; 0x24
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
 80026c4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80026c6:	2300      	movs	r3, #0
 80026c8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80026ca:	2300      	movs	r3, #0
 80026cc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80026ce:	2300      	movs	r3, #0
 80026d0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80026d2:	2300      	movs	r3, #0
 80026d4:	61fb      	str	r3, [r7, #28]
 80026d6:	e16b      	b.n	80029b0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80026d8:	2201      	movs	r2, #1
 80026da:	69fb      	ldr	r3, [r7, #28]
 80026dc:	fa02 f303 	lsl.w	r3, r2, r3
 80026e0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	697a      	ldr	r2, [r7, #20]
 80026e8:	4013      	ands	r3, r2
 80026ea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80026ec:	693a      	ldr	r2, [r7, #16]
 80026ee:	697b      	ldr	r3, [r7, #20]
 80026f0:	429a      	cmp	r2, r3
 80026f2:	f040 815a 	bne.w	80029aa <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	685b      	ldr	r3, [r3, #4]
 80026fa:	2b01      	cmp	r3, #1
 80026fc:	d00b      	beq.n	8002716 <HAL_GPIO_Init+0x5a>
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	685b      	ldr	r3, [r3, #4]
 8002702:	2b02      	cmp	r3, #2
 8002704:	d007      	beq.n	8002716 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800270a:	2b11      	cmp	r3, #17
 800270c:	d003      	beq.n	8002716 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	2b12      	cmp	r3, #18
 8002714:	d130      	bne.n	8002778 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	689b      	ldr	r3, [r3, #8]
 800271a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800271c:	69fb      	ldr	r3, [r7, #28]
 800271e:	005b      	lsls	r3, r3, #1
 8002720:	2203      	movs	r2, #3
 8002722:	fa02 f303 	lsl.w	r3, r2, r3
 8002726:	43db      	mvns	r3, r3
 8002728:	69ba      	ldr	r2, [r7, #24]
 800272a:	4013      	ands	r3, r2
 800272c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	68da      	ldr	r2, [r3, #12]
 8002732:	69fb      	ldr	r3, [r7, #28]
 8002734:	005b      	lsls	r3, r3, #1
 8002736:	fa02 f303 	lsl.w	r3, r2, r3
 800273a:	69ba      	ldr	r2, [r7, #24]
 800273c:	4313      	orrs	r3, r2
 800273e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	69ba      	ldr	r2, [r7, #24]
 8002744:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800274c:	2201      	movs	r2, #1
 800274e:	69fb      	ldr	r3, [r7, #28]
 8002750:	fa02 f303 	lsl.w	r3, r2, r3
 8002754:	43db      	mvns	r3, r3
 8002756:	69ba      	ldr	r2, [r7, #24]
 8002758:	4013      	ands	r3, r2
 800275a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	091b      	lsrs	r3, r3, #4
 8002762:	f003 0201 	and.w	r2, r3, #1
 8002766:	69fb      	ldr	r3, [r7, #28]
 8002768:	fa02 f303 	lsl.w	r3, r2, r3
 800276c:	69ba      	ldr	r2, [r7, #24]
 800276e:	4313      	orrs	r3, r2
 8002770:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	69ba      	ldr	r2, [r7, #24]
 8002776:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	68db      	ldr	r3, [r3, #12]
 800277c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800277e:	69fb      	ldr	r3, [r7, #28]
 8002780:	005b      	lsls	r3, r3, #1
 8002782:	2203      	movs	r2, #3
 8002784:	fa02 f303 	lsl.w	r3, r2, r3
 8002788:	43db      	mvns	r3, r3
 800278a:	69ba      	ldr	r2, [r7, #24]
 800278c:	4013      	ands	r3, r2
 800278e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	689a      	ldr	r2, [r3, #8]
 8002794:	69fb      	ldr	r3, [r7, #28]
 8002796:	005b      	lsls	r3, r3, #1
 8002798:	fa02 f303 	lsl.w	r3, r2, r3
 800279c:	69ba      	ldr	r2, [r7, #24]
 800279e:	4313      	orrs	r3, r2
 80027a0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	69ba      	ldr	r2, [r7, #24]
 80027a6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	685b      	ldr	r3, [r3, #4]
 80027ac:	2b02      	cmp	r3, #2
 80027ae:	d003      	beq.n	80027b8 <HAL_GPIO_Init+0xfc>
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	2b12      	cmp	r3, #18
 80027b6:	d123      	bne.n	8002800 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80027b8:	69fb      	ldr	r3, [r7, #28]
 80027ba:	08da      	lsrs	r2, r3, #3
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	3208      	adds	r2, #8
 80027c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80027c6:	69fb      	ldr	r3, [r7, #28]
 80027c8:	f003 0307 	and.w	r3, r3, #7
 80027cc:	009b      	lsls	r3, r3, #2
 80027ce:	220f      	movs	r2, #15
 80027d0:	fa02 f303 	lsl.w	r3, r2, r3
 80027d4:	43db      	mvns	r3, r3
 80027d6:	69ba      	ldr	r2, [r7, #24]
 80027d8:	4013      	ands	r3, r2
 80027da:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	691a      	ldr	r2, [r3, #16]
 80027e0:	69fb      	ldr	r3, [r7, #28]
 80027e2:	f003 0307 	and.w	r3, r3, #7
 80027e6:	009b      	lsls	r3, r3, #2
 80027e8:	fa02 f303 	lsl.w	r3, r2, r3
 80027ec:	69ba      	ldr	r2, [r7, #24]
 80027ee:	4313      	orrs	r3, r2
 80027f0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80027f2:	69fb      	ldr	r3, [r7, #28]
 80027f4:	08da      	lsrs	r2, r3, #3
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	3208      	adds	r2, #8
 80027fa:	69b9      	ldr	r1, [r7, #24]
 80027fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002806:	69fb      	ldr	r3, [r7, #28]
 8002808:	005b      	lsls	r3, r3, #1
 800280a:	2203      	movs	r2, #3
 800280c:	fa02 f303 	lsl.w	r3, r2, r3
 8002810:	43db      	mvns	r3, r3
 8002812:	69ba      	ldr	r2, [r7, #24]
 8002814:	4013      	ands	r3, r2
 8002816:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	f003 0203 	and.w	r2, r3, #3
 8002820:	69fb      	ldr	r3, [r7, #28]
 8002822:	005b      	lsls	r3, r3, #1
 8002824:	fa02 f303 	lsl.w	r3, r2, r3
 8002828:	69ba      	ldr	r2, [r7, #24]
 800282a:	4313      	orrs	r3, r2
 800282c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	69ba      	ldr	r2, [r7, #24]
 8002832:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800283c:	2b00      	cmp	r3, #0
 800283e:	f000 80b4 	beq.w	80029aa <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002842:	2300      	movs	r3, #0
 8002844:	60fb      	str	r3, [r7, #12]
 8002846:	4b60      	ldr	r3, [pc, #384]	; (80029c8 <HAL_GPIO_Init+0x30c>)
 8002848:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800284a:	4a5f      	ldr	r2, [pc, #380]	; (80029c8 <HAL_GPIO_Init+0x30c>)
 800284c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002850:	6453      	str	r3, [r2, #68]	; 0x44
 8002852:	4b5d      	ldr	r3, [pc, #372]	; (80029c8 <HAL_GPIO_Init+0x30c>)
 8002854:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002856:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800285a:	60fb      	str	r3, [r7, #12]
 800285c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800285e:	4a5b      	ldr	r2, [pc, #364]	; (80029cc <HAL_GPIO_Init+0x310>)
 8002860:	69fb      	ldr	r3, [r7, #28]
 8002862:	089b      	lsrs	r3, r3, #2
 8002864:	3302      	adds	r3, #2
 8002866:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800286a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800286c:	69fb      	ldr	r3, [r7, #28]
 800286e:	f003 0303 	and.w	r3, r3, #3
 8002872:	009b      	lsls	r3, r3, #2
 8002874:	220f      	movs	r2, #15
 8002876:	fa02 f303 	lsl.w	r3, r2, r3
 800287a:	43db      	mvns	r3, r3
 800287c:	69ba      	ldr	r2, [r7, #24]
 800287e:	4013      	ands	r3, r2
 8002880:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	4a52      	ldr	r2, [pc, #328]	; (80029d0 <HAL_GPIO_Init+0x314>)
 8002886:	4293      	cmp	r3, r2
 8002888:	d02b      	beq.n	80028e2 <HAL_GPIO_Init+0x226>
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	4a51      	ldr	r2, [pc, #324]	; (80029d4 <HAL_GPIO_Init+0x318>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d025      	beq.n	80028de <HAL_GPIO_Init+0x222>
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	4a50      	ldr	r2, [pc, #320]	; (80029d8 <HAL_GPIO_Init+0x31c>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d01f      	beq.n	80028da <HAL_GPIO_Init+0x21e>
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	4a4f      	ldr	r2, [pc, #316]	; (80029dc <HAL_GPIO_Init+0x320>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d019      	beq.n	80028d6 <HAL_GPIO_Init+0x21a>
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	4a4e      	ldr	r2, [pc, #312]	; (80029e0 <HAL_GPIO_Init+0x324>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d013      	beq.n	80028d2 <HAL_GPIO_Init+0x216>
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	4a4d      	ldr	r2, [pc, #308]	; (80029e4 <HAL_GPIO_Init+0x328>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d00d      	beq.n	80028ce <HAL_GPIO_Init+0x212>
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	4a4c      	ldr	r2, [pc, #304]	; (80029e8 <HAL_GPIO_Init+0x32c>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d007      	beq.n	80028ca <HAL_GPIO_Init+0x20e>
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	4a4b      	ldr	r2, [pc, #300]	; (80029ec <HAL_GPIO_Init+0x330>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d101      	bne.n	80028c6 <HAL_GPIO_Init+0x20a>
 80028c2:	2307      	movs	r3, #7
 80028c4:	e00e      	b.n	80028e4 <HAL_GPIO_Init+0x228>
 80028c6:	2308      	movs	r3, #8
 80028c8:	e00c      	b.n	80028e4 <HAL_GPIO_Init+0x228>
 80028ca:	2306      	movs	r3, #6
 80028cc:	e00a      	b.n	80028e4 <HAL_GPIO_Init+0x228>
 80028ce:	2305      	movs	r3, #5
 80028d0:	e008      	b.n	80028e4 <HAL_GPIO_Init+0x228>
 80028d2:	2304      	movs	r3, #4
 80028d4:	e006      	b.n	80028e4 <HAL_GPIO_Init+0x228>
 80028d6:	2303      	movs	r3, #3
 80028d8:	e004      	b.n	80028e4 <HAL_GPIO_Init+0x228>
 80028da:	2302      	movs	r3, #2
 80028dc:	e002      	b.n	80028e4 <HAL_GPIO_Init+0x228>
 80028de:	2301      	movs	r3, #1
 80028e0:	e000      	b.n	80028e4 <HAL_GPIO_Init+0x228>
 80028e2:	2300      	movs	r3, #0
 80028e4:	69fa      	ldr	r2, [r7, #28]
 80028e6:	f002 0203 	and.w	r2, r2, #3
 80028ea:	0092      	lsls	r2, r2, #2
 80028ec:	4093      	lsls	r3, r2
 80028ee:	69ba      	ldr	r2, [r7, #24]
 80028f0:	4313      	orrs	r3, r2
 80028f2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80028f4:	4935      	ldr	r1, [pc, #212]	; (80029cc <HAL_GPIO_Init+0x310>)
 80028f6:	69fb      	ldr	r3, [r7, #28]
 80028f8:	089b      	lsrs	r3, r3, #2
 80028fa:	3302      	adds	r3, #2
 80028fc:	69ba      	ldr	r2, [r7, #24]
 80028fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002902:	4b3b      	ldr	r3, [pc, #236]	; (80029f0 <HAL_GPIO_Init+0x334>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002908:	693b      	ldr	r3, [r7, #16]
 800290a:	43db      	mvns	r3, r3
 800290c:	69ba      	ldr	r2, [r7, #24]
 800290e:	4013      	ands	r3, r2
 8002910:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	685b      	ldr	r3, [r3, #4]
 8002916:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800291a:	2b00      	cmp	r3, #0
 800291c:	d003      	beq.n	8002926 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800291e:	69ba      	ldr	r2, [r7, #24]
 8002920:	693b      	ldr	r3, [r7, #16]
 8002922:	4313      	orrs	r3, r2
 8002924:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002926:	4a32      	ldr	r2, [pc, #200]	; (80029f0 <HAL_GPIO_Init+0x334>)
 8002928:	69bb      	ldr	r3, [r7, #24]
 800292a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800292c:	4b30      	ldr	r3, [pc, #192]	; (80029f0 <HAL_GPIO_Init+0x334>)
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002932:	693b      	ldr	r3, [r7, #16]
 8002934:	43db      	mvns	r3, r3
 8002936:	69ba      	ldr	r2, [r7, #24]
 8002938:	4013      	ands	r3, r2
 800293a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002944:	2b00      	cmp	r3, #0
 8002946:	d003      	beq.n	8002950 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002948:	69ba      	ldr	r2, [r7, #24]
 800294a:	693b      	ldr	r3, [r7, #16]
 800294c:	4313      	orrs	r3, r2
 800294e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002950:	4a27      	ldr	r2, [pc, #156]	; (80029f0 <HAL_GPIO_Init+0x334>)
 8002952:	69bb      	ldr	r3, [r7, #24]
 8002954:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002956:	4b26      	ldr	r3, [pc, #152]	; (80029f0 <HAL_GPIO_Init+0x334>)
 8002958:	689b      	ldr	r3, [r3, #8]
 800295a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800295c:	693b      	ldr	r3, [r7, #16]
 800295e:	43db      	mvns	r3, r3
 8002960:	69ba      	ldr	r2, [r7, #24]
 8002962:	4013      	ands	r3, r2
 8002964:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	685b      	ldr	r3, [r3, #4]
 800296a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800296e:	2b00      	cmp	r3, #0
 8002970:	d003      	beq.n	800297a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002972:	69ba      	ldr	r2, [r7, #24]
 8002974:	693b      	ldr	r3, [r7, #16]
 8002976:	4313      	orrs	r3, r2
 8002978:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800297a:	4a1d      	ldr	r2, [pc, #116]	; (80029f0 <HAL_GPIO_Init+0x334>)
 800297c:	69bb      	ldr	r3, [r7, #24]
 800297e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002980:	4b1b      	ldr	r3, [pc, #108]	; (80029f0 <HAL_GPIO_Init+0x334>)
 8002982:	68db      	ldr	r3, [r3, #12]
 8002984:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002986:	693b      	ldr	r3, [r7, #16]
 8002988:	43db      	mvns	r3, r3
 800298a:	69ba      	ldr	r2, [r7, #24]
 800298c:	4013      	ands	r3, r2
 800298e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002998:	2b00      	cmp	r3, #0
 800299a:	d003      	beq.n	80029a4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800299c:	69ba      	ldr	r2, [r7, #24]
 800299e:	693b      	ldr	r3, [r7, #16]
 80029a0:	4313      	orrs	r3, r2
 80029a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80029a4:	4a12      	ldr	r2, [pc, #72]	; (80029f0 <HAL_GPIO_Init+0x334>)
 80029a6:	69bb      	ldr	r3, [r7, #24]
 80029a8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80029aa:	69fb      	ldr	r3, [r7, #28]
 80029ac:	3301      	adds	r3, #1
 80029ae:	61fb      	str	r3, [r7, #28]
 80029b0:	69fb      	ldr	r3, [r7, #28]
 80029b2:	2b0f      	cmp	r3, #15
 80029b4:	f67f ae90 	bls.w	80026d8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80029b8:	bf00      	nop
 80029ba:	bf00      	nop
 80029bc:	3724      	adds	r7, #36	; 0x24
 80029be:	46bd      	mov	sp, r7
 80029c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c4:	4770      	bx	lr
 80029c6:	bf00      	nop
 80029c8:	40023800 	.word	0x40023800
 80029cc:	40013800 	.word	0x40013800
 80029d0:	40020000 	.word	0x40020000
 80029d4:	40020400 	.word	0x40020400
 80029d8:	40020800 	.word	0x40020800
 80029dc:	40020c00 	.word	0x40020c00
 80029e0:	40021000 	.word	0x40021000
 80029e4:	40021400 	.word	0x40021400
 80029e8:	40021800 	.word	0x40021800
 80029ec:	40021c00 	.word	0x40021c00
 80029f0:	40013c00 	.word	0x40013c00

080029f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80029f4:	b480      	push	{r7}
 80029f6:	b083      	sub	sp, #12
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
 80029fc:	460b      	mov	r3, r1
 80029fe:	807b      	strh	r3, [r7, #2]
 8002a00:	4613      	mov	r3, r2
 8002a02:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002a04:	787b      	ldrb	r3, [r7, #1]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d003      	beq.n	8002a12 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002a0a:	887a      	ldrh	r2, [r7, #2]
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002a10:	e003      	b.n	8002a1a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002a12:	887b      	ldrh	r3, [r7, #2]
 8002a14:	041a      	lsls	r2, r3, #16
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	619a      	str	r2, [r3, #24]
}
 8002a1a:	bf00      	nop
 8002a1c:	370c      	adds	r7, #12
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a24:	4770      	bx	lr
	...

08002a28 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b086      	sub	sp, #24
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d101      	bne.n	8002a3a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a36:	2301      	movs	r3, #1
 8002a38:	e25b      	b.n	8002ef2 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f003 0301 	and.w	r3, r3, #1
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d075      	beq.n	8002b32 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002a46:	4ba3      	ldr	r3, [pc, #652]	; (8002cd4 <HAL_RCC_OscConfig+0x2ac>)
 8002a48:	689b      	ldr	r3, [r3, #8]
 8002a4a:	f003 030c 	and.w	r3, r3, #12
 8002a4e:	2b04      	cmp	r3, #4
 8002a50:	d00c      	beq.n	8002a6c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a52:	4ba0      	ldr	r3, [pc, #640]	; (8002cd4 <HAL_RCC_OscConfig+0x2ac>)
 8002a54:	689b      	ldr	r3, [r3, #8]
 8002a56:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002a5a:	2b08      	cmp	r3, #8
 8002a5c:	d112      	bne.n	8002a84 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a5e:	4b9d      	ldr	r3, [pc, #628]	; (8002cd4 <HAL_RCC_OscConfig+0x2ac>)
 8002a60:	685b      	ldr	r3, [r3, #4]
 8002a62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a66:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002a6a:	d10b      	bne.n	8002a84 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a6c:	4b99      	ldr	r3, [pc, #612]	; (8002cd4 <HAL_RCC_OscConfig+0x2ac>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d05b      	beq.n	8002b30 <HAL_RCC_OscConfig+0x108>
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d157      	bne.n	8002b30 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002a80:	2301      	movs	r3, #1
 8002a82:	e236      	b.n	8002ef2 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a8c:	d106      	bne.n	8002a9c <HAL_RCC_OscConfig+0x74>
 8002a8e:	4b91      	ldr	r3, [pc, #580]	; (8002cd4 <HAL_RCC_OscConfig+0x2ac>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4a90      	ldr	r2, [pc, #576]	; (8002cd4 <HAL_RCC_OscConfig+0x2ac>)
 8002a94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a98:	6013      	str	r3, [r2, #0]
 8002a9a:	e01d      	b.n	8002ad8 <HAL_RCC_OscConfig+0xb0>
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002aa4:	d10c      	bne.n	8002ac0 <HAL_RCC_OscConfig+0x98>
 8002aa6:	4b8b      	ldr	r3, [pc, #556]	; (8002cd4 <HAL_RCC_OscConfig+0x2ac>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4a8a      	ldr	r2, [pc, #552]	; (8002cd4 <HAL_RCC_OscConfig+0x2ac>)
 8002aac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ab0:	6013      	str	r3, [r2, #0]
 8002ab2:	4b88      	ldr	r3, [pc, #544]	; (8002cd4 <HAL_RCC_OscConfig+0x2ac>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4a87      	ldr	r2, [pc, #540]	; (8002cd4 <HAL_RCC_OscConfig+0x2ac>)
 8002ab8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002abc:	6013      	str	r3, [r2, #0]
 8002abe:	e00b      	b.n	8002ad8 <HAL_RCC_OscConfig+0xb0>
 8002ac0:	4b84      	ldr	r3, [pc, #528]	; (8002cd4 <HAL_RCC_OscConfig+0x2ac>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4a83      	ldr	r2, [pc, #524]	; (8002cd4 <HAL_RCC_OscConfig+0x2ac>)
 8002ac6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002aca:	6013      	str	r3, [r2, #0]
 8002acc:	4b81      	ldr	r3, [pc, #516]	; (8002cd4 <HAL_RCC_OscConfig+0x2ac>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a80      	ldr	r2, [pc, #512]	; (8002cd4 <HAL_RCC_OscConfig+0x2ac>)
 8002ad2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ad6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d013      	beq.n	8002b08 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ae0:	f7ff f8d6 	bl	8001c90 <HAL_GetTick>
 8002ae4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ae6:	e008      	b.n	8002afa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ae8:	f7ff f8d2 	bl	8001c90 <HAL_GetTick>
 8002aec:	4602      	mov	r2, r0
 8002aee:	693b      	ldr	r3, [r7, #16]
 8002af0:	1ad3      	subs	r3, r2, r3
 8002af2:	2b64      	cmp	r3, #100	; 0x64
 8002af4:	d901      	bls.n	8002afa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002af6:	2303      	movs	r3, #3
 8002af8:	e1fb      	b.n	8002ef2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002afa:	4b76      	ldr	r3, [pc, #472]	; (8002cd4 <HAL_RCC_OscConfig+0x2ac>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d0f0      	beq.n	8002ae8 <HAL_RCC_OscConfig+0xc0>
 8002b06:	e014      	b.n	8002b32 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b08:	f7ff f8c2 	bl	8001c90 <HAL_GetTick>
 8002b0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b0e:	e008      	b.n	8002b22 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b10:	f7ff f8be 	bl	8001c90 <HAL_GetTick>
 8002b14:	4602      	mov	r2, r0
 8002b16:	693b      	ldr	r3, [r7, #16]
 8002b18:	1ad3      	subs	r3, r2, r3
 8002b1a:	2b64      	cmp	r3, #100	; 0x64
 8002b1c:	d901      	bls.n	8002b22 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002b1e:	2303      	movs	r3, #3
 8002b20:	e1e7      	b.n	8002ef2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b22:	4b6c      	ldr	r3, [pc, #432]	; (8002cd4 <HAL_RCC_OscConfig+0x2ac>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d1f0      	bne.n	8002b10 <HAL_RCC_OscConfig+0xe8>
 8002b2e:	e000      	b.n	8002b32 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b30:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f003 0302 	and.w	r3, r3, #2
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d063      	beq.n	8002c06 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002b3e:	4b65      	ldr	r3, [pc, #404]	; (8002cd4 <HAL_RCC_OscConfig+0x2ac>)
 8002b40:	689b      	ldr	r3, [r3, #8]
 8002b42:	f003 030c 	and.w	r3, r3, #12
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d00b      	beq.n	8002b62 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b4a:	4b62      	ldr	r3, [pc, #392]	; (8002cd4 <HAL_RCC_OscConfig+0x2ac>)
 8002b4c:	689b      	ldr	r3, [r3, #8]
 8002b4e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002b52:	2b08      	cmp	r3, #8
 8002b54:	d11c      	bne.n	8002b90 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b56:	4b5f      	ldr	r3, [pc, #380]	; (8002cd4 <HAL_RCC_OscConfig+0x2ac>)
 8002b58:	685b      	ldr	r3, [r3, #4]
 8002b5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d116      	bne.n	8002b90 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b62:	4b5c      	ldr	r3, [pc, #368]	; (8002cd4 <HAL_RCC_OscConfig+0x2ac>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f003 0302 	and.w	r3, r3, #2
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d005      	beq.n	8002b7a <HAL_RCC_OscConfig+0x152>
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	68db      	ldr	r3, [r3, #12]
 8002b72:	2b01      	cmp	r3, #1
 8002b74:	d001      	beq.n	8002b7a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002b76:	2301      	movs	r3, #1
 8002b78:	e1bb      	b.n	8002ef2 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b7a:	4b56      	ldr	r3, [pc, #344]	; (8002cd4 <HAL_RCC_OscConfig+0x2ac>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	691b      	ldr	r3, [r3, #16]
 8002b86:	00db      	lsls	r3, r3, #3
 8002b88:	4952      	ldr	r1, [pc, #328]	; (8002cd4 <HAL_RCC_OscConfig+0x2ac>)
 8002b8a:	4313      	orrs	r3, r2
 8002b8c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b8e:	e03a      	b.n	8002c06 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	68db      	ldr	r3, [r3, #12]
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d020      	beq.n	8002bda <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b98:	4b4f      	ldr	r3, [pc, #316]	; (8002cd8 <HAL_RCC_OscConfig+0x2b0>)
 8002b9a:	2201      	movs	r2, #1
 8002b9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b9e:	f7ff f877 	bl	8001c90 <HAL_GetTick>
 8002ba2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ba4:	e008      	b.n	8002bb8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ba6:	f7ff f873 	bl	8001c90 <HAL_GetTick>
 8002baa:	4602      	mov	r2, r0
 8002bac:	693b      	ldr	r3, [r7, #16]
 8002bae:	1ad3      	subs	r3, r2, r3
 8002bb0:	2b02      	cmp	r3, #2
 8002bb2:	d901      	bls.n	8002bb8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002bb4:	2303      	movs	r3, #3
 8002bb6:	e19c      	b.n	8002ef2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bb8:	4b46      	ldr	r3, [pc, #280]	; (8002cd4 <HAL_RCC_OscConfig+0x2ac>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f003 0302 	and.w	r3, r3, #2
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d0f0      	beq.n	8002ba6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bc4:	4b43      	ldr	r3, [pc, #268]	; (8002cd4 <HAL_RCC_OscConfig+0x2ac>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	691b      	ldr	r3, [r3, #16]
 8002bd0:	00db      	lsls	r3, r3, #3
 8002bd2:	4940      	ldr	r1, [pc, #256]	; (8002cd4 <HAL_RCC_OscConfig+0x2ac>)
 8002bd4:	4313      	orrs	r3, r2
 8002bd6:	600b      	str	r3, [r1, #0]
 8002bd8:	e015      	b.n	8002c06 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002bda:	4b3f      	ldr	r3, [pc, #252]	; (8002cd8 <HAL_RCC_OscConfig+0x2b0>)
 8002bdc:	2200      	movs	r2, #0
 8002bde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002be0:	f7ff f856 	bl	8001c90 <HAL_GetTick>
 8002be4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002be6:	e008      	b.n	8002bfa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002be8:	f7ff f852 	bl	8001c90 <HAL_GetTick>
 8002bec:	4602      	mov	r2, r0
 8002bee:	693b      	ldr	r3, [r7, #16]
 8002bf0:	1ad3      	subs	r3, r2, r3
 8002bf2:	2b02      	cmp	r3, #2
 8002bf4:	d901      	bls.n	8002bfa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002bf6:	2303      	movs	r3, #3
 8002bf8:	e17b      	b.n	8002ef2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bfa:	4b36      	ldr	r3, [pc, #216]	; (8002cd4 <HAL_RCC_OscConfig+0x2ac>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f003 0302 	and.w	r3, r3, #2
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d1f0      	bne.n	8002be8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f003 0308 	and.w	r3, r3, #8
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d030      	beq.n	8002c74 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	695b      	ldr	r3, [r3, #20]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d016      	beq.n	8002c48 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c1a:	4b30      	ldr	r3, [pc, #192]	; (8002cdc <HAL_RCC_OscConfig+0x2b4>)
 8002c1c:	2201      	movs	r2, #1
 8002c1e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c20:	f7ff f836 	bl	8001c90 <HAL_GetTick>
 8002c24:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c26:	e008      	b.n	8002c3a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c28:	f7ff f832 	bl	8001c90 <HAL_GetTick>
 8002c2c:	4602      	mov	r2, r0
 8002c2e:	693b      	ldr	r3, [r7, #16]
 8002c30:	1ad3      	subs	r3, r2, r3
 8002c32:	2b02      	cmp	r3, #2
 8002c34:	d901      	bls.n	8002c3a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002c36:	2303      	movs	r3, #3
 8002c38:	e15b      	b.n	8002ef2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c3a:	4b26      	ldr	r3, [pc, #152]	; (8002cd4 <HAL_RCC_OscConfig+0x2ac>)
 8002c3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c3e:	f003 0302 	and.w	r3, r3, #2
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d0f0      	beq.n	8002c28 <HAL_RCC_OscConfig+0x200>
 8002c46:	e015      	b.n	8002c74 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c48:	4b24      	ldr	r3, [pc, #144]	; (8002cdc <HAL_RCC_OscConfig+0x2b4>)
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c4e:	f7ff f81f 	bl	8001c90 <HAL_GetTick>
 8002c52:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c54:	e008      	b.n	8002c68 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c56:	f7ff f81b 	bl	8001c90 <HAL_GetTick>
 8002c5a:	4602      	mov	r2, r0
 8002c5c:	693b      	ldr	r3, [r7, #16]
 8002c5e:	1ad3      	subs	r3, r2, r3
 8002c60:	2b02      	cmp	r3, #2
 8002c62:	d901      	bls.n	8002c68 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002c64:	2303      	movs	r3, #3
 8002c66:	e144      	b.n	8002ef2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c68:	4b1a      	ldr	r3, [pc, #104]	; (8002cd4 <HAL_RCC_OscConfig+0x2ac>)
 8002c6a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c6c:	f003 0302 	and.w	r3, r3, #2
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d1f0      	bne.n	8002c56 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f003 0304 	and.w	r3, r3, #4
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	f000 80a0 	beq.w	8002dc2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c82:	2300      	movs	r3, #0
 8002c84:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c86:	4b13      	ldr	r3, [pc, #76]	; (8002cd4 <HAL_RCC_OscConfig+0x2ac>)
 8002c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d10f      	bne.n	8002cb2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c92:	2300      	movs	r3, #0
 8002c94:	60bb      	str	r3, [r7, #8]
 8002c96:	4b0f      	ldr	r3, [pc, #60]	; (8002cd4 <HAL_RCC_OscConfig+0x2ac>)
 8002c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c9a:	4a0e      	ldr	r2, [pc, #56]	; (8002cd4 <HAL_RCC_OscConfig+0x2ac>)
 8002c9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ca0:	6413      	str	r3, [r2, #64]	; 0x40
 8002ca2:	4b0c      	ldr	r3, [pc, #48]	; (8002cd4 <HAL_RCC_OscConfig+0x2ac>)
 8002ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ca6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002caa:	60bb      	str	r3, [r7, #8]
 8002cac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002cae:	2301      	movs	r3, #1
 8002cb0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cb2:	4b0b      	ldr	r3, [pc, #44]	; (8002ce0 <HAL_RCC_OscConfig+0x2b8>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d121      	bne.n	8002d02 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002cbe:	4b08      	ldr	r3, [pc, #32]	; (8002ce0 <HAL_RCC_OscConfig+0x2b8>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	4a07      	ldr	r2, [pc, #28]	; (8002ce0 <HAL_RCC_OscConfig+0x2b8>)
 8002cc4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cc8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002cca:	f7fe ffe1 	bl	8001c90 <HAL_GetTick>
 8002cce:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cd0:	e011      	b.n	8002cf6 <HAL_RCC_OscConfig+0x2ce>
 8002cd2:	bf00      	nop
 8002cd4:	40023800 	.word	0x40023800
 8002cd8:	42470000 	.word	0x42470000
 8002cdc:	42470e80 	.word	0x42470e80
 8002ce0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ce4:	f7fe ffd4 	bl	8001c90 <HAL_GetTick>
 8002ce8:	4602      	mov	r2, r0
 8002cea:	693b      	ldr	r3, [r7, #16]
 8002cec:	1ad3      	subs	r3, r2, r3
 8002cee:	2b02      	cmp	r3, #2
 8002cf0:	d901      	bls.n	8002cf6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002cf2:	2303      	movs	r3, #3
 8002cf4:	e0fd      	b.n	8002ef2 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cf6:	4b81      	ldr	r3, [pc, #516]	; (8002efc <HAL_RCC_OscConfig+0x4d4>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d0f0      	beq.n	8002ce4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	689b      	ldr	r3, [r3, #8]
 8002d06:	2b01      	cmp	r3, #1
 8002d08:	d106      	bne.n	8002d18 <HAL_RCC_OscConfig+0x2f0>
 8002d0a:	4b7d      	ldr	r3, [pc, #500]	; (8002f00 <HAL_RCC_OscConfig+0x4d8>)
 8002d0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d0e:	4a7c      	ldr	r2, [pc, #496]	; (8002f00 <HAL_RCC_OscConfig+0x4d8>)
 8002d10:	f043 0301 	orr.w	r3, r3, #1
 8002d14:	6713      	str	r3, [r2, #112]	; 0x70
 8002d16:	e01c      	b.n	8002d52 <HAL_RCC_OscConfig+0x32a>
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	689b      	ldr	r3, [r3, #8]
 8002d1c:	2b05      	cmp	r3, #5
 8002d1e:	d10c      	bne.n	8002d3a <HAL_RCC_OscConfig+0x312>
 8002d20:	4b77      	ldr	r3, [pc, #476]	; (8002f00 <HAL_RCC_OscConfig+0x4d8>)
 8002d22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d24:	4a76      	ldr	r2, [pc, #472]	; (8002f00 <HAL_RCC_OscConfig+0x4d8>)
 8002d26:	f043 0304 	orr.w	r3, r3, #4
 8002d2a:	6713      	str	r3, [r2, #112]	; 0x70
 8002d2c:	4b74      	ldr	r3, [pc, #464]	; (8002f00 <HAL_RCC_OscConfig+0x4d8>)
 8002d2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d30:	4a73      	ldr	r2, [pc, #460]	; (8002f00 <HAL_RCC_OscConfig+0x4d8>)
 8002d32:	f043 0301 	orr.w	r3, r3, #1
 8002d36:	6713      	str	r3, [r2, #112]	; 0x70
 8002d38:	e00b      	b.n	8002d52 <HAL_RCC_OscConfig+0x32a>
 8002d3a:	4b71      	ldr	r3, [pc, #452]	; (8002f00 <HAL_RCC_OscConfig+0x4d8>)
 8002d3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d3e:	4a70      	ldr	r2, [pc, #448]	; (8002f00 <HAL_RCC_OscConfig+0x4d8>)
 8002d40:	f023 0301 	bic.w	r3, r3, #1
 8002d44:	6713      	str	r3, [r2, #112]	; 0x70
 8002d46:	4b6e      	ldr	r3, [pc, #440]	; (8002f00 <HAL_RCC_OscConfig+0x4d8>)
 8002d48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d4a:	4a6d      	ldr	r2, [pc, #436]	; (8002f00 <HAL_RCC_OscConfig+0x4d8>)
 8002d4c:	f023 0304 	bic.w	r3, r3, #4
 8002d50:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	689b      	ldr	r3, [r3, #8]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d015      	beq.n	8002d86 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d5a:	f7fe ff99 	bl	8001c90 <HAL_GetTick>
 8002d5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d60:	e00a      	b.n	8002d78 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d62:	f7fe ff95 	bl	8001c90 <HAL_GetTick>
 8002d66:	4602      	mov	r2, r0
 8002d68:	693b      	ldr	r3, [r7, #16]
 8002d6a:	1ad3      	subs	r3, r2, r3
 8002d6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d70:	4293      	cmp	r3, r2
 8002d72:	d901      	bls.n	8002d78 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002d74:	2303      	movs	r3, #3
 8002d76:	e0bc      	b.n	8002ef2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d78:	4b61      	ldr	r3, [pc, #388]	; (8002f00 <HAL_RCC_OscConfig+0x4d8>)
 8002d7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d7c:	f003 0302 	and.w	r3, r3, #2
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d0ee      	beq.n	8002d62 <HAL_RCC_OscConfig+0x33a>
 8002d84:	e014      	b.n	8002db0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d86:	f7fe ff83 	bl	8001c90 <HAL_GetTick>
 8002d8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d8c:	e00a      	b.n	8002da4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d8e:	f7fe ff7f 	bl	8001c90 <HAL_GetTick>
 8002d92:	4602      	mov	r2, r0
 8002d94:	693b      	ldr	r3, [r7, #16]
 8002d96:	1ad3      	subs	r3, r2, r3
 8002d98:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d901      	bls.n	8002da4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002da0:	2303      	movs	r3, #3
 8002da2:	e0a6      	b.n	8002ef2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002da4:	4b56      	ldr	r3, [pc, #344]	; (8002f00 <HAL_RCC_OscConfig+0x4d8>)
 8002da6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002da8:	f003 0302 	and.w	r3, r3, #2
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d1ee      	bne.n	8002d8e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002db0:	7dfb      	ldrb	r3, [r7, #23]
 8002db2:	2b01      	cmp	r3, #1
 8002db4:	d105      	bne.n	8002dc2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002db6:	4b52      	ldr	r3, [pc, #328]	; (8002f00 <HAL_RCC_OscConfig+0x4d8>)
 8002db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dba:	4a51      	ldr	r2, [pc, #324]	; (8002f00 <HAL_RCC_OscConfig+0x4d8>)
 8002dbc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002dc0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	699b      	ldr	r3, [r3, #24]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	f000 8092 	beq.w	8002ef0 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002dcc:	4b4c      	ldr	r3, [pc, #304]	; (8002f00 <HAL_RCC_OscConfig+0x4d8>)
 8002dce:	689b      	ldr	r3, [r3, #8]
 8002dd0:	f003 030c 	and.w	r3, r3, #12
 8002dd4:	2b08      	cmp	r3, #8
 8002dd6:	d05c      	beq.n	8002e92 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	699b      	ldr	r3, [r3, #24]
 8002ddc:	2b02      	cmp	r3, #2
 8002dde:	d141      	bne.n	8002e64 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002de0:	4b48      	ldr	r3, [pc, #288]	; (8002f04 <HAL_RCC_OscConfig+0x4dc>)
 8002de2:	2200      	movs	r2, #0
 8002de4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002de6:	f7fe ff53 	bl	8001c90 <HAL_GetTick>
 8002dea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dec:	e008      	b.n	8002e00 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002dee:	f7fe ff4f 	bl	8001c90 <HAL_GetTick>
 8002df2:	4602      	mov	r2, r0
 8002df4:	693b      	ldr	r3, [r7, #16]
 8002df6:	1ad3      	subs	r3, r2, r3
 8002df8:	2b02      	cmp	r3, #2
 8002dfa:	d901      	bls.n	8002e00 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002dfc:	2303      	movs	r3, #3
 8002dfe:	e078      	b.n	8002ef2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e00:	4b3f      	ldr	r3, [pc, #252]	; (8002f00 <HAL_RCC_OscConfig+0x4d8>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d1f0      	bne.n	8002dee <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	69da      	ldr	r2, [r3, #28]
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6a1b      	ldr	r3, [r3, #32]
 8002e14:	431a      	orrs	r2, r3
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e1a:	019b      	lsls	r3, r3, #6
 8002e1c:	431a      	orrs	r2, r3
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e22:	085b      	lsrs	r3, r3, #1
 8002e24:	3b01      	subs	r3, #1
 8002e26:	041b      	lsls	r3, r3, #16
 8002e28:	431a      	orrs	r2, r3
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e2e:	061b      	lsls	r3, r3, #24
 8002e30:	4933      	ldr	r1, [pc, #204]	; (8002f00 <HAL_RCC_OscConfig+0x4d8>)
 8002e32:	4313      	orrs	r3, r2
 8002e34:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e36:	4b33      	ldr	r3, [pc, #204]	; (8002f04 <HAL_RCC_OscConfig+0x4dc>)
 8002e38:	2201      	movs	r2, #1
 8002e3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e3c:	f7fe ff28 	bl	8001c90 <HAL_GetTick>
 8002e40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e42:	e008      	b.n	8002e56 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e44:	f7fe ff24 	bl	8001c90 <HAL_GetTick>
 8002e48:	4602      	mov	r2, r0
 8002e4a:	693b      	ldr	r3, [r7, #16]
 8002e4c:	1ad3      	subs	r3, r2, r3
 8002e4e:	2b02      	cmp	r3, #2
 8002e50:	d901      	bls.n	8002e56 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002e52:	2303      	movs	r3, #3
 8002e54:	e04d      	b.n	8002ef2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e56:	4b2a      	ldr	r3, [pc, #168]	; (8002f00 <HAL_RCC_OscConfig+0x4d8>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d0f0      	beq.n	8002e44 <HAL_RCC_OscConfig+0x41c>
 8002e62:	e045      	b.n	8002ef0 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e64:	4b27      	ldr	r3, [pc, #156]	; (8002f04 <HAL_RCC_OscConfig+0x4dc>)
 8002e66:	2200      	movs	r2, #0
 8002e68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e6a:	f7fe ff11 	bl	8001c90 <HAL_GetTick>
 8002e6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e70:	e008      	b.n	8002e84 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e72:	f7fe ff0d 	bl	8001c90 <HAL_GetTick>
 8002e76:	4602      	mov	r2, r0
 8002e78:	693b      	ldr	r3, [r7, #16]
 8002e7a:	1ad3      	subs	r3, r2, r3
 8002e7c:	2b02      	cmp	r3, #2
 8002e7e:	d901      	bls.n	8002e84 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002e80:	2303      	movs	r3, #3
 8002e82:	e036      	b.n	8002ef2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e84:	4b1e      	ldr	r3, [pc, #120]	; (8002f00 <HAL_RCC_OscConfig+0x4d8>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d1f0      	bne.n	8002e72 <HAL_RCC_OscConfig+0x44a>
 8002e90:	e02e      	b.n	8002ef0 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	699b      	ldr	r3, [r3, #24]
 8002e96:	2b01      	cmp	r3, #1
 8002e98:	d101      	bne.n	8002e9e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	e029      	b.n	8002ef2 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002e9e:	4b18      	ldr	r3, [pc, #96]	; (8002f00 <HAL_RCC_OscConfig+0x4d8>)
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	69db      	ldr	r3, [r3, #28]
 8002eae:	429a      	cmp	r2, r3
 8002eb0:	d11c      	bne.n	8002eec <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ebc:	429a      	cmp	r2, r3
 8002ebe:	d115      	bne.n	8002eec <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002ec0:	68fa      	ldr	r2, [r7, #12]
 8002ec2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002ec6:	4013      	ands	r3, r2
 8002ec8:	687a      	ldr	r2, [r7, #4]
 8002eca:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d10d      	bne.n	8002eec <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002eda:	429a      	cmp	r2, r3
 8002edc:	d106      	bne.n	8002eec <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002ee8:	429a      	cmp	r2, r3
 8002eea:	d001      	beq.n	8002ef0 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8002eec:	2301      	movs	r3, #1
 8002eee:	e000      	b.n	8002ef2 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8002ef0:	2300      	movs	r3, #0
}
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	3718      	adds	r7, #24
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bd80      	pop	{r7, pc}
 8002efa:	bf00      	nop
 8002efc:	40007000 	.word	0x40007000
 8002f00:	40023800 	.word	0x40023800
 8002f04:	42470060 	.word	0x42470060

08002f08 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b084      	sub	sp, #16
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
 8002f10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d101      	bne.n	8002f1c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f18:	2301      	movs	r3, #1
 8002f1a:	e0cc      	b.n	80030b6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002f1c:	4b68      	ldr	r3, [pc, #416]	; (80030c0 <HAL_RCC_ClockConfig+0x1b8>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f003 030f 	and.w	r3, r3, #15
 8002f24:	683a      	ldr	r2, [r7, #0]
 8002f26:	429a      	cmp	r2, r3
 8002f28:	d90c      	bls.n	8002f44 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f2a:	4b65      	ldr	r3, [pc, #404]	; (80030c0 <HAL_RCC_ClockConfig+0x1b8>)
 8002f2c:	683a      	ldr	r2, [r7, #0]
 8002f2e:	b2d2      	uxtb	r2, r2
 8002f30:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f32:	4b63      	ldr	r3, [pc, #396]	; (80030c0 <HAL_RCC_ClockConfig+0x1b8>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f003 030f 	and.w	r3, r3, #15
 8002f3a:	683a      	ldr	r2, [r7, #0]
 8002f3c:	429a      	cmp	r2, r3
 8002f3e:	d001      	beq.n	8002f44 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002f40:	2301      	movs	r3, #1
 8002f42:	e0b8      	b.n	80030b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f003 0302 	and.w	r3, r3, #2
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d020      	beq.n	8002f92 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f003 0304 	and.w	r3, r3, #4
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d005      	beq.n	8002f68 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f5c:	4b59      	ldr	r3, [pc, #356]	; (80030c4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f5e:	689b      	ldr	r3, [r3, #8]
 8002f60:	4a58      	ldr	r2, [pc, #352]	; (80030c4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f62:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002f66:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f003 0308 	and.w	r3, r3, #8
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d005      	beq.n	8002f80 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002f74:	4b53      	ldr	r3, [pc, #332]	; (80030c4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f76:	689b      	ldr	r3, [r3, #8]
 8002f78:	4a52      	ldr	r2, [pc, #328]	; (80030c4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f7a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002f7e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f80:	4b50      	ldr	r3, [pc, #320]	; (80030c4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f82:	689b      	ldr	r3, [r3, #8]
 8002f84:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	689b      	ldr	r3, [r3, #8]
 8002f8c:	494d      	ldr	r1, [pc, #308]	; (80030c4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f8e:	4313      	orrs	r3, r2
 8002f90:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f003 0301 	and.w	r3, r3, #1
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d044      	beq.n	8003028 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	685b      	ldr	r3, [r3, #4]
 8002fa2:	2b01      	cmp	r3, #1
 8002fa4:	d107      	bne.n	8002fb6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fa6:	4b47      	ldr	r3, [pc, #284]	; (80030c4 <HAL_RCC_ClockConfig+0x1bc>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d119      	bne.n	8002fe6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	e07f      	b.n	80030b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	2b02      	cmp	r3, #2
 8002fbc:	d003      	beq.n	8002fc6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002fc2:	2b03      	cmp	r3, #3
 8002fc4:	d107      	bne.n	8002fd6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fc6:	4b3f      	ldr	r3, [pc, #252]	; (80030c4 <HAL_RCC_ClockConfig+0x1bc>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d109      	bne.n	8002fe6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	e06f      	b.n	80030b6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fd6:	4b3b      	ldr	r3, [pc, #236]	; (80030c4 <HAL_RCC_ClockConfig+0x1bc>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f003 0302 	and.w	r3, r3, #2
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d101      	bne.n	8002fe6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	e067      	b.n	80030b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002fe6:	4b37      	ldr	r3, [pc, #220]	; (80030c4 <HAL_RCC_ClockConfig+0x1bc>)
 8002fe8:	689b      	ldr	r3, [r3, #8]
 8002fea:	f023 0203 	bic.w	r2, r3, #3
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	4934      	ldr	r1, [pc, #208]	; (80030c4 <HAL_RCC_ClockConfig+0x1bc>)
 8002ff4:	4313      	orrs	r3, r2
 8002ff6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ff8:	f7fe fe4a 	bl	8001c90 <HAL_GetTick>
 8002ffc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ffe:	e00a      	b.n	8003016 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003000:	f7fe fe46 	bl	8001c90 <HAL_GetTick>
 8003004:	4602      	mov	r2, r0
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	1ad3      	subs	r3, r2, r3
 800300a:	f241 3288 	movw	r2, #5000	; 0x1388
 800300e:	4293      	cmp	r3, r2
 8003010:	d901      	bls.n	8003016 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003012:	2303      	movs	r3, #3
 8003014:	e04f      	b.n	80030b6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003016:	4b2b      	ldr	r3, [pc, #172]	; (80030c4 <HAL_RCC_ClockConfig+0x1bc>)
 8003018:	689b      	ldr	r3, [r3, #8]
 800301a:	f003 020c 	and.w	r2, r3, #12
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	685b      	ldr	r3, [r3, #4]
 8003022:	009b      	lsls	r3, r3, #2
 8003024:	429a      	cmp	r2, r3
 8003026:	d1eb      	bne.n	8003000 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003028:	4b25      	ldr	r3, [pc, #148]	; (80030c0 <HAL_RCC_ClockConfig+0x1b8>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f003 030f 	and.w	r3, r3, #15
 8003030:	683a      	ldr	r2, [r7, #0]
 8003032:	429a      	cmp	r2, r3
 8003034:	d20c      	bcs.n	8003050 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003036:	4b22      	ldr	r3, [pc, #136]	; (80030c0 <HAL_RCC_ClockConfig+0x1b8>)
 8003038:	683a      	ldr	r2, [r7, #0]
 800303a:	b2d2      	uxtb	r2, r2
 800303c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800303e:	4b20      	ldr	r3, [pc, #128]	; (80030c0 <HAL_RCC_ClockConfig+0x1b8>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f003 030f 	and.w	r3, r3, #15
 8003046:	683a      	ldr	r2, [r7, #0]
 8003048:	429a      	cmp	r2, r3
 800304a:	d001      	beq.n	8003050 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800304c:	2301      	movs	r3, #1
 800304e:	e032      	b.n	80030b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f003 0304 	and.w	r3, r3, #4
 8003058:	2b00      	cmp	r3, #0
 800305a:	d008      	beq.n	800306e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800305c:	4b19      	ldr	r3, [pc, #100]	; (80030c4 <HAL_RCC_ClockConfig+0x1bc>)
 800305e:	689b      	ldr	r3, [r3, #8]
 8003060:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	68db      	ldr	r3, [r3, #12]
 8003068:	4916      	ldr	r1, [pc, #88]	; (80030c4 <HAL_RCC_ClockConfig+0x1bc>)
 800306a:	4313      	orrs	r3, r2
 800306c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f003 0308 	and.w	r3, r3, #8
 8003076:	2b00      	cmp	r3, #0
 8003078:	d009      	beq.n	800308e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800307a:	4b12      	ldr	r3, [pc, #72]	; (80030c4 <HAL_RCC_ClockConfig+0x1bc>)
 800307c:	689b      	ldr	r3, [r3, #8]
 800307e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	691b      	ldr	r3, [r3, #16]
 8003086:	00db      	lsls	r3, r3, #3
 8003088:	490e      	ldr	r1, [pc, #56]	; (80030c4 <HAL_RCC_ClockConfig+0x1bc>)
 800308a:	4313      	orrs	r3, r2
 800308c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800308e:	f000 f821 	bl	80030d4 <HAL_RCC_GetSysClockFreq>
 8003092:	4602      	mov	r2, r0
 8003094:	4b0b      	ldr	r3, [pc, #44]	; (80030c4 <HAL_RCC_ClockConfig+0x1bc>)
 8003096:	689b      	ldr	r3, [r3, #8]
 8003098:	091b      	lsrs	r3, r3, #4
 800309a:	f003 030f 	and.w	r3, r3, #15
 800309e:	490a      	ldr	r1, [pc, #40]	; (80030c8 <HAL_RCC_ClockConfig+0x1c0>)
 80030a0:	5ccb      	ldrb	r3, [r1, r3]
 80030a2:	fa22 f303 	lsr.w	r3, r2, r3
 80030a6:	4a09      	ldr	r2, [pc, #36]	; (80030cc <HAL_RCC_ClockConfig+0x1c4>)
 80030a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80030aa:	4b09      	ldr	r3, [pc, #36]	; (80030d0 <HAL_RCC_ClockConfig+0x1c8>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	4618      	mov	r0, r3
 80030b0:	f7fe fdaa 	bl	8001c08 <HAL_InitTick>

  return HAL_OK;
 80030b4:	2300      	movs	r3, #0
}
 80030b6:	4618      	mov	r0, r3
 80030b8:	3710      	adds	r7, #16
 80030ba:	46bd      	mov	sp, r7
 80030bc:	bd80      	pop	{r7, pc}
 80030be:	bf00      	nop
 80030c0:	40023c00 	.word	0x40023c00
 80030c4:	40023800 	.word	0x40023800
 80030c8:	08007248 	.word	0x08007248
 80030cc:	20000000 	.word	0x20000000
 80030d0:	20000004 	.word	0x20000004

080030d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80030d4:	b5b0      	push	{r4, r5, r7, lr}
 80030d6:	b084      	sub	sp, #16
 80030d8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80030da:	2100      	movs	r1, #0
 80030dc:	6079      	str	r1, [r7, #4]
 80030de:	2100      	movs	r1, #0
 80030e0:	60f9      	str	r1, [r7, #12]
 80030e2:	2100      	movs	r1, #0
 80030e4:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80030e6:	2100      	movs	r1, #0
 80030e8:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80030ea:	4952      	ldr	r1, [pc, #328]	; (8003234 <HAL_RCC_GetSysClockFreq+0x160>)
 80030ec:	6889      	ldr	r1, [r1, #8]
 80030ee:	f001 010c 	and.w	r1, r1, #12
 80030f2:	2908      	cmp	r1, #8
 80030f4:	d00d      	beq.n	8003112 <HAL_RCC_GetSysClockFreq+0x3e>
 80030f6:	2908      	cmp	r1, #8
 80030f8:	f200 8094 	bhi.w	8003224 <HAL_RCC_GetSysClockFreq+0x150>
 80030fc:	2900      	cmp	r1, #0
 80030fe:	d002      	beq.n	8003106 <HAL_RCC_GetSysClockFreq+0x32>
 8003100:	2904      	cmp	r1, #4
 8003102:	d003      	beq.n	800310c <HAL_RCC_GetSysClockFreq+0x38>
 8003104:	e08e      	b.n	8003224 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003106:	4b4c      	ldr	r3, [pc, #304]	; (8003238 <HAL_RCC_GetSysClockFreq+0x164>)
 8003108:	60bb      	str	r3, [r7, #8]
       break;
 800310a:	e08e      	b.n	800322a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800310c:	4b4b      	ldr	r3, [pc, #300]	; (800323c <HAL_RCC_GetSysClockFreq+0x168>)
 800310e:	60bb      	str	r3, [r7, #8]
      break;
 8003110:	e08b      	b.n	800322a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003112:	4948      	ldr	r1, [pc, #288]	; (8003234 <HAL_RCC_GetSysClockFreq+0x160>)
 8003114:	6849      	ldr	r1, [r1, #4]
 8003116:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800311a:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800311c:	4945      	ldr	r1, [pc, #276]	; (8003234 <HAL_RCC_GetSysClockFreq+0x160>)
 800311e:	6849      	ldr	r1, [r1, #4]
 8003120:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8003124:	2900      	cmp	r1, #0
 8003126:	d024      	beq.n	8003172 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003128:	4942      	ldr	r1, [pc, #264]	; (8003234 <HAL_RCC_GetSysClockFreq+0x160>)
 800312a:	6849      	ldr	r1, [r1, #4]
 800312c:	0989      	lsrs	r1, r1, #6
 800312e:	4608      	mov	r0, r1
 8003130:	f04f 0100 	mov.w	r1, #0
 8003134:	f240 14ff 	movw	r4, #511	; 0x1ff
 8003138:	f04f 0500 	mov.w	r5, #0
 800313c:	ea00 0204 	and.w	r2, r0, r4
 8003140:	ea01 0305 	and.w	r3, r1, r5
 8003144:	493d      	ldr	r1, [pc, #244]	; (800323c <HAL_RCC_GetSysClockFreq+0x168>)
 8003146:	fb01 f003 	mul.w	r0, r1, r3
 800314a:	2100      	movs	r1, #0
 800314c:	fb01 f102 	mul.w	r1, r1, r2
 8003150:	1844      	adds	r4, r0, r1
 8003152:	493a      	ldr	r1, [pc, #232]	; (800323c <HAL_RCC_GetSysClockFreq+0x168>)
 8003154:	fba2 0101 	umull	r0, r1, r2, r1
 8003158:	1863      	adds	r3, r4, r1
 800315a:	4619      	mov	r1, r3
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	461a      	mov	r2, r3
 8003160:	f04f 0300 	mov.w	r3, #0
 8003164:	f7fd fd20 	bl	8000ba8 <__aeabi_uldivmod>
 8003168:	4602      	mov	r2, r0
 800316a:	460b      	mov	r3, r1
 800316c:	4613      	mov	r3, r2
 800316e:	60fb      	str	r3, [r7, #12]
 8003170:	e04a      	b.n	8003208 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003172:	4b30      	ldr	r3, [pc, #192]	; (8003234 <HAL_RCC_GetSysClockFreq+0x160>)
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	099b      	lsrs	r3, r3, #6
 8003178:	461a      	mov	r2, r3
 800317a:	f04f 0300 	mov.w	r3, #0
 800317e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003182:	f04f 0100 	mov.w	r1, #0
 8003186:	ea02 0400 	and.w	r4, r2, r0
 800318a:	ea03 0501 	and.w	r5, r3, r1
 800318e:	4620      	mov	r0, r4
 8003190:	4629      	mov	r1, r5
 8003192:	f04f 0200 	mov.w	r2, #0
 8003196:	f04f 0300 	mov.w	r3, #0
 800319a:	014b      	lsls	r3, r1, #5
 800319c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80031a0:	0142      	lsls	r2, r0, #5
 80031a2:	4610      	mov	r0, r2
 80031a4:	4619      	mov	r1, r3
 80031a6:	1b00      	subs	r0, r0, r4
 80031a8:	eb61 0105 	sbc.w	r1, r1, r5
 80031ac:	f04f 0200 	mov.w	r2, #0
 80031b0:	f04f 0300 	mov.w	r3, #0
 80031b4:	018b      	lsls	r3, r1, #6
 80031b6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80031ba:	0182      	lsls	r2, r0, #6
 80031bc:	1a12      	subs	r2, r2, r0
 80031be:	eb63 0301 	sbc.w	r3, r3, r1
 80031c2:	f04f 0000 	mov.w	r0, #0
 80031c6:	f04f 0100 	mov.w	r1, #0
 80031ca:	00d9      	lsls	r1, r3, #3
 80031cc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80031d0:	00d0      	lsls	r0, r2, #3
 80031d2:	4602      	mov	r2, r0
 80031d4:	460b      	mov	r3, r1
 80031d6:	1912      	adds	r2, r2, r4
 80031d8:	eb45 0303 	adc.w	r3, r5, r3
 80031dc:	f04f 0000 	mov.w	r0, #0
 80031e0:	f04f 0100 	mov.w	r1, #0
 80031e4:	0299      	lsls	r1, r3, #10
 80031e6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80031ea:	0290      	lsls	r0, r2, #10
 80031ec:	4602      	mov	r2, r0
 80031ee:	460b      	mov	r3, r1
 80031f0:	4610      	mov	r0, r2
 80031f2:	4619      	mov	r1, r3
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	461a      	mov	r2, r3
 80031f8:	f04f 0300 	mov.w	r3, #0
 80031fc:	f7fd fcd4 	bl	8000ba8 <__aeabi_uldivmod>
 8003200:	4602      	mov	r2, r0
 8003202:	460b      	mov	r3, r1
 8003204:	4613      	mov	r3, r2
 8003206:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003208:	4b0a      	ldr	r3, [pc, #40]	; (8003234 <HAL_RCC_GetSysClockFreq+0x160>)
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	0c1b      	lsrs	r3, r3, #16
 800320e:	f003 0303 	and.w	r3, r3, #3
 8003212:	3301      	adds	r3, #1
 8003214:	005b      	lsls	r3, r3, #1
 8003216:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003218:	68fa      	ldr	r2, [r7, #12]
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003220:	60bb      	str	r3, [r7, #8]
      break;
 8003222:	e002      	b.n	800322a <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003224:	4b04      	ldr	r3, [pc, #16]	; (8003238 <HAL_RCC_GetSysClockFreq+0x164>)
 8003226:	60bb      	str	r3, [r7, #8]
      break;
 8003228:	bf00      	nop
    }
  }
  return sysclockfreq;
 800322a:	68bb      	ldr	r3, [r7, #8]
}
 800322c:	4618      	mov	r0, r3
 800322e:	3710      	adds	r7, #16
 8003230:	46bd      	mov	sp, r7
 8003232:	bdb0      	pop	{r4, r5, r7, pc}
 8003234:	40023800 	.word	0x40023800
 8003238:	00f42400 	.word	0x00f42400
 800323c:	017d7840 	.word	0x017d7840

08003240 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003240:	b480      	push	{r7}
 8003242:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003244:	4b03      	ldr	r3, [pc, #12]	; (8003254 <HAL_RCC_GetHCLKFreq+0x14>)
 8003246:	681b      	ldr	r3, [r3, #0]
}
 8003248:	4618      	mov	r0, r3
 800324a:	46bd      	mov	sp, r7
 800324c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003250:	4770      	bx	lr
 8003252:	bf00      	nop
 8003254:	20000000 	.word	0x20000000

08003258 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800325c:	f7ff fff0 	bl	8003240 <HAL_RCC_GetHCLKFreq>
 8003260:	4602      	mov	r2, r0
 8003262:	4b05      	ldr	r3, [pc, #20]	; (8003278 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003264:	689b      	ldr	r3, [r3, #8]
 8003266:	0a9b      	lsrs	r3, r3, #10
 8003268:	f003 0307 	and.w	r3, r3, #7
 800326c:	4903      	ldr	r1, [pc, #12]	; (800327c <HAL_RCC_GetPCLK1Freq+0x24>)
 800326e:	5ccb      	ldrb	r3, [r1, r3]
 8003270:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003274:	4618      	mov	r0, r3
 8003276:	bd80      	pop	{r7, pc}
 8003278:	40023800 	.word	0x40023800
 800327c:	08007258 	.word	0x08007258

08003280 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003284:	f7ff ffdc 	bl	8003240 <HAL_RCC_GetHCLKFreq>
 8003288:	4602      	mov	r2, r0
 800328a:	4b05      	ldr	r3, [pc, #20]	; (80032a0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800328c:	689b      	ldr	r3, [r3, #8]
 800328e:	0b5b      	lsrs	r3, r3, #13
 8003290:	f003 0307 	and.w	r3, r3, #7
 8003294:	4903      	ldr	r1, [pc, #12]	; (80032a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003296:	5ccb      	ldrb	r3, [r1, r3]
 8003298:	fa22 f303 	lsr.w	r3, r2, r3
}
 800329c:	4618      	mov	r0, r3
 800329e:	bd80      	pop	{r7, pc}
 80032a0:	40023800 	.word	0x40023800
 80032a4:	08007258 	.word	0x08007258

080032a8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b082      	sub	sp, #8
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d101      	bne.n	80032ba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80032b6:	2301      	movs	r3, #1
 80032b8:	e01d      	b.n	80032f6 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032c0:	b2db      	uxtb	r3, r3
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d106      	bne.n	80032d4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2200      	movs	r2, #0
 80032ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80032ce:	6878      	ldr	r0, [r7, #4]
 80032d0:	f7fe fab6 	bl	8001840 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2202      	movs	r2, #2
 80032d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681a      	ldr	r2, [r3, #0]
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	3304      	adds	r3, #4
 80032e4:	4619      	mov	r1, r3
 80032e6:	4610      	mov	r0, r2
 80032e8:	f000 fa22 	bl	8003730 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2201      	movs	r2, #1
 80032f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80032f4:	2300      	movs	r3, #0
}
 80032f6:	4618      	mov	r0, r3
 80032f8:	3708      	adds	r7, #8
 80032fa:	46bd      	mov	sp, r7
 80032fc:	bd80      	pop	{r7, pc}

080032fe <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80032fe:	b480      	push	{r7}
 8003300:	b085      	sub	sp, #20
 8003302:	af00      	add	r7, sp, #0
 8003304:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	68da      	ldr	r2, [r3, #12]
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f042 0201 	orr.w	r2, r2, #1
 8003314:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	689b      	ldr	r3, [r3, #8]
 800331c:	f003 0307 	and.w	r3, r3, #7
 8003320:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	2b06      	cmp	r3, #6
 8003326:	d007      	beq.n	8003338 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	681a      	ldr	r2, [r3, #0]
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f042 0201 	orr.w	r2, r2, #1
 8003336:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003338:	2300      	movs	r3, #0
}
 800333a:	4618      	mov	r0, r3
 800333c:	3714      	adds	r7, #20
 800333e:	46bd      	mov	sp, r7
 8003340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003344:	4770      	bx	lr

08003346 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003346:	b580      	push	{r7, lr}
 8003348:	b082      	sub	sp, #8
 800334a:	af00      	add	r7, sp, #0
 800334c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	691b      	ldr	r3, [r3, #16]
 8003354:	f003 0302 	and.w	r3, r3, #2
 8003358:	2b02      	cmp	r3, #2
 800335a:	d122      	bne.n	80033a2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	68db      	ldr	r3, [r3, #12]
 8003362:	f003 0302 	and.w	r3, r3, #2
 8003366:	2b02      	cmp	r3, #2
 8003368:	d11b      	bne.n	80033a2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f06f 0202 	mvn.w	r2, #2
 8003372:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2201      	movs	r2, #1
 8003378:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	699b      	ldr	r3, [r3, #24]
 8003380:	f003 0303 	and.w	r3, r3, #3
 8003384:	2b00      	cmp	r3, #0
 8003386:	d003      	beq.n	8003390 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003388:	6878      	ldr	r0, [r7, #4]
 800338a:	f000 f9b2 	bl	80036f2 <HAL_TIM_IC_CaptureCallback>
 800338e:	e005      	b.n	800339c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003390:	6878      	ldr	r0, [r7, #4]
 8003392:	f000 f9a4 	bl	80036de <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003396:	6878      	ldr	r0, [r7, #4]
 8003398:	f000 f9b5 	bl	8003706 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2200      	movs	r2, #0
 80033a0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	691b      	ldr	r3, [r3, #16]
 80033a8:	f003 0304 	and.w	r3, r3, #4
 80033ac:	2b04      	cmp	r3, #4
 80033ae:	d122      	bne.n	80033f6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	68db      	ldr	r3, [r3, #12]
 80033b6:	f003 0304 	and.w	r3, r3, #4
 80033ba:	2b04      	cmp	r3, #4
 80033bc:	d11b      	bne.n	80033f6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f06f 0204 	mvn.w	r2, #4
 80033c6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2202      	movs	r2, #2
 80033cc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	699b      	ldr	r3, [r3, #24]
 80033d4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d003      	beq.n	80033e4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033dc:	6878      	ldr	r0, [r7, #4]
 80033de:	f000 f988 	bl	80036f2 <HAL_TIM_IC_CaptureCallback>
 80033e2:	e005      	b.n	80033f0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033e4:	6878      	ldr	r0, [r7, #4]
 80033e6:	f000 f97a 	bl	80036de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033ea:	6878      	ldr	r0, [r7, #4]
 80033ec:	f000 f98b 	bl	8003706 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2200      	movs	r2, #0
 80033f4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	691b      	ldr	r3, [r3, #16]
 80033fc:	f003 0308 	and.w	r3, r3, #8
 8003400:	2b08      	cmp	r3, #8
 8003402:	d122      	bne.n	800344a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	68db      	ldr	r3, [r3, #12]
 800340a:	f003 0308 	and.w	r3, r3, #8
 800340e:	2b08      	cmp	r3, #8
 8003410:	d11b      	bne.n	800344a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f06f 0208 	mvn.w	r2, #8
 800341a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2204      	movs	r2, #4
 8003420:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	69db      	ldr	r3, [r3, #28]
 8003428:	f003 0303 	and.w	r3, r3, #3
 800342c:	2b00      	cmp	r3, #0
 800342e:	d003      	beq.n	8003438 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003430:	6878      	ldr	r0, [r7, #4]
 8003432:	f000 f95e 	bl	80036f2 <HAL_TIM_IC_CaptureCallback>
 8003436:	e005      	b.n	8003444 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003438:	6878      	ldr	r0, [r7, #4]
 800343a:	f000 f950 	bl	80036de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800343e:	6878      	ldr	r0, [r7, #4]
 8003440:	f000 f961 	bl	8003706 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2200      	movs	r2, #0
 8003448:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	691b      	ldr	r3, [r3, #16]
 8003450:	f003 0310 	and.w	r3, r3, #16
 8003454:	2b10      	cmp	r3, #16
 8003456:	d122      	bne.n	800349e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	68db      	ldr	r3, [r3, #12]
 800345e:	f003 0310 	and.w	r3, r3, #16
 8003462:	2b10      	cmp	r3, #16
 8003464:	d11b      	bne.n	800349e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f06f 0210 	mvn.w	r2, #16
 800346e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2208      	movs	r2, #8
 8003474:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	69db      	ldr	r3, [r3, #28]
 800347c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003480:	2b00      	cmp	r3, #0
 8003482:	d003      	beq.n	800348c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003484:	6878      	ldr	r0, [r7, #4]
 8003486:	f000 f934 	bl	80036f2 <HAL_TIM_IC_CaptureCallback>
 800348a:	e005      	b.n	8003498 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800348c:	6878      	ldr	r0, [r7, #4]
 800348e:	f000 f926 	bl	80036de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003492:	6878      	ldr	r0, [r7, #4]
 8003494:	f000 f937 	bl	8003706 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2200      	movs	r2, #0
 800349c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	691b      	ldr	r3, [r3, #16]
 80034a4:	f003 0301 	and.w	r3, r3, #1
 80034a8:	2b01      	cmp	r3, #1
 80034aa:	d10e      	bne.n	80034ca <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	68db      	ldr	r3, [r3, #12]
 80034b2:	f003 0301 	and.w	r3, r3, #1
 80034b6:	2b01      	cmp	r3, #1
 80034b8:	d107      	bne.n	80034ca <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f06f 0201 	mvn.w	r2, #1
 80034c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80034c4:	6878      	ldr	r0, [r7, #4]
 80034c6:	f7fe f8e7 	bl	8001698 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	691b      	ldr	r3, [r3, #16]
 80034d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034d4:	2b80      	cmp	r3, #128	; 0x80
 80034d6:	d10e      	bne.n	80034f6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	68db      	ldr	r3, [r3, #12]
 80034de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034e2:	2b80      	cmp	r3, #128	; 0x80
 80034e4:	d107      	bne.n	80034f6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80034ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80034f0:	6878      	ldr	r0, [r7, #4]
 80034f2:	f000 fadd 	bl	8003ab0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	691b      	ldr	r3, [r3, #16]
 80034fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003500:	2b40      	cmp	r3, #64	; 0x40
 8003502:	d10e      	bne.n	8003522 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	68db      	ldr	r3, [r3, #12]
 800350a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800350e:	2b40      	cmp	r3, #64	; 0x40
 8003510:	d107      	bne.n	8003522 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800351a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800351c:	6878      	ldr	r0, [r7, #4]
 800351e:	f000 f8fc 	bl	800371a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	691b      	ldr	r3, [r3, #16]
 8003528:	f003 0320 	and.w	r3, r3, #32
 800352c:	2b20      	cmp	r3, #32
 800352e:	d10e      	bne.n	800354e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	68db      	ldr	r3, [r3, #12]
 8003536:	f003 0320 	and.w	r3, r3, #32
 800353a:	2b20      	cmp	r3, #32
 800353c:	d107      	bne.n	800354e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f06f 0220 	mvn.w	r2, #32
 8003546:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003548:	6878      	ldr	r0, [r7, #4]
 800354a:	f000 faa7 	bl	8003a9c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800354e:	bf00      	nop
 8003550:	3708      	adds	r7, #8
 8003552:	46bd      	mov	sp, r7
 8003554:	bd80      	pop	{r7, pc}

08003556 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003556:	b580      	push	{r7, lr}
 8003558:	b084      	sub	sp, #16
 800355a:	af00      	add	r7, sp, #0
 800355c:	6078      	str	r0, [r7, #4]
 800355e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003566:	2b01      	cmp	r3, #1
 8003568:	d101      	bne.n	800356e <HAL_TIM_ConfigClockSource+0x18>
 800356a:	2302      	movs	r3, #2
 800356c:	e0b3      	b.n	80036d6 <HAL_TIM_ConfigClockSource+0x180>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2201      	movs	r2, #1
 8003572:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	2202      	movs	r2, #2
 800357a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	689b      	ldr	r3, [r3, #8]
 8003584:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800358c:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003594:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	68fa      	ldr	r2, [r7, #12]
 800359c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80035a6:	d03e      	beq.n	8003626 <HAL_TIM_ConfigClockSource+0xd0>
 80035a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80035ac:	f200 8087 	bhi.w	80036be <HAL_TIM_ConfigClockSource+0x168>
 80035b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035b4:	f000 8085 	beq.w	80036c2 <HAL_TIM_ConfigClockSource+0x16c>
 80035b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035bc:	d87f      	bhi.n	80036be <HAL_TIM_ConfigClockSource+0x168>
 80035be:	2b70      	cmp	r3, #112	; 0x70
 80035c0:	d01a      	beq.n	80035f8 <HAL_TIM_ConfigClockSource+0xa2>
 80035c2:	2b70      	cmp	r3, #112	; 0x70
 80035c4:	d87b      	bhi.n	80036be <HAL_TIM_ConfigClockSource+0x168>
 80035c6:	2b60      	cmp	r3, #96	; 0x60
 80035c8:	d050      	beq.n	800366c <HAL_TIM_ConfigClockSource+0x116>
 80035ca:	2b60      	cmp	r3, #96	; 0x60
 80035cc:	d877      	bhi.n	80036be <HAL_TIM_ConfigClockSource+0x168>
 80035ce:	2b50      	cmp	r3, #80	; 0x50
 80035d0:	d03c      	beq.n	800364c <HAL_TIM_ConfigClockSource+0xf6>
 80035d2:	2b50      	cmp	r3, #80	; 0x50
 80035d4:	d873      	bhi.n	80036be <HAL_TIM_ConfigClockSource+0x168>
 80035d6:	2b40      	cmp	r3, #64	; 0x40
 80035d8:	d058      	beq.n	800368c <HAL_TIM_ConfigClockSource+0x136>
 80035da:	2b40      	cmp	r3, #64	; 0x40
 80035dc:	d86f      	bhi.n	80036be <HAL_TIM_ConfigClockSource+0x168>
 80035de:	2b30      	cmp	r3, #48	; 0x30
 80035e0:	d064      	beq.n	80036ac <HAL_TIM_ConfigClockSource+0x156>
 80035e2:	2b30      	cmp	r3, #48	; 0x30
 80035e4:	d86b      	bhi.n	80036be <HAL_TIM_ConfigClockSource+0x168>
 80035e6:	2b20      	cmp	r3, #32
 80035e8:	d060      	beq.n	80036ac <HAL_TIM_ConfigClockSource+0x156>
 80035ea:	2b20      	cmp	r3, #32
 80035ec:	d867      	bhi.n	80036be <HAL_TIM_ConfigClockSource+0x168>
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d05c      	beq.n	80036ac <HAL_TIM_ConfigClockSource+0x156>
 80035f2:	2b10      	cmp	r3, #16
 80035f4:	d05a      	beq.n	80036ac <HAL_TIM_ConfigClockSource+0x156>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80035f6:	e062      	b.n	80036be <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6818      	ldr	r0, [r3, #0]
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	6899      	ldr	r1, [r3, #8]
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	685a      	ldr	r2, [r3, #4]
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	68db      	ldr	r3, [r3, #12]
 8003608:	f000 f9ac 	bl	8003964 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	689b      	ldr	r3, [r3, #8]
 8003612:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800361a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	68fa      	ldr	r2, [r7, #12]
 8003622:	609a      	str	r2, [r3, #8]
      break;
 8003624:	e04e      	b.n	80036c4 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6818      	ldr	r0, [r3, #0]
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	6899      	ldr	r1, [r3, #8]
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	685a      	ldr	r2, [r3, #4]
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	68db      	ldr	r3, [r3, #12]
 8003636:	f000 f995 	bl	8003964 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	689a      	ldr	r2, [r3, #8]
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003648:	609a      	str	r2, [r3, #8]
      break;
 800364a:	e03b      	b.n	80036c4 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6818      	ldr	r0, [r3, #0]
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	6859      	ldr	r1, [r3, #4]
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	68db      	ldr	r3, [r3, #12]
 8003658:	461a      	mov	r2, r3
 800365a:	f000 f909 	bl	8003870 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	2150      	movs	r1, #80	; 0x50
 8003664:	4618      	mov	r0, r3
 8003666:	f000 f962 	bl	800392e <TIM_ITRx_SetConfig>
      break;
 800366a:	e02b      	b.n	80036c4 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6818      	ldr	r0, [r3, #0]
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	6859      	ldr	r1, [r3, #4]
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	68db      	ldr	r3, [r3, #12]
 8003678:	461a      	mov	r2, r3
 800367a:	f000 f928 	bl	80038ce <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	2160      	movs	r1, #96	; 0x60
 8003684:	4618      	mov	r0, r3
 8003686:	f000 f952 	bl	800392e <TIM_ITRx_SetConfig>
      break;
 800368a:	e01b      	b.n	80036c4 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6818      	ldr	r0, [r3, #0]
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	6859      	ldr	r1, [r3, #4]
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	68db      	ldr	r3, [r3, #12]
 8003698:	461a      	mov	r2, r3
 800369a:	f000 f8e9 	bl	8003870 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	2140      	movs	r1, #64	; 0x40
 80036a4:	4618      	mov	r0, r3
 80036a6:	f000 f942 	bl	800392e <TIM_ITRx_SetConfig>
      break;
 80036aa:	e00b      	b.n	80036c4 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681a      	ldr	r2, [r3, #0]
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4619      	mov	r1, r3
 80036b6:	4610      	mov	r0, r2
 80036b8:	f000 f939 	bl	800392e <TIM_ITRx_SetConfig>
      break;
 80036bc:	e002      	b.n	80036c4 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80036be:	bf00      	nop
 80036c0:	e000      	b.n	80036c4 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80036c2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2201      	movs	r2, #1
 80036c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2200      	movs	r2, #0
 80036d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80036d4:	2300      	movs	r3, #0
}
 80036d6:	4618      	mov	r0, r3
 80036d8:	3710      	adds	r7, #16
 80036da:	46bd      	mov	sp, r7
 80036dc:	bd80      	pop	{r7, pc}

080036de <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80036de:	b480      	push	{r7}
 80036e0:	b083      	sub	sp, #12
 80036e2:	af00      	add	r7, sp, #0
 80036e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80036e6:	bf00      	nop
 80036e8:	370c      	adds	r7, #12
 80036ea:	46bd      	mov	sp, r7
 80036ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f0:	4770      	bx	lr

080036f2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80036f2:	b480      	push	{r7}
 80036f4:	b083      	sub	sp, #12
 80036f6:	af00      	add	r7, sp, #0
 80036f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80036fa:	bf00      	nop
 80036fc:	370c      	adds	r7, #12
 80036fe:	46bd      	mov	sp, r7
 8003700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003704:	4770      	bx	lr

08003706 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003706:	b480      	push	{r7}
 8003708:	b083      	sub	sp, #12
 800370a:	af00      	add	r7, sp, #0
 800370c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800370e:	bf00      	nop
 8003710:	370c      	adds	r7, #12
 8003712:	46bd      	mov	sp, r7
 8003714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003718:	4770      	bx	lr

0800371a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800371a:	b480      	push	{r7}
 800371c:	b083      	sub	sp, #12
 800371e:	af00      	add	r7, sp, #0
 8003720:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003722:	bf00      	nop
 8003724:	370c      	adds	r7, #12
 8003726:	46bd      	mov	sp, r7
 8003728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372c:	4770      	bx	lr
	...

08003730 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003730:	b480      	push	{r7}
 8003732:	b085      	sub	sp, #20
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
 8003738:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	4a40      	ldr	r2, [pc, #256]	; (8003844 <TIM_Base_SetConfig+0x114>)
 8003744:	4293      	cmp	r3, r2
 8003746:	d013      	beq.n	8003770 <TIM_Base_SetConfig+0x40>
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800374e:	d00f      	beq.n	8003770 <TIM_Base_SetConfig+0x40>
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	4a3d      	ldr	r2, [pc, #244]	; (8003848 <TIM_Base_SetConfig+0x118>)
 8003754:	4293      	cmp	r3, r2
 8003756:	d00b      	beq.n	8003770 <TIM_Base_SetConfig+0x40>
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	4a3c      	ldr	r2, [pc, #240]	; (800384c <TIM_Base_SetConfig+0x11c>)
 800375c:	4293      	cmp	r3, r2
 800375e:	d007      	beq.n	8003770 <TIM_Base_SetConfig+0x40>
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	4a3b      	ldr	r2, [pc, #236]	; (8003850 <TIM_Base_SetConfig+0x120>)
 8003764:	4293      	cmp	r3, r2
 8003766:	d003      	beq.n	8003770 <TIM_Base_SetConfig+0x40>
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	4a3a      	ldr	r2, [pc, #232]	; (8003854 <TIM_Base_SetConfig+0x124>)
 800376c:	4293      	cmp	r3, r2
 800376e:	d108      	bne.n	8003782 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003776:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	685b      	ldr	r3, [r3, #4]
 800377c:	68fa      	ldr	r2, [r7, #12]
 800377e:	4313      	orrs	r3, r2
 8003780:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	4a2f      	ldr	r2, [pc, #188]	; (8003844 <TIM_Base_SetConfig+0x114>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d02b      	beq.n	80037e2 <TIM_Base_SetConfig+0xb2>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003790:	d027      	beq.n	80037e2 <TIM_Base_SetConfig+0xb2>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	4a2c      	ldr	r2, [pc, #176]	; (8003848 <TIM_Base_SetConfig+0x118>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d023      	beq.n	80037e2 <TIM_Base_SetConfig+0xb2>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	4a2b      	ldr	r2, [pc, #172]	; (800384c <TIM_Base_SetConfig+0x11c>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d01f      	beq.n	80037e2 <TIM_Base_SetConfig+0xb2>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	4a2a      	ldr	r2, [pc, #168]	; (8003850 <TIM_Base_SetConfig+0x120>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d01b      	beq.n	80037e2 <TIM_Base_SetConfig+0xb2>
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	4a29      	ldr	r2, [pc, #164]	; (8003854 <TIM_Base_SetConfig+0x124>)
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d017      	beq.n	80037e2 <TIM_Base_SetConfig+0xb2>
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	4a28      	ldr	r2, [pc, #160]	; (8003858 <TIM_Base_SetConfig+0x128>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d013      	beq.n	80037e2 <TIM_Base_SetConfig+0xb2>
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	4a27      	ldr	r2, [pc, #156]	; (800385c <TIM_Base_SetConfig+0x12c>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d00f      	beq.n	80037e2 <TIM_Base_SetConfig+0xb2>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	4a26      	ldr	r2, [pc, #152]	; (8003860 <TIM_Base_SetConfig+0x130>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d00b      	beq.n	80037e2 <TIM_Base_SetConfig+0xb2>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	4a25      	ldr	r2, [pc, #148]	; (8003864 <TIM_Base_SetConfig+0x134>)
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d007      	beq.n	80037e2 <TIM_Base_SetConfig+0xb2>
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	4a24      	ldr	r2, [pc, #144]	; (8003868 <TIM_Base_SetConfig+0x138>)
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d003      	beq.n	80037e2 <TIM_Base_SetConfig+0xb2>
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	4a23      	ldr	r2, [pc, #140]	; (800386c <TIM_Base_SetConfig+0x13c>)
 80037de:	4293      	cmp	r3, r2
 80037e0:	d108      	bne.n	80037f4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	68db      	ldr	r3, [r3, #12]
 80037ee:	68fa      	ldr	r2, [r7, #12]
 80037f0:	4313      	orrs	r3, r2
 80037f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	695b      	ldr	r3, [r3, #20]
 80037fe:	4313      	orrs	r3, r2
 8003800:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	68fa      	ldr	r2, [r7, #12]
 8003806:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	689a      	ldr	r2, [r3, #8]
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	681a      	ldr	r2, [r3, #0]
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	4a0a      	ldr	r2, [pc, #40]	; (8003844 <TIM_Base_SetConfig+0x114>)
 800381c:	4293      	cmp	r3, r2
 800381e:	d003      	beq.n	8003828 <TIM_Base_SetConfig+0xf8>
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	4a0c      	ldr	r2, [pc, #48]	; (8003854 <TIM_Base_SetConfig+0x124>)
 8003824:	4293      	cmp	r3, r2
 8003826:	d103      	bne.n	8003830 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	691a      	ldr	r2, [r3, #16]
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2201      	movs	r2, #1
 8003834:	615a      	str	r2, [r3, #20]
}
 8003836:	bf00      	nop
 8003838:	3714      	adds	r7, #20
 800383a:	46bd      	mov	sp, r7
 800383c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003840:	4770      	bx	lr
 8003842:	bf00      	nop
 8003844:	40010000 	.word	0x40010000
 8003848:	40000400 	.word	0x40000400
 800384c:	40000800 	.word	0x40000800
 8003850:	40000c00 	.word	0x40000c00
 8003854:	40010400 	.word	0x40010400
 8003858:	40014000 	.word	0x40014000
 800385c:	40014400 	.word	0x40014400
 8003860:	40014800 	.word	0x40014800
 8003864:	40001800 	.word	0x40001800
 8003868:	40001c00 	.word	0x40001c00
 800386c:	40002000 	.word	0x40002000

08003870 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003870:	b480      	push	{r7}
 8003872:	b087      	sub	sp, #28
 8003874:	af00      	add	r7, sp, #0
 8003876:	60f8      	str	r0, [r7, #12]
 8003878:	60b9      	str	r1, [r7, #8]
 800387a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	6a1b      	ldr	r3, [r3, #32]
 8003880:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	6a1b      	ldr	r3, [r3, #32]
 8003886:	f023 0201 	bic.w	r2, r3, #1
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	699b      	ldr	r3, [r3, #24]
 8003892:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003894:	693b      	ldr	r3, [r7, #16]
 8003896:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800389a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	011b      	lsls	r3, r3, #4
 80038a0:	693a      	ldr	r2, [r7, #16]
 80038a2:	4313      	orrs	r3, r2
 80038a4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80038a6:	697b      	ldr	r3, [r7, #20]
 80038a8:	f023 030a 	bic.w	r3, r3, #10
 80038ac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80038ae:	697a      	ldr	r2, [r7, #20]
 80038b0:	68bb      	ldr	r3, [r7, #8]
 80038b2:	4313      	orrs	r3, r2
 80038b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	693a      	ldr	r2, [r7, #16]
 80038ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	697a      	ldr	r2, [r7, #20]
 80038c0:	621a      	str	r2, [r3, #32]
}
 80038c2:	bf00      	nop
 80038c4:	371c      	adds	r7, #28
 80038c6:	46bd      	mov	sp, r7
 80038c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038cc:	4770      	bx	lr

080038ce <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80038ce:	b480      	push	{r7}
 80038d0:	b087      	sub	sp, #28
 80038d2:	af00      	add	r7, sp, #0
 80038d4:	60f8      	str	r0, [r7, #12]
 80038d6:	60b9      	str	r1, [r7, #8]
 80038d8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	6a1b      	ldr	r3, [r3, #32]
 80038de:	f023 0210 	bic.w	r2, r3, #16
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	699b      	ldr	r3, [r3, #24]
 80038ea:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	6a1b      	ldr	r3, [r3, #32]
 80038f0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80038f2:	697b      	ldr	r3, [r7, #20]
 80038f4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80038f8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	031b      	lsls	r3, r3, #12
 80038fe:	697a      	ldr	r2, [r7, #20]
 8003900:	4313      	orrs	r3, r2
 8003902:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003904:	693b      	ldr	r3, [r7, #16]
 8003906:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800390a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800390c:	68bb      	ldr	r3, [r7, #8]
 800390e:	011b      	lsls	r3, r3, #4
 8003910:	693a      	ldr	r2, [r7, #16]
 8003912:	4313      	orrs	r3, r2
 8003914:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	697a      	ldr	r2, [r7, #20]
 800391a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	693a      	ldr	r2, [r7, #16]
 8003920:	621a      	str	r2, [r3, #32]
}
 8003922:	bf00      	nop
 8003924:	371c      	adds	r7, #28
 8003926:	46bd      	mov	sp, r7
 8003928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392c:	4770      	bx	lr

0800392e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800392e:	b480      	push	{r7}
 8003930:	b085      	sub	sp, #20
 8003932:	af00      	add	r7, sp, #0
 8003934:	6078      	str	r0, [r7, #4]
 8003936:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	689b      	ldr	r3, [r3, #8]
 800393c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003944:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003946:	683a      	ldr	r2, [r7, #0]
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	4313      	orrs	r3, r2
 800394c:	f043 0307 	orr.w	r3, r3, #7
 8003950:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	68fa      	ldr	r2, [r7, #12]
 8003956:	609a      	str	r2, [r3, #8]
}
 8003958:	bf00      	nop
 800395a:	3714      	adds	r7, #20
 800395c:	46bd      	mov	sp, r7
 800395e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003962:	4770      	bx	lr

08003964 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003964:	b480      	push	{r7}
 8003966:	b087      	sub	sp, #28
 8003968:	af00      	add	r7, sp, #0
 800396a:	60f8      	str	r0, [r7, #12]
 800396c:	60b9      	str	r1, [r7, #8]
 800396e:	607a      	str	r2, [r7, #4]
 8003970:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	689b      	ldr	r3, [r3, #8]
 8003976:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003978:	697b      	ldr	r3, [r7, #20]
 800397a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800397e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	021a      	lsls	r2, r3, #8
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	431a      	orrs	r2, r3
 8003988:	68bb      	ldr	r3, [r7, #8]
 800398a:	4313      	orrs	r3, r2
 800398c:	697a      	ldr	r2, [r7, #20]
 800398e:	4313      	orrs	r3, r2
 8003990:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	697a      	ldr	r2, [r7, #20]
 8003996:	609a      	str	r2, [r3, #8]
}
 8003998:	bf00      	nop
 800399a:	371c      	adds	r7, #28
 800399c:	46bd      	mov	sp, r7
 800399e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a2:	4770      	bx	lr

080039a4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80039a4:	b480      	push	{r7}
 80039a6:	b085      	sub	sp, #20
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
 80039ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039b4:	2b01      	cmp	r3, #1
 80039b6:	d101      	bne.n	80039bc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80039b8:	2302      	movs	r3, #2
 80039ba:	e05a      	b.n	8003a72 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2201      	movs	r2, #1
 80039c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2202      	movs	r2, #2
 80039c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	685b      	ldr	r3, [r3, #4]
 80039d2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	689b      	ldr	r3, [r3, #8]
 80039da:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039e2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	68fa      	ldr	r2, [r7, #12]
 80039ea:	4313      	orrs	r3, r2
 80039ec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	68fa      	ldr	r2, [r7, #12]
 80039f4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	4a21      	ldr	r2, [pc, #132]	; (8003a80 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80039fc:	4293      	cmp	r3, r2
 80039fe:	d022      	beq.n	8003a46 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a08:	d01d      	beq.n	8003a46 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	4a1d      	ldr	r2, [pc, #116]	; (8003a84 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003a10:	4293      	cmp	r3, r2
 8003a12:	d018      	beq.n	8003a46 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	4a1b      	ldr	r2, [pc, #108]	; (8003a88 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d013      	beq.n	8003a46 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	4a1a      	ldr	r2, [pc, #104]	; (8003a8c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003a24:	4293      	cmp	r3, r2
 8003a26:	d00e      	beq.n	8003a46 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4a18      	ldr	r2, [pc, #96]	; (8003a90 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d009      	beq.n	8003a46 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4a17      	ldr	r2, [pc, #92]	; (8003a94 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	d004      	beq.n	8003a46 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	4a15      	ldr	r2, [pc, #84]	; (8003a98 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d10c      	bne.n	8003a60 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003a46:	68bb      	ldr	r3, [r7, #8]
 8003a48:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003a4c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	685b      	ldr	r3, [r3, #4]
 8003a52:	68ba      	ldr	r2, [r7, #8]
 8003a54:	4313      	orrs	r3, r2
 8003a56:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	68ba      	ldr	r2, [r7, #8]
 8003a5e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2201      	movs	r2, #1
 8003a64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003a70:	2300      	movs	r3, #0
}
 8003a72:	4618      	mov	r0, r3
 8003a74:	3714      	adds	r7, #20
 8003a76:	46bd      	mov	sp, r7
 8003a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7c:	4770      	bx	lr
 8003a7e:	bf00      	nop
 8003a80:	40010000 	.word	0x40010000
 8003a84:	40000400 	.word	0x40000400
 8003a88:	40000800 	.word	0x40000800
 8003a8c:	40000c00 	.word	0x40000c00
 8003a90:	40010400 	.word	0x40010400
 8003a94:	40014000 	.word	0x40014000
 8003a98:	40001800 	.word	0x40001800

08003a9c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003a9c:	b480      	push	{r7}
 8003a9e:	b083      	sub	sp, #12
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003aa4:	bf00      	nop
 8003aa6:	370c      	adds	r7, #12
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aae:	4770      	bx	lr

08003ab0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003ab0:	b480      	push	{r7}
 8003ab2:	b083      	sub	sp, #12
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003ab8:	bf00      	nop
 8003aba:	370c      	adds	r7, #12
 8003abc:	46bd      	mov	sp, r7
 8003abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac2:	4770      	bx	lr

08003ac4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b082      	sub	sp, #8
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d101      	bne.n	8003ad6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	e03f      	b.n	8003b56 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003adc:	b2db      	uxtb	r3, r3
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d106      	bne.n	8003af0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003aea:	6878      	ldr	r0, [r7, #4]
 8003aec:	f7fd fece 	bl	800188c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2224      	movs	r2, #36	; 0x24
 8003af4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	68da      	ldr	r2, [r3, #12]
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003b06:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003b08:	6878      	ldr	r0, [r7, #4]
 8003b0a:	f000 f90b 	bl	8003d24 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	691a      	ldr	r2, [r3, #16]
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003b1c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	695a      	ldr	r2, [r3, #20]
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003b2c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	68da      	ldr	r2, [r3, #12]
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003b3c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2200      	movs	r2, #0
 8003b42:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2220      	movs	r2, #32
 8003b48:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2220      	movs	r2, #32
 8003b50:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003b54:	2300      	movs	r3, #0
}
 8003b56:	4618      	mov	r0, r3
 8003b58:	3708      	adds	r7, #8
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	bd80      	pop	{r7, pc}

08003b5e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b5e:	b580      	push	{r7, lr}
 8003b60:	b088      	sub	sp, #32
 8003b62:	af02      	add	r7, sp, #8
 8003b64:	60f8      	str	r0, [r7, #12]
 8003b66:	60b9      	str	r1, [r7, #8]
 8003b68:	603b      	str	r3, [r7, #0]
 8003b6a:	4613      	mov	r3, r2
 8003b6c:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8003b6e:	2300      	movs	r3, #0
 8003b70:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003b78:	b2db      	uxtb	r3, r3
 8003b7a:	2b20      	cmp	r3, #32
 8003b7c:	f040 8083 	bne.w	8003c86 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b80:	68bb      	ldr	r3, [r7, #8]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d002      	beq.n	8003b8c <HAL_UART_Transmit+0x2e>
 8003b86:	88fb      	ldrh	r3, [r7, #6]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d101      	bne.n	8003b90 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8003b8c:	2301      	movs	r3, #1
 8003b8e:	e07b      	b.n	8003c88 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003b96:	2b01      	cmp	r3, #1
 8003b98:	d101      	bne.n	8003b9e <HAL_UART_Transmit+0x40>
 8003b9a:	2302      	movs	r3, #2
 8003b9c:	e074      	b.n	8003c88 <HAL_UART_Transmit+0x12a>
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	2201      	movs	r2, #1
 8003ba2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	2200      	movs	r2, #0
 8003baa:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	2221      	movs	r2, #33	; 0x21
 8003bb0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8003bb4:	f7fe f86c 	bl	8001c90 <HAL_GetTick>
 8003bb8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	88fa      	ldrh	r2, [r7, #6]
 8003bbe:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	88fa      	ldrh	r2, [r7, #6]
 8003bc4:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	2200      	movs	r2, #0
 8003bca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8003bce:	e042      	b.n	8003c56 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003bd4:	b29b      	uxth	r3, r3
 8003bd6:	3b01      	subs	r3, #1
 8003bd8:	b29a      	uxth	r2, r3
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	689b      	ldr	r3, [r3, #8]
 8003be2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003be6:	d122      	bne.n	8003c2e <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	9300      	str	r3, [sp, #0]
 8003bec:	697b      	ldr	r3, [r7, #20]
 8003bee:	2200      	movs	r2, #0
 8003bf0:	2180      	movs	r1, #128	; 0x80
 8003bf2:	68f8      	ldr	r0, [r7, #12]
 8003bf4:	f000 f84c 	bl	8003c90 <UART_WaitOnFlagUntilTimeout>
 8003bf8:	4603      	mov	r3, r0
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d001      	beq.n	8003c02 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8003bfe:	2303      	movs	r3, #3
 8003c00:	e042      	b.n	8003c88 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8003c02:	68bb      	ldr	r3, [r7, #8]
 8003c04:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8003c06:	693b      	ldr	r3, [r7, #16]
 8003c08:	881b      	ldrh	r3, [r3, #0]
 8003c0a:	461a      	mov	r2, r3
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003c14:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	691b      	ldr	r3, [r3, #16]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d103      	bne.n	8003c26 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8003c1e:	68bb      	ldr	r3, [r7, #8]
 8003c20:	3302      	adds	r3, #2
 8003c22:	60bb      	str	r3, [r7, #8]
 8003c24:	e017      	b.n	8003c56 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8003c26:	68bb      	ldr	r3, [r7, #8]
 8003c28:	3301      	adds	r3, #1
 8003c2a:	60bb      	str	r3, [r7, #8]
 8003c2c:	e013      	b.n	8003c56 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	9300      	str	r3, [sp, #0]
 8003c32:	697b      	ldr	r3, [r7, #20]
 8003c34:	2200      	movs	r2, #0
 8003c36:	2180      	movs	r1, #128	; 0x80
 8003c38:	68f8      	ldr	r0, [r7, #12]
 8003c3a:	f000 f829 	bl	8003c90 <UART_WaitOnFlagUntilTimeout>
 8003c3e:	4603      	mov	r3, r0
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d001      	beq.n	8003c48 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8003c44:	2303      	movs	r3, #3
 8003c46:	e01f      	b.n	8003c88 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8003c48:	68bb      	ldr	r3, [r7, #8]
 8003c4a:	1c5a      	adds	r2, r3, #1
 8003c4c:	60ba      	str	r2, [r7, #8]
 8003c4e:	781a      	ldrb	r2, [r3, #0]
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003c5a:	b29b      	uxth	r3, r3
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d1b7      	bne.n	8003bd0 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	9300      	str	r3, [sp, #0]
 8003c64:	697b      	ldr	r3, [r7, #20]
 8003c66:	2200      	movs	r2, #0
 8003c68:	2140      	movs	r1, #64	; 0x40
 8003c6a:	68f8      	ldr	r0, [r7, #12]
 8003c6c:	f000 f810 	bl	8003c90 <UART_WaitOnFlagUntilTimeout>
 8003c70:	4603      	mov	r3, r0
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d001      	beq.n	8003c7a <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8003c76:	2303      	movs	r3, #3
 8003c78:	e006      	b.n	8003c88 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	2220      	movs	r2, #32
 8003c7e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8003c82:	2300      	movs	r3, #0
 8003c84:	e000      	b.n	8003c88 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8003c86:	2302      	movs	r3, #2
  }
}
 8003c88:	4618      	mov	r0, r3
 8003c8a:	3718      	adds	r7, #24
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	bd80      	pop	{r7, pc}

08003c90 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b084      	sub	sp, #16
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	60f8      	str	r0, [r7, #12]
 8003c98:	60b9      	str	r1, [r7, #8]
 8003c9a:	603b      	str	r3, [r7, #0]
 8003c9c:	4613      	mov	r3, r2
 8003c9e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ca0:	e02c      	b.n	8003cfc <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ca2:	69bb      	ldr	r3, [r7, #24]
 8003ca4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ca8:	d028      	beq.n	8003cfc <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003caa:	69bb      	ldr	r3, [r7, #24]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d007      	beq.n	8003cc0 <UART_WaitOnFlagUntilTimeout+0x30>
 8003cb0:	f7fd ffee 	bl	8001c90 <HAL_GetTick>
 8003cb4:	4602      	mov	r2, r0
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	1ad3      	subs	r3, r2, r3
 8003cba:	69ba      	ldr	r2, [r7, #24]
 8003cbc:	429a      	cmp	r2, r3
 8003cbe:	d21d      	bcs.n	8003cfc <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	68da      	ldr	r2, [r3, #12]
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003cce:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	695a      	ldr	r2, [r3, #20]
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f022 0201 	bic.w	r2, r2, #1
 8003cde:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	2220      	movs	r2, #32
 8003ce4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	2220      	movs	r2, #32
 8003cec:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8003cf8:	2303      	movs	r3, #3
 8003cfa:	e00f      	b.n	8003d1c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	681a      	ldr	r2, [r3, #0]
 8003d02:	68bb      	ldr	r3, [r7, #8]
 8003d04:	4013      	ands	r3, r2
 8003d06:	68ba      	ldr	r2, [r7, #8]
 8003d08:	429a      	cmp	r2, r3
 8003d0a:	bf0c      	ite	eq
 8003d0c:	2301      	moveq	r3, #1
 8003d0e:	2300      	movne	r3, #0
 8003d10:	b2db      	uxtb	r3, r3
 8003d12:	461a      	mov	r2, r3
 8003d14:	79fb      	ldrb	r3, [r7, #7]
 8003d16:	429a      	cmp	r2, r3
 8003d18:	d0c3      	beq.n	8003ca2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003d1a:	2300      	movs	r3, #0
}
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	3710      	adds	r7, #16
 8003d20:	46bd      	mov	sp, r7
 8003d22:	bd80      	pop	{r7, pc}

08003d24 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003d24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d28:	b0bd      	sub	sp, #244	; 0xf4
 8003d2a:	af00      	add	r7, sp, #0
 8003d2c:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003d30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	691b      	ldr	r3, [r3, #16]
 8003d38:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003d3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d40:	68d9      	ldr	r1, [r3, #12]
 8003d42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d46:	681a      	ldr	r2, [r3, #0]
 8003d48:	ea40 0301 	orr.w	r3, r0, r1
 8003d4c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003d4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d52:	689a      	ldr	r2, [r3, #8]
 8003d54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d58:	691b      	ldr	r3, [r3, #16]
 8003d5a:	431a      	orrs	r2, r3
 8003d5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d60:	695b      	ldr	r3, [r3, #20]
 8003d62:	431a      	orrs	r2, r3
 8003d64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d68:	69db      	ldr	r3, [r3, #28]
 8003d6a:	4313      	orrs	r3, r2
 8003d6c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  MODIFY_REG(huart->Instance->CR1,
 8003d70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	68db      	ldr	r3, [r3, #12]
 8003d78:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003d7c:	f021 010c 	bic.w	r1, r1, #12
 8003d80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d84:	681a      	ldr	r2, [r3, #0]
 8003d86:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8003d8a:	430b      	orrs	r3, r1
 8003d8c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003d8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	695b      	ldr	r3, [r3, #20]
 8003d96:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003d9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d9e:	6999      	ldr	r1, [r3, #24]
 8003da0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003da4:	681a      	ldr	r2, [r3, #0]
 8003da6:	ea40 0301 	orr.w	r3, r0, r1
 8003daa:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003dac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003db0:	69db      	ldr	r3, [r3, #28]
 8003db2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003db6:	f040 81a5 	bne.w	8004104 <UART_SetConfig+0x3e0>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003dba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003dbe:	681a      	ldr	r2, [r3, #0]
 8003dc0:	4bcd      	ldr	r3, [pc, #820]	; (80040f8 <UART_SetConfig+0x3d4>)
 8003dc2:	429a      	cmp	r2, r3
 8003dc4:	d006      	beq.n	8003dd4 <UART_SetConfig+0xb0>
 8003dc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003dca:	681a      	ldr	r2, [r3, #0]
 8003dcc:	4bcb      	ldr	r3, [pc, #812]	; (80040fc <UART_SetConfig+0x3d8>)
 8003dce:	429a      	cmp	r2, r3
 8003dd0:	f040 80cb 	bne.w	8003f6a <UART_SetConfig+0x246>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003dd4:	f7ff fa54 	bl	8003280 <HAL_RCC_GetPCLK2Freq>
 8003dd8:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003ddc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003de0:	461c      	mov	r4, r3
 8003de2:	f04f 0500 	mov.w	r5, #0
 8003de6:	4622      	mov	r2, r4
 8003de8:	462b      	mov	r3, r5
 8003dea:	1891      	adds	r1, r2, r2
 8003dec:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 8003df0:	415b      	adcs	r3, r3
 8003df2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8003df6:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8003dfa:	1912      	adds	r2, r2, r4
 8003dfc:	eb45 0303 	adc.w	r3, r5, r3
 8003e00:	f04f 0000 	mov.w	r0, #0
 8003e04:	f04f 0100 	mov.w	r1, #0
 8003e08:	00d9      	lsls	r1, r3, #3
 8003e0a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003e0e:	00d0      	lsls	r0, r2, #3
 8003e10:	4602      	mov	r2, r0
 8003e12:	460b      	mov	r3, r1
 8003e14:	1911      	adds	r1, r2, r4
 8003e16:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 8003e1a:	416b      	adcs	r3, r5
 8003e1c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8003e20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e24:	685b      	ldr	r3, [r3, #4]
 8003e26:	461a      	mov	r2, r3
 8003e28:	f04f 0300 	mov.w	r3, #0
 8003e2c:	1891      	adds	r1, r2, r2
 8003e2e:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 8003e32:	415b      	adcs	r3, r3
 8003e34:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003e38:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8003e3c:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8003e40:	f7fc feb2 	bl	8000ba8 <__aeabi_uldivmod>
 8003e44:	4602      	mov	r2, r0
 8003e46:	460b      	mov	r3, r1
 8003e48:	4bad      	ldr	r3, [pc, #692]	; (8004100 <UART_SetConfig+0x3dc>)
 8003e4a:	fba3 2302 	umull	r2, r3, r3, r2
 8003e4e:	095b      	lsrs	r3, r3, #5
 8003e50:	011e      	lsls	r6, r3, #4
 8003e52:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003e56:	461c      	mov	r4, r3
 8003e58:	f04f 0500 	mov.w	r5, #0
 8003e5c:	4622      	mov	r2, r4
 8003e5e:	462b      	mov	r3, r5
 8003e60:	1891      	adds	r1, r2, r2
 8003e62:	67b9      	str	r1, [r7, #120]	; 0x78
 8003e64:	415b      	adcs	r3, r3
 8003e66:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003e68:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8003e6c:	1912      	adds	r2, r2, r4
 8003e6e:	eb45 0303 	adc.w	r3, r5, r3
 8003e72:	f04f 0000 	mov.w	r0, #0
 8003e76:	f04f 0100 	mov.w	r1, #0
 8003e7a:	00d9      	lsls	r1, r3, #3
 8003e7c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003e80:	00d0      	lsls	r0, r2, #3
 8003e82:	4602      	mov	r2, r0
 8003e84:	460b      	mov	r3, r1
 8003e86:	1911      	adds	r1, r2, r4
 8003e88:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 8003e8c:	416b      	adcs	r3, r5
 8003e8e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8003e92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e96:	685b      	ldr	r3, [r3, #4]
 8003e98:	461a      	mov	r2, r3
 8003e9a:	f04f 0300 	mov.w	r3, #0
 8003e9e:	1891      	adds	r1, r2, r2
 8003ea0:	6739      	str	r1, [r7, #112]	; 0x70
 8003ea2:	415b      	adcs	r3, r3
 8003ea4:	677b      	str	r3, [r7, #116]	; 0x74
 8003ea6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8003eaa:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8003eae:	f7fc fe7b 	bl	8000ba8 <__aeabi_uldivmod>
 8003eb2:	4602      	mov	r2, r0
 8003eb4:	460b      	mov	r3, r1
 8003eb6:	4b92      	ldr	r3, [pc, #584]	; (8004100 <UART_SetConfig+0x3dc>)
 8003eb8:	fba3 1302 	umull	r1, r3, r3, r2
 8003ebc:	095b      	lsrs	r3, r3, #5
 8003ebe:	2164      	movs	r1, #100	; 0x64
 8003ec0:	fb01 f303 	mul.w	r3, r1, r3
 8003ec4:	1ad3      	subs	r3, r2, r3
 8003ec6:	00db      	lsls	r3, r3, #3
 8003ec8:	3332      	adds	r3, #50	; 0x32
 8003eca:	4a8d      	ldr	r2, [pc, #564]	; (8004100 <UART_SetConfig+0x3dc>)
 8003ecc:	fba2 2303 	umull	r2, r3, r2, r3
 8003ed0:	095b      	lsrs	r3, r3, #5
 8003ed2:	005b      	lsls	r3, r3, #1
 8003ed4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003ed8:	441e      	add	r6, r3
 8003eda:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003ede:	4618      	mov	r0, r3
 8003ee0:	f04f 0100 	mov.w	r1, #0
 8003ee4:	4602      	mov	r2, r0
 8003ee6:	460b      	mov	r3, r1
 8003ee8:	1894      	adds	r4, r2, r2
 8003eea:	66bc      	str	r4, [r7, #104]	; 0x68
 8003eec:	415b      	adcs	r3, r3
 8003eee:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003ef0:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8003ef4:	1812      	adds	r2, r2, r0
 8003ef6:	eb41 0303 	adc.w	r3, r1, r3
 8003efa:	f04f 0400 	mov.w	r4, #0
 8003efe:	f04f 0500 	mov.w	r5, #0
 8003f02:	00dd      	lsls	r5, r3, #3
 8003f04:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003f08:	00d4      	lsls	r4, r2, #3
 8003f0a:	4622      	mov	r2, r4
 8003f0c:	462b      	mov	r3, r5
 8003f0e:	1814      	adds	r4, r2, r0
 8003f10:	f8c7 40c8 	str.w	r4, [r7, #200]	; 0xc8
 8003f14:	414b      	adcs	r3, r1
 8003f16:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003f1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f1e:	685b      	ldr	r3, [r3, #4]
 8003f20:	461a      	mov	r2, r3
 8003f22:	f04f 0300 	mov.w	r3, #0
 8003f26:	1891      	adds	r1, r2, r2
 8003f28:	6639      	str	r1, [r7, #96]	; 0x60
 8003f2a:	415b      	adcs	r3, r3
 8003f2c:	667b      	str	r3, [r7, #100]	; 0x64
 8003f2e:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8003f32:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003f36:	f7fc fe37 	bl	8000ba8 <__aeabi_uldivmod>
 8003f3a:	4602      	mov	r2, r0
 8003f3c:	460b      	mov	r3, r1
 8003f3e:	4b70      	ldr	r3, [pc, #448]	; (8004100 <UART_SetConfig+0x3dc>)
 8003f40:	fba3 1302 	umull	r1, r3, r3, r2
 8003f44:	095b      	lsrs	r3, r3, #5
 8003f46:	2164      	movs	r1, #100	; 0x64
 8003f48:	fb01 f303 	mul.w	r3, r1, r3
 8003f4c:	1ad3      	subs	r3, r2, r3
 8003f4e:	00db      	lsls	r3, r3, #3
 8003f50:	3332      	adds	r3, #50	; 0x32
 8003f52:	4a6b      	ldr	r2, [pc, #428]	; (8004100 <UART_SetConfig+0x3dc>)
 8003f54:	fba2 2303 	umull	r2, r3, r2, r3
 8003f58:	095b      	lsrs	r3, r3, #5
 8003f5a:	f003 0207 	and.w	r2, r3, #7
 8003f5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4432      	add	r2, r6
 8003f66:	609a      	str	r2, [r3, #8]
 8003f68:	e26d      	b.n	8004446 <UART_SetConfig+0x722>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003f6a:	f7ff f975 	bl	8003258 <HAL_RCC_GetPCLK1Freq>
 8003f6e:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003f72:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003f76:	461c      	mov	r4, r3
 8003f78:	f04f 0500 	mov.w	r5, #0
 8003f7c:	4622      	mov	r2, r4
 8003f7e:	462b      	mov	r3, r5
 8003f80:	1891      	adds	r1, r2, r2
 8003f82:	65b9      	str	r1, [r7, #88]	; 0x58
 8003f84:	415b      	adcs	r3, r3
 8003f86:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003f88:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003f8c:	1912      	adds	r2, r2, r4
 8003f8e:	eb45 0303 	adc.w	r3, r5, r3
 8003f92:	f04f 0000 	mov.w	r0, #0
 8003f96:	f04f 0100 	mov.w	r1, #0
 8003f9a:	00d9      	lsls	r1, r3, #3
 8003f9c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003fa0:	00d0      	lsls	r0, r2, #3
 8003fa2:	4602      	mov	r2, r0
 8003fa4:	460b      	mov	r3, r1
 8003fa6:	1911      	adds	r1, r2, r4
 8003fa8:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 8003fac:	416b      	adcs	r3, r5
 8003fae:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003fb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003fb6:	685b      	ldr	r3, [r3, #4]
 8003fb8:	461a      	mov	r2, r3
 8003fba:	f04f 0300 	mov.w	r3, #0
 8003fbe:	1891      	adds	r1, r2, r2
 8003fc0:	6539      	str	r1, [r7, #80]	; 0x50
 8003fc2:	415b      	adcs	r3, r3
 8003fc4:	657b      	str	r3, [r7, #84]	; 0x54
 8003fc6:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003fca:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 8003fce:	f7fc fdeb 	bl	8000ba8 <__aeabi_uldivmod>
 8003fd2:	4602      	mov	r2, r0
 8003fd4:	460b      	mov	r3, r1
 8003fd6:	4b4a      	ldr	r3, [pc, #296]	; (8004100 <UART_SetConfig+0x3dc>)
 8003fd8:	fba3 2302 	umull	r2, r3, r3, r2
 8003fdc:	095b      	lsrs	r3, r3, #5
 8003fde:	011e      	lsls	r6, r3, #4
 8003fe0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003fe4:	461c      	mov	r4, r3
 8003fe6:	f04f 0500 	mov.w	r5, #0
 8003fea:	4622      	mov	r2, r4
 8003fec:	462b      	mov	r3, r5
 8003fee:	1891      	adds	r1, r2, r2
 8003ff0:	64b9      	str	r1, [r7, #72]	; 0x48
 8003ff2:	415b      	adcs	r3, r3
 8003ff4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003ff6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003ffa:	1912      	adds	r2, r2, r4
 8003ffc:	eb45 0303 	adc.w	r3, r5, r3
 8004000:	f04f 0000 	mov.w	r0, #0
 8004004:	f04f 0100 	mov.w	r1, #0
 8004008:	00d9      	lsls	r1, r3, #3
 800400a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800400e:	00d0      	lsls	r0, r2, #3
 8004010:	4602      	mov	r2, r0
 8004012:	460b      	mov	r3, r1
 8004014:	1911      	adds	r1, r2, r4
 8004016:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 800401a:	416b      	adcs	r3, r5
 800401c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8004020:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004024:	685b      	ldr	r3, [r3, #4]
 8004026:	461a      	mov	r2, r3
 8004028:	f04f 0300 	mov.w	r3, #0
 800402c:	1891      	adds	r1, r2, r2
 800402e:	6439      	str	r1, [r7, #64]	; 0x40
 8004030:	415b      	adcs	r3, r3
 8004032:	647b      	str	r3, [r7, #68]	; 0x44
 8004034:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004038:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 800403c:	f7fc fdb4 	bl	8000ba8 <__aeabi_uldivmod>
 8004040:	4602      	mov	r2, r0
 8004042:	460b      	mov	r3, r1
 8004044:	4b2e      	ldr	r3, [pc, #184]	; (8004100 <UART_SetConfig+0x3dc>)
 8004046:	fba3 1302 	umull	r1, r3, r3, r2
 800404a:	095b      	lsrs	r3, r3, #5
 800404c:	2164      	movs	r1, #100	; 0x64
 800404e:	fb01 f303 	mul.w	r3, r1, r3
 8004052:	1ad3      	subs	r3, r2, r3
 8004054:	00db      	lsls	r3, r3, #3
 8004056:	3332      	adds	r3, #50	; 0x32
 8004058:	4a29      	ldr	r2, [pc, #164]	; (8004100 <UART_SetConfig+0x3dc>)
 800405a:	fba2 2303 	umull	r2, r3, r2, r3
 800405e:	095b      	lsrs	r3, r3, #5
 8004060:	005b      	lsls	r3, r3, #1
 8004062:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004066:	441e      	add	r6, r3
 8004068:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800406c:	4618      	mov	r0, r3
 800406e:	f04f 0100 	mov.w	r1, #0
 8004072:	4602      	mov	r2, r0
 8004074:	460b      	mov	r3, r1
 8004076:	1894      	adds	r4, r2, r2
 8004078:	63bc      	str	r4, [r7, #56]	; 0x38
 800407a:	415b      	adcs	r3, r3
 800407c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800407e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004082:	1812      	adds	r2, r2, r0
 8004084:	eb41 0303 	adc.w	r3, r1, r3
 8004088:	f04f 0400 	mov.w	r4, #0
 800408c:	f04f 0500 	mov.w	r5, #0
 8004090:	00dd      	lsls	r5, r3, #3
 8004092:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004096:	00d4      	lsls	r4, r2, #3
 8004098:	4622      	mov	r2, r4
 800409a:	462b      	mov	r3, r5
 800409c:	1814      	adds	r4, r2, r0
 800409e:	f8c7 40b0 	str.w	r4, [r7, #176]	; 0xb0
 80040a2:	414b      	adcs	r3, r1
 80040a4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80040a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80040ac:	685b      	ldr	r3, [r3, #4]
 80040ae:	461a      	mov	r2, r3
 80040b0:	f04f 0300 	mov.w	r3, #0
 80040b4:	1891      	adds	r1, r2, r2
 80040b6:	6339      	str	r1, [r7, #48]	; 0x30
 80040b8:	415b      	adcs	r3, r3
 80040ba:	637b      	str	r3, [r7, #52]	; 0x34
 80040bc:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80040c0:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80040c4:	f7fc fd70 	bl	8000ba8 <__aeabi_uldivmod>
 80040c8:	4602      	mov	r2, r0
 80040ca:	460b      	mov	r3, r1
 80040cc:	4b0c      	ldr	r3, [pc, #48]	; (8004100 <UART_SetConfig+0x3dc>)
 80040ce:	fba3 1302 	umull	r1, r3, r3, r2
 80040d2:	095b      	lsrs	r3, r3, #5
 80040d4:	2164      	movs	r1, #100	; 0x64
 80040d6:	fb01 f303 	mul.w	r3, r1, r3
 80040da:	1ad3      	subs	r3, r2, r3
 80040dc:	00db      	lsls	r3, r3, #3
 80040de:	3332      	adds	r3, #50	; 0x32
 80040e0:	4a07      	ldr	r2, [pc, #28]	; (8004100 <UART_SetConfig+0x3dc>)
 80040e2:	fba2 2303 	umull	r2, r3, r2, r3
 80040e6:	095b      	lsrs	r3, r3, #5
 80040e8:	f003 0207 	and.w	r2, r3, #7
 80040ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	4432      	add	r2, r6
 80040f4:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80040f6:	e1a6      	b.n	8004446 <UART_SetConfig+0x722>
 80040f8:	40011000 	.word	0x40011000
 80040fc:	40011400 	.word	0x40011400
 8004100:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004104:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004108:	681a      	ldr	r2, [r3, #0]
 800410a:	4bd1      	ldr	r3, [pc, #836]	; (8004450 <UART_SetConfig+0x72c>)
 800410c:	429a      	cmp	r2, r3
 800410e:	d006      	beq.n	800411e <UART_SetConfig+0x3fa>
 8004110:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004114:	681a      	ldr	r2, [r3, #0]
 8004116:	4bcf      	ldr	r3, [pc, #828]	; (8004454 <UART_SetConfig+0x730>)
 8004118:	429a      	cmp	r2, r3
 800411a:	f040 80ca 	bne.w	80042b2 <UART_SetConfig+0x58e>
      pclk = HAL_RCC_GetPCLK2Freq();
 800411e:	f7ff f8af 	bl	8003280 <HAL_RCC_GetPCLK2Freq>
 8004122:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004126:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800412a:	461c      	mov	r4, r3
 800412c:	f04f 0500 	mov.w	r5, #0
 8004130:	4622      	mov	r2, r4
 8004132:	462b      	mov	r3, r5
 8004134:	1891      	adds	r1, r2, r2
 8004136:	62b9      	str	r1, [r7, #40]	; 0x28
 8004138:	415b      	adcs	r3, r3
 800413a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800413c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004140:	1912      	adds	r2, r2, r4
 8004142:	eb45 0303 	adc.w	r3, r5, r3
 8004146:	f04f 0000 	mov.w	r0, #0
 800414a:	f04f 0100 	mov.w	r1, #0
 800414e:	00d9      	lsls	r1, r3, #3
 8004150:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004154:	00d0      	lsls	r0, r2, #3
 8004156:	4602      	mov	r2, r0
 8004158:	460b      	mov	r3, r1
 800415a:	eb12 0a04 	adds.w	sl, r2, r4
 800415e:	eb43 0b05 	adc.w	fp, r3, r5
 8004162:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004166:	685b      	ldr	r3, [r3, #4]
 8004168:	4618      	mov	r0, r3
 800416a:	f04f 0100 	mov.w	r1, #0
 800416e:	f04f 0200 	mov.w	r2, #0
 8004172:	f04f 0300 	mov.w	r3, #0
 8004176:	008b      	lsls	r3, r1, #2
 8004178:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800417c:	0082      	lsls	r2, r0, #2
 800417e:	4650      	mov	r0, sl
 8004180:	4659      	mov	r1, fp
 8004182:	f7fc fd11 	bl	8000ba8 <__aeabi_uldivmod>
 8004186:	4602      	mov	r2, r0
 8004188:	460b      	mov	r3, r1
 800418a:	4bb3      	ldr	r3, [pc, #716]	; (8004458 <UART_SetConfig+0x734>)
 800418c:	fba3 2302 	umull	r2, r3, r3, r2
 8004190:	095b      	lsrs	r3, r3, #5
 8004192:	011e      	lsls	r6, r3, #4
 8004194:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004198:	4618      	mov	r0, r3
 800419a:	f04f 0100 	mov.w	r1, #0
 800419e:	4602      	mov	r2, r0
 80041a0:	460b      	mov	r3, r1
 80041a2:	1894      	adds	r4, r2, r2
 80041a4:	623c      	str	r4, [r7, #32]
 80041a6:	415b      	adcs	r3, r3
 80041a8:	627b      	str	r3, [r7, #36]	; 0x24
 80041aa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80041ae:	1812      	adds	r2, r2, r0
 80041b0:	eb41 0303 	adc.w	r3, r1, r3
 80041b4:	f04f 0400 	mov.w	r4, #0
 80041b8:	f04f 0500 	mov.w	r5, #0
 80041bc:	00dd      	lsls	r5, r3, #3
 80041be:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80041c2:	00d4      	lsls	r4, r2, #3
 80041c4:	4622      	mov	r2, r4
 80041c6:	462b      	mov	r3, r5
 80041c8:	1814      	adds	r4, r2, r0
 80041ca:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 80041ce:	414b      	adcs	r3, r1
 80041d0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80041d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80041d8:	685b      	ldr	r3, [r3, #4]
 80041da:	4618      	mov	r0, r3
 80041dc:	f04f 0100 	mov.w	r1, #0
 80041e0:	f04f 0200 	mov.w	r2, #0
 80041e4:	f04f 0300 	mov.w	r3, #0
 80041e8:	008b      	lsls	r3, r1, #2
 80041ea:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80041ee:	0082      	lsls	r2, r0, #2
 80041f0:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 80041f4:	f7fc fcd8 	bl	8000ba8 <__aeabi_uldivmod>
 80041f8:	4602      	mov	r2, r0
 80041fa:	460b      	mov	r3, r1
 80041fc:	4b96      	ldr	r3, [pc, #600]	; (8004458 <UART_SetConfig+0x734>)
 80041fe:	fba3 1302 	umull	r1, r3, r3, r2
 8004202:	095b      	lsrs	r3, r3, #5
 8004204:	2164      	movs	r1, #100	; 0x64
 8004206:	fb01 f303 	mul.w	r3, r1, r3
 800420a:	1ad3      	subs	r3, r2, r3
 800420c:	011b      	lsls	r3, r3, #4
 800420e:	3332      	adds	r3, #50	; 0x32
 8004210:	4a91      	ldr	r2, [pc, #580]	; (8004458 <UART_SetConfig+0x734>)
 8004212:	fba2 2303 	umull	r2, r3, r2, r3
 8004216:	095b      	lsrs	r3, r3, #5
 8004218:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800421c:	441e      	add	r6, r3
 800421e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004222:	4618      	mov	r0, r3
 8004224:	f04f 0100 	mov.w	r1, #0
 8004228:	4602      	mov	r2, r0
 800422a:	460b      	mov	r3, r1
 800422c:	1894      	adds	r4, r2, r2
 800422e:	61bc      	str	r4, [r7, #24]
 8004230:	415b      	adcs	r3, r3
 8004232:	61fb      	str	r3, [r7, #28]
 8004234:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004238:	1812      	adds	r2, r2, r0
 800423a:	eb41 0303 	adc.w	r3, r1, r3
 800423e:	f04f 0400 	mov.w	r4, #0
 8004242:	f04f 0500 	mov.w	r5, #0
 8004246:	00dd      	lsls	r5, r3, #3
 8004248:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800424c:	00d4      	lsls	r4, r2, #3
 800424e:	4622      	mov	r2, r4
 8004250:	462b      	mov	r3, r5
 8004252:	1814      	adds	r4, r2, r0
 8004254:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
 8004258:	414b      	adcs	r3, r1
 800425a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800425e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004262:	685b      	ldr	r3, [r3, #4]
 8004264:	4618      	mov	r0, r3
 8004266:	f04f 0100 	mov.w	r1, #0
 800426a:	f04f 0200 	mov.w	r2, #0
 800426e:	f04f 0300 	mov.w	r3, #0
 8004272:	008b      	lsls	r3, r1, #2
 8004274:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004278:	0082      	lsls	r2, r0, #2
 800427a:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 800427e:	f7fc fc93 	bl	8000ba8 <__aeabi_uldivmod>
 8004282:	4602      	mov	r2, r0
 8004284:	460b      	mov	r3, r1
 8004286:	4b74      	ldr	r3, [pc, #464]	; (8004458 <UART_SetConfig+0x734>)
 8004288:	fba3 1302 	umull	r1, r3, r3, r2
 800428c:	095b      	lsrs	r3, r3, #5
 800428e:	2164      	movs	r1, #100	; 0x64
 8004290:	fb01 f303 	mul.w	r3, r1, r3
 8004294:	1ad3      	subs	r3, r2, r3
 8004296:	011b      	lsls	r3, r3, #4
 8004298:	3332      	adds	r3, #50	; 0x32
 800429a:	4a6f      	ldr	r2, [pc, #444]	; (8004458 <UART_SetConfig+0x734>)
 800429c:	fba2 2303 	umull	r2, r3, r2, r3
 80042a0:	095b      	lsrs	r3, r3, #5
 80042a2:	f003 020f 	and.w	r2, r3, #15
 80042a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	4432      	add	r2, r6
 80042ae:	609a      	str	r2, [r3, #8]
 80042b0:	e0c9      	b.n	8004446 <UART_SetConfig+0x722>
      pclk = HAL_RCC_GetPCLK1Freq();
 80042b2:	f7fe ffd1 	bl	8003258 <HAL_RCC_GetPCLK1Freq>
 80042b6:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80042ba:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80042be:	461c      	mov	r4, r3
 80042c0:	f04f 0500 	mov.w	r5, #0
 80042c4:	4622      	mov	r2, r4
 80042c6:	462b      	mov	r3, r5
 80042c8:	1891      	adds	r1, r2, r2
 80042ca:	6139      	str	r1, [r7, #16]
 80042cc:	415b      	adcs	r3, r3
 80042ce:	617b      	str	r3, [r7, #20]
 80042d0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80042d4:	1912      	adds	r2, r2, r4
 80042d6:	eb45 0303 	adc.w	r3, r5, r3
 80042da:	f04f 0000 	mov.w	r0, #0
 80042de:	f04f 0100 	mov.w	r1, #0
 80042e2:	00d9      	lsls	r1, r3, #3
 80042e4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80042e8:	00d0      	lsls	r0, r2, #3
 80042ea:	4602      	mov	r2, r0
 80042ec:	460b      	mov	r3, r1
 80042ee:	eb12 0804 	adds.w	r8, r2, r4
 80042f2:	eb43 0905 	adc.w	r9, r3, r5
 80042f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80042fa:	685b      	ldr	r3, [r3, #4]
 80042fc:	4618      	mov	r0, r3
 80042fe:	f04f 0100 	mov.w	r1, #0
 8004302:	f04f 0200 	mov.w	r2, #0
 8004306:	f04f 0300 	mov.w	r3, #0
 800430a:	008b      	lsls	r3, r1, #2
 800430c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004310:	0082      	lsls	r2, r0, #2
 8004312:	4640      	mov	r0, r8
 8004314:	4649      	mov	r1, r9
 8004316:	f7fc fc47 	bl	8000ba8 <__aeabi_uldivmod>
 800431a:	4602      	mov	r2, r0
 800431c:	460b      	mov	r3, r1
 800431e:	4b4e      	ldr	r3, [pc, #312]	; (8004458 <UART_SetConfig+0x734>)
 8004320:	fba3 2302 	umull	r2, r3, r3, r2
 8004324:	095b      	lsrs	r3, r3, #5
 8004326:	011e      	lsls	r6, r3, #4
 8004328:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800432c:	4618      	mov	r0, r3
 800432e:	f04f 0100 	mov.w	r1, #0
 8004332:	4602      	mov	r2, r0
 8004334:	460b      	mov	r3, r1
 8004336:	1894      	adds	r4, r2, r2
 8004338:	60bc      	str	r4, [r7, #8]
 800433a:	415b      	adcs	r3, r3
 800433c:	60fb      	str	r3, [r7, #12]
 800433e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004342:	1812      	adds	r2, r2, r0
 8004344:	eb41 0303 	adc.w	r3, r1, r3
 8004348:	f04f 0400 	mov.w	r4, #0
 800434c:	f04f 0500 	mov.w	r5, #0
 8004350:	00dd      	lsls	r5, r3, #3
 8004352:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004356:	00d4      	lsls	r4, r2, #3
 8004358:	4622      	mov	r2, r4
 800435a:	462b      	mov	r3, r5
 800435c:	1814      	adds	r4, r2, r0
 800435e:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 8004362:	414b      	adcs	r3, r1
 8004364:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004368:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800436c:	685b      	ldr	r3, [r3, #4]
 800436e:	4618      	mov	r0, r3
 8004370:	f04f 0100 	mov.w	r1, #0
 8004374:	f04f 0200 	mov.w	r2, #0
 8004378:	f04f 0300 	mov.w	r3, #0
 800437c:	008b      	lsls	r3, r1, #2
 800437e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004382:	0082      	lsls	r2, r0, #2
 8004384:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004388:	f7fc fc0e 	bl	8000ba8 <__aeabi_uldivmod>
 800438c:	4602      	mov	r2, r0
 800438e:	460b      	mov	r3, r1
 8004390:	4b31      	ldr	r3, [pc, #196]	; (8004458 <UART_SetConfig+0x734>)
 8004392:	fba3 1302 	umull	r1, r3, r3, r2
 8004396:	095b      	lsrs	r3, r3, #5
 8004398:	2164      	movs	r1, #100	; 0x64
 800439a:	fb01 f303 	mul.w	r3, r1, r3
 800439e:	1ad3      	subs	r3, r2, r3
 80043a0:	011b      	lsls	r3, r3, #4
 80043a2:	3332      	adds	r3, #50	; 0x32
 80043a4:	4a2c      	ldr	r2, [pc, #176]	; (8004458 <UART_SetConfig+0x734>)
 80043a6:	fba2 2303 	umull	r2, r3, r2, r3
 80043aa:	095b      	lsrs	r3, r3, #5
 80043ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80043b0:	441e      	add	r6, r3
 80043b2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80043b6:	4618      	mov	r0, r3
 80043b8:	f04f 0100 	mov.w	r1, #0
 80043bc:	4602      	mov	r2, r0
 80043be:	460b      	mov	r3, r1
 80043c0:	1894      	adds	r4, r2, r2
 80043c2:	603c      	str	r4, [r7, #0]
 80043c4:	415b      	adcs	r3, r3
 80043c6:	607b      	str	r3, [r7, #4]
 80043c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80043cc:	1812      	adds	r2, r2, r0
 80043ce:	eb41 0303 	adc.w	r3, r1, r3
 80043d2:	f04f 0400 	mov.w	r4, #0
 80043d6:	f04f 0500 	mov.w	r5, #0
 80043da:	00dd      	lsls	r5, r3, #3
 80043dc:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80043e0:	00d4      	lsls	r4, r2, #3
 80043e2:	4622      	mov	r2, r4
 80043e4:	462b      	mov	r3, r5
 80043e6:	1814      	adds	r4, r2, r0
 80043e8:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
 80043ec:	414b      	adcs	r3, r1
 80043ee:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80043f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80043f6:	685b      	ldr	r3, [r3, #4]
 80043f8:	4618      	mov	r0, r3
 80043fa:	f04f 0100 	mov.w	r1, #0
 80043fe:	f04f 0200 	mov.w	r2, #0
 8004402:	f04f 0300 	mov.w	r3, #0
 8004406:	008b      	lsls	r3, r1, #2
 8004408:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800440c:	0082      	lsls	r2, r0, #2
 800440e:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8004412:	f7fc fbc9 	bl	8000ba8 <__aeabi_uldivmod>
 8004416:	4602      	mov	r2, r0
 8004418:	460b      	mov	r3, r1
 800441a:	4b0f      	ldr	r3, [pc, #60]	; (8004458 <UART_SetConfig+0x734>)
 800441c:	fba3 1302 	umull	r1, r3, r3, r2
 8004420:	095b      	lsrs	r3, r3, #5
 8004422:	2164      	movs	r1, #100	; 0x64
 8004424:	fb01 f303 	mul.w	r3, r1, r3
 8004428:	1ad3      	subs	r3, r2, r3
 800442a:	011b      	lsls	r3, r3, #4
 800442c:	3332      	adds	r3, #50	; 0x32
 800442e:	4a0a      	ldr	r2, [pc, #40]	; (8004458 <UART_SetConfig+0x734>)
 8004430:	fba2 2303 	umull	r2, r3, r2, r3
 8004434:	095b      	lsrs	r3, r3, #5
 8004436:	f003 020f 	and.w	r2, r3, #15
 800443a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	4432      	add	r2, r6
 8004442:	609a      	str	r2, [r3, #8]
}
 8004444:	e7ff      	b.n	8004446 <UART_SetConfig+0x722>
 8004446:	bf00      	nop
 8004448:	37f4      	adds	r7, #244	; 0xf4
 800444a:	46bd      	mov	sp, r7
 800444c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004450:	40011000 	.word	0x40011000
 8004454:	40011400 	.word	0x40011400
 8004458:	51eb851f 	.word	0x51eb851f

0800445c <__errno>:
 800445c:	4b01      	ldr	r3, [pc, #4]	; (8004464 <__errno+0x8>)
 800445e:	6818      	ldr	r0, [r3, #0]
 8004460:	4770      	bx	lr
 8004462:	bf00      	nop
 8004464:	2000000c 	.word	0x2000000c

08004468 <__libc_init_array>:
 8004468:	b570      	push	{r4, r5, r6, lr}
 800446a:	4d0d      	ldr	r5, [pc, #52]	; (80044a0 <__libc_init_array+0x38>)
 800446c:	4c0d      	ldr	r4, [pc, #52]	; (80044a4 <__libc_init_array+0x3c>)
 800446e:	1b64      	subs	r4, r4, r5
 8004470:	10a4      	asrs	r4, r4, #2
 8004472:	2600      	movs	r6, #0
 8004474:	42a6      	cmp	r6, r4
 8004476:	d109      	bne.n	800448c <__libc_init_array+0x24>
 8004478:	4d0b      	ldr	r5, [pc, #44]	; (80044a8 <__libc_init_array+0x40>)
 800447a:	4c0c      	ldr	r4, [pc, #48]	; (80044ac <__libc_init_array+0x44>)
 800447c:	f002 feb6 	bl	80071ec <_init>
 8004480:	1b64      	subs	r4, r4, r5
 8004482:	10a4      	asrs	r4, r4, #2
 8004484:	2600      	movs	r6, #0
 8004486:	42a6      	cmp	r6, r4
 8004488:	d105      	bne.n	8004496 <__libc_init_array+0x2e>
 800448a:	bd70      	pop	{r4, r5, r6, pc}
 800448c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004490:	4798      	blx	r3
 8004492:	3601      	adds	r6, #1
 8004494:	e7ee      	b.n	8004474 <__libc_init_array+0xc>
 8004496:	f855 3b04 	ldr.w	r3, [r5], #4
 800449a:	4798      	blx	r3
 800449c:	3601      	adds	r6, #1
 800449e:	e7f2      	b.n	8004486 <__libc_init_array+0x1e>
 80044a0:	0800764c 	.word	0x0800764c
 80044a4:	0800764c 	.word	0x0800764c
 80044a8:	0800764c 	.word	0x0800764c
 80044ac:	08007650 	.word	0x08007650

080044b0 <memset>:
 80044b0:	4402      	add	r2, r0
 80044b2:	4603      	mov	r3, r0
 80044b4:	4293      	cmp	r3, r2
 80044b6:	d100      	bne.n	80044ba <memset+0xa>
 80044b8:	4770      	bx	lr
 80044ba:	f803 1b01 	strb.w	r1, [r3], #1
 80044be:	e7f9      	b.n	80044b4 <memset+0x4>

080044c0 <__cvt>:
 80044c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80044c4:	ec55 4b10 	vmov	r4, r5, d0
 80044c8:	2d00      	cmp	r5, #0
 80044ca:	460e      	mov	r6, r1
 80044cc:	4619      	mov	r1, r3
 80044ce:	462b      	mov	r3, r5
 80044d0:	bfbb      	ittet	lt
 80044d2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80044d6:	461d      	movlt	r5, r3
 80044d8:	2300      	movge	r3, #0
 80044da:	232d      	movlt	r3, #45	; 0x2d
 80044dc:	700b      	strb	r3, [r1, #0]
 80044de:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80044e0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80044e4:	4691      	mov	r9, r2
 80044e6:	f023 0820 	bic.w	r8, r3, #32
 80044ea:	bfbc      	itt	lt
 80044ec:	4622      	movlt	r2, r4
 80044ee:	4614      	movlt	r4, r2
 80044f0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80044f4:	d005      	beq.n	8004502 <__cvt+0x42>
 80044f6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80044fa:	d100      	bne.n	80044fe <__cvt+0x3e>
 80044fc:	3601      	adds	r6, #1
 80044fe:	2102      	movs	r1, #2
 8004500:	e000      	b.n	8004504 <__cvt+0x44>
 8004502:	2103      	movs	r1, #3
 8004504:	ab03      	add	r3, sp, #12
 8004506:	9301      	str	r3, [sp, #4]
 8004508:	ab02      	add	r3, sp, #8
 800450a:	9300      	str	r3, [sp, #0]
 800450c:	ec45 4b10 	vmov	d0, r4, r5
 8004510:	4653      	mov	r3, sl
 8004512:	4632      	mov	r2, r6
 8004514:	f000 fcec 	bl	8004ef0 <_dtoa_r>
 8004518:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800451c:	4607      	mov	r7, r0
 800451e:	d102      	bne.n	8004526 <__cvt+0x66>
 8004520:	f019 0f01 	tst.w	r9, #1
 8004524:	d022      	beq.n	800456c <__cvt+0xac>
 8004526:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800452a:	eb07 0906 	add.w	r9, r7, r6
 800452e:	d110      	bne.n	8004552 <__cvt+0x92>
 8004530:	783b      	ldrb	r3, [r7, #0]
 8004532:	2b30      	cmp	r3, #48	; 0x30
 8004534:	d10a      	bne.n	800454c <__cvt+0x8c>
 8004536:	2200      	movs	r2, #0
 8004538:	2300      	movs	r3, #0
 800453a:	4620      	mov	r0, r4
 800453c:	4629      	mov	r1, r5
 800453e:	f7fc fac3 	bl	8000ac8 <__aeabi_dcmpeq>
 8004542:	b918      	cbnz	r0, 800454c <__cvt+0x8c>
 8004544:	f1c6 0601 	rsb	r6, r6, #1
 8004548:	f8ca 6000 	str.w	r6, [sl]
 800454c:	f8da 3000 	ldr.w	r3, [sl]
 8004550:	4499      	add	r9, r3
 8004552:	2200      	movs	r2, #0
 8004554:	2300      	movs	r3, #0
 8004556:	4620      	mov	r0, r4
 8004558:	4629      	mov	r1, r5
 800455a:	f7fc fab5 	bl	8000ac8 <__aeabi_dcmpeq>
 800455e:	b108      	cbz	r0, 8004564 <__cvt+0xa4>
 8004560:	f8cd 900c 	str.w	r9, [sp, #12]
 8004564:	2230      	movs	r2, #48	; 0x30
 8004566:	9b03      	ldr	r3, [sp, #12]
 8004568:	454b      	cmp	r3, r9
 800456a:	d307      	bcc.n	800457c <__cvt+0xbc>
 800456c:	9b03      	ldr	r3, [sp, #12]
 800456e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004570:	1bdb      	subs	r3, r3, r7
 8004572:	4638      	mov	r0, r7
 8004574:	6013      	str	r3, [r2, #0]
 8004576:	b004      	add	sp, #16
 8004578:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800457c:	1c59      	adds	r1, r3, #1
 800457e:	9103      	str	r1, [sp, #12]
 8004580:	701a      	strb	r2, [r3, #0]
 8004582:	e7f0      	b.n	8004566 <__cvt+0xa6>

08004584 <__exponent>:
 8004584:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004586:	4603      	mov	r3, r0
 8004588:	2900      	cmp	r1, #0
 800458a:	bfb8      	it	lt
 800458c:	4249      	neglt	r1, r1
 800458e:	f803 2b02 	strb.w	r2, [r3], #2
 8004592:	bfb4      	ite	lt
 8004594:	222d      	movlt	r2, #45	; 0x2d
 8004596:	222b      	movge	r2, #43	; 0x2b
 8004598:	2909      	cmp	r1, #9
 800459a:	7042      	strb	r2, [r0, #1]
 800459c:	dd2a      	ble.n	80045f4 <__exponent+0x70>
 800459e:	f10d 0407 	add.w	r4, sp, #7
 80045a2:	46a4      	mov	ip, r4
 80045a4:	270a      	movs	r7, #10
 80045a6:	46a6      	mov	lr, r4
 80045a8:	460a      	mov	r2, r1
 80045aa:	fb91 f6f7 	sdiv	r6, r1, r7
 80045ae:	fb07 1516 	mls	r5, r7, r6, r1
 80045b2:	3530      	adds	r5, #48	; 0x30
 80045b4:	2a63      	cmp	r2, #99	; 0x63
 80045b6:	f104 34ff 	add.w	r4, r4, #4294967295
 80045ba:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80045be:	4631      	mov	r1, r6
 80045c0:	dcf1      	bgt.n	80045a6 <__exponent+0x22>
 80045c2:	3130      	adds	r1, #48	; 0x30
 80045c4:	f1ae 0502 	sub.w	r5, lr, #2
 80045c8:	f804 1c01 	strb.w	r1, [r4, #-1]
 80045cc:	1c44      	adds	r4, r0, #1
 80045ce:	4629      	mov	r1, r5
 80045d0:	4561      	cmp	r1, ip
 80045d2:	d30a      	bcc.n	80045ea <__exponent+0x66>
 80045d4:	f10d 0209 	add.w	r2, sp, #9
 80045d8:	eba2 020e 	sub.w	r2, r2, lr
 80045dc:	4565      	cmp	r5, ip
 80045de:	bf88      	it	hi
 80045e0:	2200      	movhi	r2, #0
 80045e2:	4413      	add	r3, r2
 80045e4:	1a18      	subs	r0, r3, r0
 80045e6:	b003      	add	sp, #12
 80045e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80045ea:	f811 2b01 	ldrb.w	r2, [r1], #1
 80045ee:	f804 2f01 	strb.w	r2, [r4, #1]!
 80045f2:	e7ed      	b.n	80045d0 <__exponent+0x4c>
 80045f4:	2330      	movs	r3, #48	; 0x30
 80045f6:	3130      	adds	r1, #48	; 0x30
 80045f8:	7083      	strb	r3, [r0, #2]
 80045fa:	70c1      	strb	r1, [r0, #3]
 80045fc:	1d03      	adds	r3, r0, #4
 80045fe:	e7f1      	b.n	80045e4 <__exponent+0x60>

08004600 <_printf_float>:
 8004600:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004604:	ed2d 8b02 	vpush	{d8}
 8004608:	b08d      	sub	sp, #52	; 0x34
 800460a:	460c      	mov	r4, r1
 800460c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8004610:	4616      	mov	r6, r2
 8004612:	461f      	mov	r7, r3
 8004614:	4605      	mov	r5, r0
 8004616:	f001 fa57 	bl	8005ac8 <_localeconv_r>
 800461a:	f8d0 a000 	ldr.w	sl, [r0]
 800461e:	4650      	mov	r0, sl
 8004620:	f7fb fdd6 	bl	80001d0 <strlen>
 8004624:	2300      	movs	r3, #0
 8004626:	930a      	str	r3, [sp, #40]	; 0x28
 8004628:	6823      	ldr	r3, [r4, #0]
 800462a:	9305      	str	r3, [sp, #20]
 800462c:	f8d8 3000 	ldr.w	r3, [r8]
 8004630:	f894 b018 	ldrb.w	fp, [r4, #24]
 8004634:	3307      	adds	r3, #7
 8004636:	f023 0307 	bic.w	r3, r3, #7
 800463a:	f103 0208 	add.w	r2, r3, #8
 800463e:	f8c8 2000 	str.w	r2, [r8]
 8004642:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004646:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800464a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800464e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004652:	9307      	str	r3, [sp, #28]
 8004654:	f8cd 8018 	str.w	r8, [sp, #24]
 8004658:	ee08 0a10 	vmov	s16, r0
 800465c:	4b9f      	ldr	r3, [pc, #636]	; (80048dc <_printf_float+0x2dc>)
 800465e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004662:	f04f 32ff 	mov.w	r2, #4294967295
 8004666:	f7fc fa61 	bl	8000b2c <__aeabi_dcmpun>
 800466a:	bb88      	cbnz	r0, 80046d0 <_printf_float+0xd0>
 800466c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004670:	4b9a      	ldr	r3, [pc, #616]	; (80048dc <_printf_float+0x2dc>)
 8004672:	f04f 32ff 	mov.w	r2, #4294967295
 8004676:	f7fc fa3b 	bl	8000af0 <__aeabi_dcmple>
 800467a:	bb48      	cbnz	r0, 80046d0 <_printf_float+0xd0>
 800467c:	2200      	movs	r2, #0
 800467e:	2300      	movs	r3, #0
 8004680:	4640      	mov	r0, r8
 8004682:	4649      	mov	r1, r9
 8004684:	f7fc fa2a 	bl	8000adc <__aeabi_dcmplt>
 8004688:	b110      	cbz	r0, 8004690 <_printf_float+0x90>
 800468a:	232d      	movs	r3, #45	; 0x2d
 800468c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004690:	4b93      	ldr	r3, [pc, #588]	; (80048e0 <_printf_float+0x2e0>)
 8004692:	4894      	ldr	r0, [pc, #592]	; (80048e4 <_printf_float+0x2e4>)
 8004694:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8004698:	bf94      	ite	ls
 800469a:	4698      	movls	r8, r3
 800469c:	4680      	movhi	r8, r0
 800469e:	2303      	movs	r3, #3
 80046a0:	6123      	str	r3, [r4, #16]
 80046a2:	9b05      	ldr	r3, [sp, #20]
 80046a4:	f023 0204 	bic.w	r2, r3, #4
 80046a8:	6022      	str	r2, [r4, #0]
 80046aa:	f04f 0900 	mov.w	r9, #0
 80046ae:	9700      	str	r7, [sp, #0]
 80046b0:	4633      	mov	r3, r6
 80046b2:	aa0b      	add	r2, sp, #44	; 0x2c
 80046b4:	4621      	mov	r1, r4
 80046b6:	4628      	mov	r0, r5
 80046b8:	f000 f9d8 	bl	8004a6c <_printf_common>
 80046bc:	3001      	adds	r0, #1
 80046be:	f040 8090 	bne.w	80047e2 <_printf_float+0x1e2>
 80046c2:	f04f 30ff 	mov.w	r0, #4294967295
 80046c6:	b00d      	add	sp, #52	; 0x34
 80046c8:	ecbd 8b02 	vpop	{d8}
 80046cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80046d0:	4642      	mov	r2, r8
 80046d2:	464b      	mov	r3, r9
 80046d4:	4640      	mov	r0, r8
 80046d6:	4649      	mov	r1, r9
 80046d8:	f7fc fa28 	bl	8000b2c <__aeabi_dcmpun>
 80046dc:	b140      	cbz	r0, 80046f0 <_printf_float+0xf0>
 80046de:	464b      	mov	r3, r9
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	bfbc      	itt	lt
 80046e4:	232d      	movlt	r3, #45	; 0x2d
 80046e6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80046ea:	487f      	ldr	r0, [pc, #508]	; (80048e8 <_printf_float+0x2e8>)
 80046ec:	4b7f      	ldr	r3, [pc, #508]	; (80048ec <_printf_float+0x2ec>)
 80046ee:	e7d1      	b.n	8004694 <_printf_float+0x94>
 80046f0:	6863      	ldr	r3, [r4, #4]
 80046f2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80046f6:	9206      	str	r2, [sp, #24]
 80046f8:	1c5a      	adds	r2, r3, #1
 80046fa:	d13f      	bne.n	800477c <_printf_float+0x17c>
 80046fc:	2306      	movs	r3, #6
 80046fe:	6063      	str	r3, [r4, #4]
 8004700:	9b05      	ldr	r3, [sp, #20]
 8004702:	6861      	ldr	r1, [r4, #4]
 8004704:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004708:	2300      	movs	r3, #0
 800470a:	9303      	str	r3, [sp, #12]
 800470c:	ab0a      	add	r3, sp, #40	; 0x28
 800470e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8004712:	ab09      	add	r3, sp, #36	; 0x24
 8004714:	ec49 8b10 	vmov	d0, r8, r9
 8004718:	9300      	str	r3, [sp, #0]
 800471a:	6022      	str	r2, [r4, #0]
 800471c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004720:	4628      	mov	r0, r5
 8004722:	f7ff fecd 	bl	80044c0 <__cvt>
 8004726:	9b06      	ldr	r3, [sp, #24]
 8004728:	9909      	ldr	r1, [sp, #36]	; 0x24
 800472a:	2b47      	cmp	r3, #71	; 0x47
 800472c:	4680      	mov	r8, r0
 800472e:	d108      	bne.n	8004742 <_printf_float+0x142>
 8004730:	1cc8      	adds	r0, r1, #3
 8004732:	db02      	blt.n	800473a <_printf_float+0x13a>
 8004734:	6863      	ldr	r3, [r4, #4]
 8004736:	4299      	cmp	r1, r3
 8004738:	dd41      	ble.n	80047be <_printf_float+0x1be>
 800473a:	f1ab 0b02 	sub.w	fp, fp, #2
 800473e:	fa5f fb8b 	uxtb.w	fp, fp
 8004742:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004746:	d820      	bhi.n	800478a <_printf_float+0x18a>
 8004748:	3901      	subs	r1, #1
 800474a:	465a      	mov	r2, fp
 800474c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004750:	9109      	str	r1, [sp, #36]	; 0x24
 8004752:	f7ff ff17 	bl	8004584 <__exponent>
 8004756:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004758:	1813      	adds	r3, r2, r0
 800475a:	2a01      	cmp	r2, #1
 800475c:	4681      	mov	r9, r0
 800475e:	6123      	str	r3, [r4, #16]
 8004760:	dc02      	bgt.n	8004768 <_printf_float+0x168>
 8004762:	6822      	ldr	r2, [r4, #0]
 8004764:	07d2      	lsls	r2, r2, #31
 8004766:	d501      	bpl.n	800476c <_printf_float+0x16c>
 8004768:	3301      	adds	r3, #1
 800476a:	6123      	str	r3, [r4, #16]
 800476c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8004770:	2b00      	cmp	r3, #0
 8004772:	d09c      	beq.n	80046ae <_printf_float+0xae>
 8004774:	232d      	movs	r3, #45	; 0x2d
 8004776:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800477a:	e798      	b.n	80046ae <_printf_float+0xae>
 800477c:	9a06      	ldr	r2, [sp, #24]
 800477e:	2a47      	cmp	r2, #71	; 0x47
 8004780:	d1be      	bne.n	8004700 <_printf_float+0x100>
 8004782:	2b00      	cmp	r3, #0
 8004784:	d1bc      	bne.n	8004700 <_printf_float+0x100>
 8004786:	2301      	movs	r3, #1
 8004788:	e7b9      	b.n	80046fe <_printf_float+0xfe>
 800478a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800478e:	d118      	bne.n	80047c2 <_printf_float+0x1c2>
 8004790:	2900      	cmp	r1, #0
 8004792:	6863      	ldr	r3, [r4, #4]
 8004794:	dd0b      	ble.n	80047ae <_printf_float+0x1ae>
 8004796:	6121      	str	r1, [r4, #16]
 8004798:	b913      	cbnz	r3, 80047a0 <_printf_float+0x1a0>
 800479a:	6822      	ldr	r2, [r4, #0]
 800479c:	07d0      	lsls	r0, r2, #31
 800479e:	d502      	bpl.n	80047a6 <_printf_float+0x1a6>
 80047a0:	3301      	adds	r3, #1
 80047a2:	440b      	add	r3, r1
 80047a4:	6123      	str	r3, [r4, #16]
 80047a6:	65a1      	str	r1, [r4, #88]	; 0x58
 80047a8:	f04f 0900 	mov.w	r9, #0
 80047ac:	e7de      	b.n	800476c <_printf_float+0x16c>
 80047ae:	b913      	cbnz	r3, 80047b6 <_printf_float+0x1b6>
 80047b0:	6822      	ldr	r2, [r4, #0]
 80047b2:	07d2      	lsls	r2, r2, #31
 80047b4:	d501      	bpl.n	80047ba <_printf_float+0x1ba>
 80047b6:	3302      	adds	r3, #2
 80047b8:	e7f4      	b.n	80047a4 <_printf_float+0x1a4>
 80047ba:	2301      	movs	r3, #1
 80047bc:	e7f2      	b.n	80047a4 <_printf_float+0x1a4>
 80047be:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80047c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80047c4:	4299      	cmp	r1, r3
 80047c6:	db05      	blt.n	80047d4 <_printf_float+0x1d4>
 80047c8:	6823      	ldr	r3, [r4, #0]
 80047ca:	6121      	str	r1, [r4, #16]
 80047cc:	07d8      	lsls	r0, r3, #31
 80047ce:	d5ea      	bpl.n	80047a6 <_printf_float+0x1a6>
 80047d0:	1c4b      	adds	r3, r1, #1
 80047d2:	e7e7      	b.n	80047a4 <_printf_float+0x1a4>
 80047d4:	2900      	cmp	r1, #0
 80047d6:	bfd4      	ite	le
 80047d8:	f1c1 0202 	rsble	r2, r1, #2
 80047dc:	2201      	movgt	r2, #1
 80047de:	4413      	add	r3, r2
 80047e0:	e7e0      	b.n	80047a4 <_printf_float+0x1a4>
 80047e2:	6823      	ldr	r3, [r4, #0]
 80047e4:	055a      	lsls	r2, r3, #21
 80047e6:	d407      	bmi.n	80047f8 <_printf_float+0x1f8>
 80047e8:	6923      	ldr	r3, [r4, #16]
 80047ea:	4642      	mov	r2, r8
 80047ec:	4631      	mov	r1, r6
 80047ee:	4628      	mov	r0, r5
 80047f0:	47b8      	blx	r7
 80047f2:	3001      	adds	r0, #1
 80047f4:	d12c      	bne.n	8004850 <_printf_float+0x250>
 80047f6:	e764      	b.n	80046c2 <_printf_float+0xc2>
 80047f8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80047fc:	f240 80e0 	bls.w	80049c0 <_printf_float+0x3c0>
 8004800:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004804:	2200      	movs	r2, #0
 8004806:	2300      	movs	r3, #0
 8004808:	f7fc f95e 	bl	8000ac8 <__aeabi_dcmpeq>
 800480c:	2800      	cmp	r0, #0
 800480e:	d034      	beq.n	800487a <_printf_float+0x27a>
 8004810:	4a37      	ldr	r2, [pc, #220]	; (80048f0 <_printf_float+0x2f0>)
 8004812:	2301      	movs	r3, #1
 8004814:	4631      	mov	r1, r6
 8004816:	4628      	mov	r0, r5
 8004818:	47b8      	blx	r7
 800481a:	3001      	adds	r0, #1
 800481c:	f43f af51 	beq.w	80046c2 <_printf_float+0xc2>
 8004820:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004824:	429a      	cmp	r2, r3
 8004826:	db02      	blt.n	800482e <_printf_float+0x22e>
 8004828:	6823      	ldr	r3, [r4, #0]
 800482a:	07d8      	lsls	r0, r3, #31
 800482c:	d510      	bpl.n	8004850 <_printf_float+0x250>
 800482e:	ee18 3a10 	vmov	r3, s16
 8004832:	4652      	mov	r2, sl
 8004834:	4631      	mov	r1, r6
 8004836:	4628      	mov	r0, r5
 8004838:	47b8      	blx	r7
 800483a:	3001      	adds	r0, #1
 800483c:	f43f af41 	beq.w	80046c2 <_printf_float+0xc2>
 8004840:	f04f 0800 	mov.w	r8, #0
 8004844:	f104 091a 	add.w	r9, r4, #26
 8004848:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800484a:	3b01      	subs	r3, #1
 800484c:	4543      	cmp	r3, r8
 800484e:	dc09      	bgt.n	8004864 <_printf_float+0x264>
 8004850:	6823      	ldr	r3, [r4, #0]
 8004852:	079b      	lsls	r3, r3, #30
 8004854:	f100 8105 	bmi.w	8004a62 <_printf_float+0x462>
 8004858:	68e0      	ldr	r0, [r4, #12]
 800485a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800485c:	4298      	cmp	r0, r3
 800485e:	bfb8      	it	lt
 8004860:	4618      	movlt	r0, r3
 8004862:	e730      	b.n	80046c6 <_printf_float+0xc6>
 8004864:	2301      	movs	r3, #1
 8004866:	464a      	mov	r2, r9
 8004868:	4631      	mov	r1, r6
 800486a:	4628      	mov	r0, r5
 800486c:	47b8      	blx	r7
 800486e:	3001      	adds	r0, #1
 8004870:	f43f af27 	beq.w	80046c2 <_printf_float+0xc2>
 8004874:	f108 0801 	add.w	r8, r8, #1
 8004878:	e7e6      	b.n	8004848 <_printf_float+0x248>
 800487a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800487c:	2b00      	cmp	r3, #0
 800487e:	dc39      	bgt.n	80048f4 <_printf_float+0x2f4>
 8004880:	4a1b      	ldr	r2, [pc, #108]	; (80048f0 <_printf_float+0x2f0>)
 8004882:	2301      	movs	r3, #1
 8004884:	4631      	mov	r1, r6
 8004886:	4628      	mov	r0, r5
 8004888:	47b8      	blx	r7
 800488a:	3001      	adds	r0, #1
 800488c:	f43f af19 	beq.w	80046c2 <_printf_float+0xc2>
 8004890:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004894:	4313      	orrs	r3, r2
 8004896:	d102      	bne.n	800489e <_printf_float+0x29e>
 8004898:	6823      	ldr	r3, [r4, #0]
 800489a:	07d9      	lsls	r1, r3, #31
 800489c:	d5d8      	bpl.n	8004850 <_printf_float+0x250>
 800489e:	ee18 3a10 	vmov	r3, s16
 80048a2:	4652      	mov	r2, sl
 80048a4:	4631      	mov	r1, r6
 80048a6:	4628      	mov	r0, r5
 80048a8:	47b8      	blx	r7
 80048aa:	3001      	adds	r0, #1
 80048ac:	f43f af09 	beq.w	80046c2 <_printf_float+0xc2>
 80048b0:	f04f 0900 	mov.w	r9, #0
 80048b4:	f104 0a1a 	add.w	sl, r4, #26
 80048b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80048ba:	425b      	negs	r3, r3
 80048bc:	454b      	cmp	r3, r9
 80048be:	dc01      	bgt.n	80048c4 <_printf_float+0x2c4>
 80048c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80048c2:	e792      	b.n	80047ea <_printf_float+0x1ea>
 80048c4:	2301      	movs	r3, #1
 80048c6:	4652      	mov	r2, sl
 80048c8:	4631      	mov	r1, r6
 80048ca:	4628      	mov	r0, r5
 80048cc:	47b8      	blx	r7
 80048ce:	3001      	adds	r0, #1
 80048d0:	f43f aef7 	beq.w	80046c2 <_printf_float+0xc2>
 80048d4:	f109 0901 	add.w	r9, r9, #1
 80048d8:	e7ee      	b.n	80048b8 <_printf_float+0x2b8>
 80048da:	bf00      	nop
 80048dc:	7fefffff 	.word	0x7fefffff
 80048e0:	08007264 	.word	0x08007264
 80048e4:	08007268 	.word	0x08007268
 80048e8:	08007270 	.word	0x08007270
 80048ec:	0800726c 	.word	0x0800726c
 80048f0:	08007274 	.word	0x08007274
 80048f4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80048f6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80048f8:	429a      	cmp	r2, r3
 80048fa:	bfa8      	it	ge
 80048fc:	461a      	movge	r2, r3
 80048fe:	2a00      	cmp	r2, #0
 8004900:	4691      	mov	r9, r2
 8004902:	dc37      	bgt.n	8004974 <_printf_float+0x374>
 8004904:	f04f 0b00 	mov.w	fp, #0
 8004908:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800490c:	f104 021a 	add.w	r2, r4, #26
 8004910:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004912:	9305      	str	r3, [sp, #20]
 8004914:	eba3 0309 	sub.w	r3, r3, r9
 8004918:	455b      	cmp	r3, fp
 800491a:	dc33      	bgt.n	8004984 <_printf_float+0x384>
 800491c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004920:	429a      	cmp	r2, r3
 8004922:	db3b      	blt.n	800499c <_printf_float+0x39c>
 8004924:	6823      	ldr	r3, [r4, #0]
 8004926:	07da      	lsls	r2, r3, #31
 8004928:	d438      	bmi.n	800499c <_printf_float+0x39c>
 800492a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800492c:	9b05      	ldr	r3, [sp, #20]
 800492e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004930:	1ad3      	subs	r3, r2, r3
 8004932:	eba2 0901 	sub.w	r9, r2, r1
 8004936:	4599      	cmp	r9, r3
 8004938:	bfa8      	it	ge
 800493a:	4699      	movge	r9, r3
 800493c:	f1b9 0f00 	cmp.w	r9, #0
 8004940:	dc35      	bgt.n	80049ae <_printf_float+0x3ae>
 8004942:	f04f 0800 	mov.w	r8, #0
 8004946:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800494a:	f104 0a1a 	add.w	sl, r4, #26
 800494e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004952:	1a9b      	subs	r3, r3, r2
 8004954:	eba3 0309 	sub.w	r3, r3, r9
 8004958:	4543      	cmp	r3, r8
 800495a:	f77f af79 	ble.w	8004850 <_printf_float+0x250>
 800495e:	2301      	movs	r3, #1
 8004960:	4652      	mov	r2, sl
 8004962:	4631      	mov	r1, r6
 8004964:	4628      	mov	r0, r5
 8004966:	47b8      	blx	r7
 8004968:	3001      	adds	r0, #1
 800496a:	f43f aeaa 	beq.w	80046c2 <_printf_float+0xc2>
 800496e:	f108 0801 	add.w	r8, r8, #1
 8004972:	e7ec      	b.n	800494e <_printf_float+0x34e>
 8004974:	4613      	mov	r3, r2
 8004976:	4631      	mov	r1, r6
 8004978:	4642      	mov	r2, r8
 800497a:	4628      	mov	r0, r5
 800497c:	47b8      	blx	r7
 800497e:	3001      	adds	r0, #1
 8004980:	d1c0      	bne.n	8004904 <_printf_float+0x304>
 8004982:	e69e      	b.n	80046c2 <_printf_float+0xc2>
 8004984:	2301      	movs	r3, #1
 8004986:	4631      	mov	r1, r6
 8004988:	4628      	mov	r0, r5
 800498a:	9205      	str	r2, [sp, #20]
 800498c:	47b8      	blx	r7
 800498e:	3001      	adds	r0, #1
 8004990:	f43f ae97 	beq.w	80046c2 <_printf_float+0xc2>
 8004994:	9a05      	ldr	r2, [sp, #20]
 8004996:	f10b 0b01 	add.w	fp, fp, #1
 800499a:	e7b9      	b.n	8004910 <_printf_float+0x310>
 800499c:	ee18 3a10 	vmov	r3, s16
 80049a0:	4652      	mov	r2, sl
 80049a2:	4631      	mov	r1, r6
 80049a4:	4628      	mov	r0, r5
 80049a6:	47b8      	blx	r7
 80049a8:	3001      	adds	r0, #1
 80049aa:	d1be      	bne.n	800492a <_printf_float+0x32a>
 80049ac:	e689      	b.n	80046c2 <_printf_float+0xc2>
 80049ae:	9a05      	ldr	r2, [sp, #20]
 80049b0:	464b      	mov	r3, r9
 80049b2:	4442      	add	r2, r8
 80049b4:	4631      	mov	r1, r6
 80049b6:	4628      	mov	r0, r5
 80049b8:	47b8      	blx	r7
 80049ba:	3001      	adds	r0, #1
 80049bc:	d1c1      	bne.n	8004942 <_printf_float+0x342>
 80049be:	e680      	b.n	80046c2 <_printf_float+0xc2>
 80049c0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80049c2:	2a01      	cmp	r2, #1
 80049c4:	dc01      	bgt.n	80049ca <_printf_float+0x3ca>
 80049c6:	07db      	lsls	r3, r3, #31
 80049c8:	d538      	bpl.n	8004a3c <_printf_float+0x43c>
 80049ca:	2301      	movs	r3, #1
 80049cc:	4642      	mov	r2, r8
 80049ce:	4631      	mov	r1, r6
 80049d0:	4628      	mov	r0, r5
 80049d2:	47b8      	blx	r7
 80049d4:	3001      	adds	r0, #1
 80049d6:	f43f ae74 	beq.w	80046c2 <_printf_float+0xc2>
 80049da:	ee18 3a10 	vmov	r3, s16
 80049de:	4652      	mov	r2, sl
 80049e0:	4631      	mov	r1, r6
 80049e2:	4628      	mov	r0, r5
 80049e4:	47b8      	blx	r7
 80049e6:	3001      	adds	r0, #1
 80049e8:	f43f ae6b 	beq.w	80046c2 <_printf_float+0xc2>
 80049ec:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80049f0:	2200      	movs	r2, #0
 80049f2:	2300      	movs	r3, #0
 80049f4:	f7fc f868 	bl	8000ac8 <__aeabi_dcmpeq>
 80049f8:	b9d8      	cbnz	r0, 8004a32 <_printf_float+0x432>
 80049fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80049fc:	f108 0201 	add.w	r2, r8, #1
 8004a00:	3b01      	subs	r3, #1
 8004a02:	4631      	mov	r1, r6
 8004a04:	4628      	mov	r0, r5
 8004a06:	47b8      	blx	r7
 8004a08:	3001      	adds	r0, #1
 8004a0a:	d10e      	bne.n	8004a2a <_printf_float+0x42a>
 8004a0c:	e659      	b.n	80046c2 <_printf_float+0xc2>
 8004a0e:	2301      	movs	r3, #1
 8004a10:	4652      	mov	r2, sl
 8004a12:	4631      	mov	r1, r6
 8004a14:	4628      	mov	r0, r5
 8004a16:	47b8      	blx	r7
 8004a18:	3001      	adds	r0, #1
 8004a1a:	f43f ae52 	beq.w	80046c2 <_printf_float+0xc2>
 8004a1e:	f108 0801 	add.w	r8, r8, #1
 8004a22:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004a24:	3b01      	subs	r3, #1
 8004a26:	4543      	cmp	r3, r8
 8004a28:	dcf1      	bgt.n	8004a0e <_printf_float+0x40e>
 8004a2a:	464b      	mov	r3, r9
 8004a2c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004a30:	e6dc      	b.n	80047ec <_printf_float+0x1ec>
 8004a32:	f04f 0800 	mov.w	r8, #0
 8004a36:	f104 0a1a 	add.w	sl, r4, #26
 8004a3a:	e7f2      	b.n	8004a22 <_printf_float+0x422>
 8004a3c:	2301      	movs	r3, #1
 8004a3e:	4642      	mov	r2, r8
 8004a40:	e7df      	b.n	8004a02 <_printf_float+0x402>
 8004a42:	2301      	movs	r3, #1
 8004a44:	464a      	mov	r2, r9
 8004a46:	4631      	mov	r1, r6
 8004a48:	4628      	mov	r0, r5
 8004a4a:	47b8      	blx	r7
 8004a4c:	3001      	adds	r0, #1
 8004a4e:	f43f ae38 	beq.w	80046c2 <_printf_float+0xc2>
 8004a52:	f108 0801 	add.w	r8, r8, #1
 8004a56:	68e3      	ldr	r3, [r4, #12]
 8004a58:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004a5a:	1a5b      	subs	r3, r3, r1
 8004a5c:	4543      	cmp	r3, r8
 8004a5e:	dcf0      	bgt.n	8004a42 <_printf_float+0x442>
 8004a60:	e6fa      	b.n	8004858 <_printf_float+0x258>
 8004a62:	f04f 0800 	mov.w	r8, #0
 8004a66:	f104 0919 	add.w	r9, r4, #25
 8004a6a:	e7f4      	b.n	8004a56 <_printf_float+0x456>

08004a6c <_printf_common>:
 8004a6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a70:	4616      	mov	r6, r2
 8004a72:	4699      	mov	r9, r3
 8004a74:	688a      	ldr	r2, [r1, #8]
 8004a76:	690b      	ldr	r3, [r1, #16]
 8004a78:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004a7c:	4293      	cmp	r3, r2
 8004a7e:	bfb8      	it	lt
 8004a80:	4613      	movlt	r3, r2
 8004a82:	6033      	str	r3, [r6, #0]
 8004a84:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004a88:	4607      	mov	r7, r0
 8004a8a:	460c      	mov	r4, r1
 8004a8c:	b10a      	cbz	r2, 8004a92 <_printf_common+0x26>
 8004a8e:	3301      	adds	r3, #1
 8004a90:	6033      	str	r3, [r6, #0]
 8004a92:	6823      	ldr	r3, [r4, #0]
 8004a94:	0699      	lsls	r1, r3, #26
 8004a96:	bf42      	ittt	mi
 8004a98:	6833      	ldrmi	r3, [r6, #0]
 8004a9a:	3302      	addmi	r3, #2
 8004a9c:	6033      	strmi	r3, [r6, #0]
 8004a9e:	6825      	ldr	r5, [r4, #0]
 8004aa0:	f015 0506 	ands.w	r5, r5, #6
 8004aa4:	d106      	bne.n	8004ab4 <_printf_common+0x48>
 8004aa6:	f104 0a19 	add.w	sl, r4, #25
 8004aaa:	68e3      	ldr	r3, [r4, #12]
 8004aac:	6832      	ldr	r2, [r6, #0]
 8004aae:	1a9b      	subs	r3, r3, r2
 8004ab0:	42ab      	cmp	r3, r5
 8004ab2:	dc26      	bgt.n	8004b02 <_printf_common+0x96>
 8004ab4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004ab8:	1e13      	subs	r3, r2, #0
 8004aba:	6822      	ldr	r2, [r4, #0]
 8004abc:	bf18      	it	ne
 8004abe:	2301      	movne	r3, #1
 8004ac0:	0692      	lsls	r2, r2, #26
 8004ac2:	d42b      	bmi.n	8004b1c <_printf_common+0xb0>
 8004ac4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004ac8:	4649      	mov	r1, r9
 8004aca:	4638      	mov	r0, r7
 8004acc:	47c0      	blx	r8
 8004ace:	3001      	adds	r0, #1
 8004ad0:	d01e      	beq.n	8004b10 <_printf_common+0xa4>
 8004ad2:	6823      	ldr	r3, [r4, #0]
 8004ad4:	68e5      	ldr	r5, [r4, #12]
 8004ad6:	6832      	ldr	r2, [r6, #0]
 8004ad8:	f003 0306 	and.w	r3, r3, #6
 8004adc:	2b04      	cmp	r3, #4
 8004ade:	bf08      	it	eq
 8004ae0:	1aad      	subeq	r5, r5, r2
 8004ae2:	68a3      	ldr	r3, [r4, #8]
 8004ae4:	6922      	ldr	r2, [r4, #16]
 8004ae6:	bf0c      	ite	eq
 8004ae8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004aec:	2500      	movne	r5, #0
 8004aee:	4293      	cmp	r3, r2
 8004af0:	bfc4      	itt	gt
 8004af2:	1a9b      	subgt	r3, r3, r2
 8004af4:	18ed      	addgt	r5, r5, r3
 8004af6:	2600      	movs	r6, #0
 8004af8:	341a      	adds	r4, #26
 8004afa:	42b5      	cmp	r5, r6
 8004afc:	d11a      	bne.n	8004b34 <_printf_common+0xc8>
 8004afe:	2000      	movs	r0, #0
 8004b00:	e008      	b.n	8004b14 <_printf_common+0xa8>
 8004b02:	2301      	movs	r3, #1
 8004b04:	4652      	mov	r2, sl
 8004b06:	4649      	mov	r1, r9
 8004b08:	4638      	mov	r0, r7
 8004b0a:	47c0      	blx	r8
 8004b0c:	3001      	adds	r0, #1
 8004b0e:	d103      	bne.n	8004b18 <_printf_common+0xac>
 8004b10:	f04f 30ff 	mov.w	r0, #4294967295
 8004b14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b18:	3501      	adds	r5, #1
 8004b1a:	e7c6      	b.n	8004aaa <_printf_common+0x3e>
 8004b1c:	18e1      	adds	r1, r4, r3
 8004b1e:	1c5a      	adds	r2, r3, #1
 8004b20:	2030      	movs	r0, #48	; 0x30
 8004b22:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004b26:	4422      	add	r2, r4
 8004b28:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004b2c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004b30:	3302      	adds	r3, #2
 8004b32:	e7c7      	b.n	8004ac4 <_printf_common+0x58>
 8004b34:	2301      	movs	r3, #1
 8004b36:	4622      	mov	r2, r4
 8004b38:	4649      	mov	r1, r9
 8004b3a:	4638      	mov	r0, r7
 8004b3c:	47c0      	blx	r8
 8004b3e:	3001      	adds	r0, #1
 8004b40:	d0e6      	beq.n	8004b10 <_printf_common+0xa4>
 8004b42:	3601      	adds	r6, #1
 8004b44:	e7d9      	b.n	8004afa <_printf_common+0x8e>
	...

08004b48 <_printf_i>:
 8004b48:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004b4c:	460c      	mov	r4, r1
 8004b4e:	4691      	mov	r9, r2
 8004b50:	7e27      	ldrb	r7, [r4, #24]
 8004b52:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004b54:	2f78      	cmp	r7, #120	; 0x78
 8004b56:	4680      	mov	r8, r0
 8004b58:	469a      	mov	sl, r3
 8004b5a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004b5e:	d807      	bhi.n	8004b70 <_printf_i+0x28>
 8004b60:	2f62      	cmp	r7, #98	; 0x62
 8004b62:	d80a      	bhi.n	8004b7a <_printf_i+0x32>
 8004b64:	2f00      	cmp	r7, #0
 8004b66:	f000 80d8 	beq.w	8004d1a <_printf_i+0x1d2>
 8004b6a:	2f58      	cmp	r7, #88	; 0x58
 8004b6c:	f000 80a3 	beq.w	8004cb6 <_printf_i+0x16e>
 8004b70:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004b74:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004b78:	e03a      	b.n	8004bf0 <_printf_i+0xa8>
 8004b7a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004b7e:	2b15      	cmp	r3, #21
 8004b80:	d8f6      	bhi.n	8004b70 <_printf_i+0x28>
 8004b82:	a001      	add	r0, pc, #4	; (adr r0, 8004b88 <_printf_i+0x40>)
 8004b84:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004b88:	08004be1 	.word	0x08004be1
 8004b8c:	08004bf5 	.word	0x08004bf5
 8004b90:	08004b71 	.word	0x08004b71
 8004b94:	08004b71 	.word	0x08004b71
 8004b98:	08004b71 	.word	0x08004b71
 8004b9c:	08004b71 	.word	0x08004b71
 8004ba0:	08004bf5 	.word	0x08004bf5
 8004ba4:	08004b71 	.word	0x08004b71
 8004ba8:	08004b71 	.word	0x08004b71
 8004bac:	08004b71 	.word	0x08004b71
 8004bb0:	08004b71 	.word	0x08004b71
 8004bb4:	08004d01 	.word	0x08004d01
 8004bb8:	08004c25 	.word	0x08004c25
 8004bbc:	08004ce3 	.word	0x08004ce3
 8004bc0:	08004b71 	.word	0x08004b71
 8004bc4:	08004b71 	.word	0x08004b71
 8004bc8:	08004d23 	.word	0x08004d23
 8004bcc:	08004b71 	.word	0x08004b71
 8004bd0:	08004c25 	.word	0x08004c25
 8004bd4:	08004b71 	.word	0x08004b71
 8004bd8:	08004b71 	.word	0x08004b71
 8004bdc:	08004ceb 	.word	0x08004ceb
 8004be0:	680b      	ldr	r3, [r1, #0]
 8004be2:	1d1a      	adds	r2, r3, #4
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	600a      	str	r2, [r1, #0]
 8004be8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004bec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004bf0:	2301      	movs	r3, #1
 8004bf2:	e0a3      	b.n	8004d3c <_printf_i+0x1f4>
 8004bf4:	6825      	ldr	r5, [r4, #0]
 8004bf6:	6808      	ldr	r0, [r1, #0]
 8004bf8:	062e      	lsls	r6, r5, #24
 8004bfa:	f100 0304 	add.w	r3, r0, #4
 8004bfe:	d50a      	bpl.n	8004c16 <_printf_i+0xce>
 8004c00:	6805      	ldr	r5, [r0, #0]
 8004c02:	600b      	str	r3, [r1, #0]
 8004c04:	2d00      	cmp	r5, #0
 8004c06:	da03      	bge.n	8004c10 <_printf_i+0xc8>
 8004c08:	232d      	movs	r3, #45	; 0x2d
 8004c0a:	426d      	negs	r5, r5
 8004c0c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004c10:	485e      	ldr	r0, [pc, #376]	; (8004d8c <_printf_i+0x244>)
 8004c12:	230a      	movs	r3, #10
 8004c14:	e019      	b.n	8004c4a <_printf_i+0x102>
 8004c16:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004c1a:	6805      	ldr	r5, [r0, #0]
 8004c1c:	600b      	str	r3, [r1, #0]
 8004c1e:	bf18      	it	ne
 8004c20:	b22d      	sxthne	r5, r5
 8004c22:	e7ef      	b.n	8004c04 <_printf_i+0xbc>
 8004c24:	680b      	ldr	r3, [r1, #0]
 8004c26:	6825      	ldr	r5, [r4, #0]
 8004c28:	1d18      	adds	r0, r3, #4
 8004c2a:	6008      	str	r0, [r1, #0]
 8004c2c:	0628      	lsls	r0, r5, #24
 8004c2e:	d501      	bpl.n	8004c34 <_printf_i+0xec>
 8004c30:	681d      	ldr	r5, [r3, #0]
 8004c32:	e002      	b.n	8004c3a <_printf_i+0xf2>
 8004c34:	0669      	lsls	r1, r5, #25
 8004c36:	d5fb      	bpl.n	8004c30 <_printf_i+0xe8>
 8004c38:	881d      	ldrh	r5, [r3, #0]
 8004c3a:	4854      	ldr	r0, [pc, #336]	; (8004d8c <_printf_i+0x244>)
 8004c3c:	2f6f      	cmp	r7, #111	; 0x6f
 8004c3e:	bf0c      	ite	eq
 8004c40:	2308      	moveq	r3, #8
 8004c42:	230a      	movne	r3, #10
 8004c44:	2100      	movs	r1, #0
 8004c46:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004c4a:	6866      	ldr	r6, [r4, #4]
 8004c4c:	60a6      	str	r6, [r4, #8]
 8004c4e:	2e00      	cmp	r6, #0
 8004c50:	bfa2      	ittt	ge
 8004c52:	6821      	ldrge	r1, [r4, #0]
 8004c54:	f021 0104 	bicge.w	r1, r1, #4
 8004c58:	6021      	strge	r1, [r4, #0]
 8004c5a:	b90d      	cbnz	r5, 8004c60 <_printf_i+0x118>
 8004c5c:	2e00      	cmp	r6, #0
 8004c5e:	d04d      	beq.n	8004cfc <_printf_i+0x1b4>
 8004c60:	4616      	mov	r6, r2
 8004c62:	fbb5 f1f3 	udiv	r1, r5, r3
 8004c66:	fb03 5711 	mls	r7, r3, r1, r5
 8004c6a:	5dc7      	ldrb	r7, [r0, r7]
 8004c6c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004c70:	462f      	mov	r7, r5
 8004c72:	42bb      	cmp	r3, r7
 8004c74:	460d      	mov	r5, r1
 8004c76:	d9f4      	bls.n	8004c62 <_printf_i+0x11a>
 8004c78:	2b08      	cmp	r3, #8
 8004c7a:	d10b      	bne.n	8004c94 <_printf_i+0x14c>
 8004c7c:	6823      	ldr	r3, [r4, #0]
 8004c7e:	07df      	lsls	r7, r3, #31
 8004c80:	d508      	bpl.n	8004c94 <_printf_i+0x14c>
 8004c82:	6923      	ldr	r3, [r4, #16]
 8004c84:	6861      	ldr	r1, [r4, #4]
 8004c86:	4299      	cmp	r1, r3
 8004c88:	bfde      	ittt	le
 8004c8a:	2330      	movle	r3, #48	; 0x30
 8004c8c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004c90:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004c94:	1b92      	subs	r2, r2, r6
 8004c96:	6122      	str	r2, [r4, #16]
 8004c98:	f8cd a000 	str.w	sl, [sp]
 8004c9c:	464b      	mov	r3, r9
 8004c9e:	aa03      	add	r2, sp, #12
 8004ca0:	4621      	mov	r1, r4
 8004ca2:	4640      	mov	r0, r8
 8004ca4:	f7ff fee2 	bl	8004a6c <_printf_common>
 8004ca8:	3001      	adds	r0, #1
 8004caa:	d14c      	bne.n	8004d46 <_printf_i+0x1fe>
 8004cac:	f04f 30ff 	mov.w	r0, #4294967295
 8004cb0:	b004      	add	sp, #16
 8004cb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004cb6:	4835      	ldr	r0, [pc, #212]	; (8004d8c <_printf_i+0x244>)
 8004cb8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004cbc:	6823      	ldr	r3, [r4, #0]
 8004cbe:	680e      	ldr	r6, [r1, #0]
 8004cc0:	061f      	lsls	r7, r3, #24
 8004cc2:	f856 5b04 	ldr.w	r5, [r6], #4
 8004cc6:	600e      	str	r6, [r1, #0]
 8004cc8:	d514      	bpl.n	8004cf4 <_printf_i+0x1ac>
 8004cca:	07d9      	lsls	r1, r3, #31
 8004ccc:	bf44      	itt	mi
 8004cce:	f043 0320 	orrmi.w	r3, r3, #32
 8004cd2:	6023      	strmi	r3, [r4, #0]
 8004cd4:	b91d      	cbnz	r5, 8004cde <_printf_i+0x196>
 8004cd6:	6823      	ldr	r3, [r4, #0]
 8004cd8:	f023 0320 	bic.w	r3, r3, #32
 8004cdc:	6023      	str	r3, [r4, #0]
 8004cde:	2310      	movs	r3, #16
 8004ce0:	e7b0      	b.n	8004c44 <_printf_i+0xfc>
 8004ce2:	6823      	ldr	r3, [r4, #0]
 8004ce4:	f043 0320 	orr.w	r3, r3, #32
 8004ce8:	6023      	str	r3, [r4, #0]
 8004cea:	2378      	movs	r3, #120	; 0x78
 8004cec:	4828      	ldr	r0, [pc, #160]	; (8004d90 <_printf_i+0x248>)
 8004cee:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004cf2:	e7e3      	b.n	8004cbc <_printf_i+0x174>
 8004cf4:	065e      	lsls	r6, r3, #25
 8004cf6:	bf48      	it	mi
 8004cf8:	b2ad      	uxthmi	r5, r5
 8004cfa:	e7e6      	b.n	8004cca <_printf_i+0x182>
 8004cfc:	4616      	mov	r6, r2
 8004cfe:	e7bb      	b.n	8004c78 <_printf_i+0x130>
 8004d00:	680b      	ldr	r3, [r1, #0]
 8004d02:	6826      	ldr	r6, [r4, #0]
 8004d04:	6960      	ldr	r0, [r4, #20]
 8004d06:	1d1d      	adds	r5, r3, #4
 8004d08:	600d      	str	r5, [r1, #0]
 8004d0a:	0635      	lsls	r5, r6, #24
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	d501      	bpl.n	8004d14 <_printf_i+0x1cc>
 8004d10:	6018      	str	r0, [r3, #0]
 8004d12:	e002      	b.n	8004d1a <_printf_i+0x1d2>
 8004d14:	0671      	lsls	r1, r6, #25
 8004d16:	d5fb      	bpl.n	8004d10 <_printf_i+0x1c8>
 8004d18:	8018      	strh	r0, [r3, #0]
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	6123      	str	r3, [r4, #16]
 8004d1e:	4616      	mov	r6, r2
 8004d20:	e7ba      	b.n	8004c98 <_printf_i+0x150>
 8004d22:	680b      	ldr	r3, [r1, #0]
 8004d24:	1d1a      	adds	r2, r3, #4
 8004d26:	600a      	str	r2, [r1, #0]
 8004d28:	681e      	ldr	r6, [r3, #0]
 8004d2a:	6862      	ldr	r2, [r4, #4]
 8004d2c:	2100      	movs	r1, #0
 8004d2e:	4630      	mov	r0, r6
 8004d30:	f7fb fa56 	bl	80001e0 <memchr>
 8004d34:	b108      	cbz	r0, 8004d3a <_printf_i+0x1f2>
 8004d36:	1b80      	subs	r0, r0, r6
 8004d38:	6060      	str	r0, [r4, #4]
 8004d3a:	6863      	ldr	r3, [r4, #4]
 8004d3c:	6123      	str	r3, [r4, #16]
 8004d3e:	2300      	movs	r3, #0
 8004d40:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004d44:	e7a8      	b.n	8004c98 <_printf_i+0x150>
 8004d46:	6923      	ldr	r3, [r4, #16]
 8004d48:	4632      	mov	r2, r6
 8004d4a:	4649      	mov	r1, r9
 8004d4c:	4640      	mov	r0, r8
 8004d4e:	47d0      	blx	sl
 8004d50:	3001      	adds	r0, #1
 8004d52:	d0ab      	beq.n	8004cac <_printf_i+0x164>
 8004d54:	6823      	ldr	r3, [r4, #0]
 8004d56:	079b      	lsls	r3, r3, #30
 8004d58:	d413      	bmi.n	8004d82 <_printf_i+0x23a>
 8004d5a:	68e0      	ldr	r0, [r4, #12]
 8004d5c:	9b03      	ldr	r3, [sp, #12]
 8004d5e:	4298      	cmp	r0, r3
 8004d60:	bfb8      	it	lt
 8004d62:	4618      	movlt	r0, r3
 8004d64:	e7a4      	b.n	8004cb0 <_printf_i+0x168>
 8004d66:	2301      	movs	r3, #1
 8004d68:	4632      	mov	r2, r6
 8004d6a:	4649      	mov	r1, r9
 8004d6c:	4640      	mov	r0, r8
 8004d6e:	47d0      	blx	sl
 8004d70:	3001      	adds	r0, #1
 8004d72:	d09b      	beq.n	8004cac <_printf_i+0x164>
 8004d74:	3501      	adds	r5, #1
 8004d76:	68e3      	ldr	r3, [r4, #12]
 8004d78:	9903      	ldr	r1, [sp, #12]
 8004d7a:	1a5b      	subs	r3, r3, r1
 8004d7c:	42ab      	cmp	r3, r5
 8004d7e:	dcf2      	bgt.n	8004d66 <_printf_i+0x21e>
 8004d80:	e7eb      	b.n	8004d5a <_printf_i+0x212>
 8004d82:	2500      	movs	r5, #0
 8004d84:	f104 0619 	add.w	r6, r4, #25
 8004d88:	e7f5      	b.n	8004d76 <_printf_i+0x22e>
 8004d8a:	bf00      	nop
 8004d8c:	08007276 	.word	0x08007276
 8004d90:	08007287 	.word	0x08007287

08004d94 <siprintf>:
 8004d94:	b40e      	push	{r1, r2, r3}
 8004d96:	b500      	push	{lr}
 8004d98:	b09c      	sub	sp, #112	; 0x70
 8004d9a:	ab1d      	add	r3, sp, #116	; 0x74
 8004d9c:	9002      	str	r0, [sp, #8]
 8004d9e:	9006      	str	r0, [sp, #24]
 8004da0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004da4:	4809      	ldr	r0, [pc, #36]	; (8004dcc <siprintf+0x38>)
 8004da6:	9107      	str	r1, [sp, #28]
 8004da8:	9104      	str	r1, [sp, #16]
 8004daa:	4909      	ldr	r1, [pc, #36]	; (8004dd0 <siprintf+0x3c>)
 8004dac:	f853 2b04 	ldr.w	r2, [r3], #4
 8004db0:	9105      	str	r1, [sp, #20]
 8004db2:	6800      	ldr	r0, [r0, #0]
 8004db4:	9301      	str	r3, [sp, #4]
 8004db6:	a902      	add	r1, sp, #8
 8004db8:	f001 fb34 	bl	8006424 <_svfiprintf_r>
 8004dbc:	9b02      	ldr	r3, [sp, #8]
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	701a      	strb	r2, [r3, #0]
 8004dc2:	b01c      	add	sp, #112	; 0x70
 8004dc4:	f85d eb04 	ldr.w	lr, [sp], #4
 8004dc8:	b003      	add	sp, #12
 8004dca:	4770      	bx	lr
 8004dcc:	2000000c 	.word	0x2000000c
 8004dd0:	ffff0208 	.word	0xffff0208

08004dd4 <quorem>:
 8004dd4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004dd8:	6903      	ldr	r3, [r0, #16]
 8004dda:	690c      	ldr	r4, [r1, #16]
 8004ddc:	42a3      	cmp	r3, r4
 8004dde:	4607      	mov	r7, r0
 8004de0:	f2c0 8081 	blt.w	8004ee6 <quorem+0x112>
 8004de4:	3c01      	subs	r4, #1
 8004de6:	f101 0814 	add.w	r8, r1, #20
 8004dea:	f100 0514 	add.w	r5, r0, #20
 8004dee:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004df2:	9301      	str	r3, [sp, #4]
 8004df4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004df8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004dfc:	3301      	adds	r3, #1
 8004dfe:	429a      	cmp	r2, r3
 8004e00:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8004e04:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004e08:	fbb2 f6f3 	udiv	r6, r2, r3
 8004e0c:	d331      	bcc.n	8004e72 <quorem+0x9e>
 8004e0e:	f04f 0e00 	mov.w	lr, #0
 8004e12:	4640      	mov	r0, r8
 8004e14:	46ac      	mov	ip, r5
 8004e16:	46f2      	mov	sl, lr
 8004e18:	f850 2b04 	ldr.w	r2, [r0], #4
 8004e1c:	b293      	uxth	r3, r2
 8004e1e:	fb06 e303 	mla	r3, r6, r3, lr
 8004e22:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8004e26:	b29b      	uxth	r3, r3
 8004e28:	ebaa 0303 	sub.w	r3, sl, r3
 8004e2c:	0c12      	lsrs	r2, r2, #16
 8004e2e:	f8dc a000 	ldr.w	sl, [ip]
 8004e32:	fb06 e202 	mla	r2, r6, r2, lr
 8004e36:	fa13 f38a 	uxtah	r3, r3, sl
 8004e3a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004e3e:	fa1f fa82 	uxth.w	sl, r2
 8004e42:	f8dc 2000 	ldr.w	r2, [ip]
 8004e46:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8004e4a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004e4e:	b29b      	uxth	r3, r3
 8004e50:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004e54:	4581      	cmp	r9, r0
 8004e56:	f84c 3b04 	str.w	r3, [ip], #4
 8004e5a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8004e5e:	d2db      	bcs.n	8004e18 <quorem+0x44>
 8004e60:	f855 300b 	ldr.w	r3, [r5, fp]
 8004e64:	b92b      	cbnz	r3, 8004e72 <quorem+0x9e>
 8004e66:	9b01      	ldr	r3, [sp, #4]
 8004e68:	3b04      	subs	r3, #4
 8004e6a:	429d      	cmp	r5, r3
 8004e6c:	461a      	mov	r2, r3
 8004e6e:	d32e      	bcc.n	8004ece <quorem+0xfa>
 8004e70:	613c      	str	r4, [r7, #16]
 8004e72:	4638      	mov	r0, r7
 8004e74:	f001 f8c0 	bl	8005ff8 <__mcmp>
 8004e78:	2800      	cmp	r0, #0
 8004e7a:	db24      	blt.n	8004ec6 <quorem+0xf2>
 8004e7c:	3601      	adds	r6, #1
 8004e7e:	4628      	mov	r0, r5
 8004e80:	f04f 0c00 	mov.w	ip, #0
 8004e84:	f858 2b04 	ldr.w	r2, [r8], #4
 8004e88:	f8d0 e000 	ldr.w	lr, [r0]
 8004e8c:	b293      	uxth	r3, r2
 8004e8e:	ebac 0303 	sub.w	r3, ip, r3
 8004e92:	0c12      	lsrs	r2, r2, #16
 8004e94:	fa13 f38e 	uxtah	r3, r3, lr
 8004e98:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8004e9c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004ea0:	b29b      	uxth	r3, r3
 8004ea2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004ea6:	45c1      	cmp	r9, r8
 8004ea8:	f840 3b04 	str.w	r3, [r0], #4
 8004eac:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8004eb0:	d2e8      	bcs.n	8004e84 <quorem+0xb0>
 8004eb2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004eb6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004eba:	b922      	cbnz	r2, 8004ec6 <quorem+0xf2>
 8004ebc:	3b04      	subs	r3, #4
 8004ebe:	429d      	cmp	r5, r3
 8004ec0:	461a      	mov	r2, r3
 8004ec2:	d30a      	bcc.n	8004eda <quorem+0x106>
 8004ec4:	613c      	str	r4, [r7, #16]
 8004ec6:	4630      	mov	r0, r6
 8004ec8:	b003      	add	sp, #12
 8004eca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ece:	6812      	ldr	r2, [r2, #0]
 8004ed0:	3b04      	subs	r3, #4
 8004ed2:	2a00      	cmp	r2, #0
 8004ed4:	d1cc      	bne.n	8004e70 <quorem+0x9c>
 8004ed6:	3c01      	subs	r4, #1
 8004ed8:	e7c7      	b.n	8004e6a <quorem+0x96>
 8004eda:	6812      	ldr	r2, [r2, #0]
 8004edc:	3b04      	subs	r3, #4
 8004ede:	2a00      	cmp	r2, #0
 8004ee0:	d1f0      	bne.n	8004ec4 <quorem+0xf0>
 8004ee2:	3c01      	subs	r4, #1
 8004ee4:	e7eb      	b.n	8004ebe <quorem+0xea>
 8004ee6:	2000      	movs	r0, #0
 8004ee8:	e7ee      	b.n	8004ec8 <quorem+0xf4>
 8004eea:	0000      	movs	r0, r0
 8004eec:	0000      	movs	r0, r0
	...

08004ef0 <_dtoa_r>:
 8004ef0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ef4:	ed2d 8b02 	vpush	{d8}
 8004ef8:	ec57 6b10 	vmov	r6, r7, d0
 8004efc:	b095      	sub	sp, #84	; 0x54
 8004efe:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8004f00:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8004f04:	9105      	str	r1, [sp, #20]
 8004f06:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8004f0a:	4604      	mov	r4, r0
 8004f0c:	9209      	str	r2, [sp, #36]	; 0x24
 8004f0e:	930f      	str	r3, [sp, #60]	; 0x3c
 8004f10:	b975      	cbnz	r5, 8004f30 <_dtoa_r+0x40>
 8004f12:	2010      	movs	r0, #16
 8004f14:	f000 fddc 	bl	8005ad0 <malloc>
 8004f18:	4602      	mov	r2, r0
 8004f1a:	6260      	str	r0, [r4, #36]	; 0x24
 8004f1c:	b920      	cbnz	r0, 8004f28 <_dtoa_r+0x38>
 8004f1e:	4bb2      	ldr	r3, [pc, #712]	; (80051e8 <_dtoa_r+0x2f8>)
 8004f20:	21ea      	movs	r1, #234	; 0xea
 8004f22:	48b2      	ldr	r0, [pc, #712]	; (80051ec <_dtoa_r+0x2fc>)
 8004f24:	f001 fb8e 	bl	8006644 <__assert_func>
 8004f28:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8004f2c:	6005      	str	r5, [r0, #0]
 8004f2e:	60c5      	str	r5, [r0, #12]
 8004f30:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004f32:	6819      	ldr	r1, [r3, #0]
 8004f34:	b151      	cbz	r1, 8004f4c <_dtoa_r+0x5c>
 8004f36:	685a      	ldr	r2, [r3, #4]
 8004f38:	604a      	str	r2, [r1, #4]
 8004f3a:	2301      	movs	r3, #1
 8004f3c:	4093      	lsls	r3, r2
 8004f3e:	608b      	str	r3, [r1, #8]
 8004f40:	4620      	mov	r0, r4
 8004f42:	f000 fe1b 	bl	8005b7c <_Bfree>
 8004f46:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004f48:	2200      	movs	r2, #0
 8004f4a:	601a      	str	r2, [r3, #0]
 8004f4c:	1e3b      	subs	r3, r7, #0
 8004f4e:	bfb9      	ittee	lt
 8004f50:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8004f54:	9303      	strlt	r3, [sp, #12]
 8004f56:	2300      	movge	r3, #0
 8004f58:	f8c8 3000 	strge.w	r3, [r8]
 8004f5c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8004f60:	4ba3      	ldr	r3, [pc, #652]	; (80051f0 <_dtoa_r+0x300>)
 8004f62:	bfbc      	itt	lt
 8004f64:	2201      	movlt	r2, #1
 8004f66:	f8c8 2000 	strlt.w	r2, [r8]
 8004f6a:	ea33 0309 	bics.w	r3, r3, r9
 8004f6e:	d11b      	bne.n	8004fa8 <_dtoa_r+0xb8>
 8004f70:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004f72:	f242 730f 	movw	r3, #9999	; 0x270f
 8004f76:	6013      	str	r3, [r2, #0]
 8004f78:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004f7c:	4333      	orrs	r3, r6
 8004f7e:	f000 857a 	beq.w	8005a76 <_dtoa_r+0xb86>
 8004f82:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004f84:	b963      	cbnz	r3, 8004fa0 <_dtoa_r+0xb0>
 8004f86:	4b9b      	ldr	r3, [pc, #620]	; (80051f4 <_dtoa_r+0x304>)
 8004f88:	e024      	b.n	8004fd4 <_dtoa_r+0xe4>
 8004f8a:	4b9b      	ldr	r3, [pc, #620]	; (80051f8 <_dtoa_r+0x308>)
 8004f8c:	9300      	str	r3, [sp, #0]
 8004f8e:	3308      	adds	r3, #8
 8004f90:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8004f92:	6013      	str	r3, [r2, #0]
 8004f94:	9800      	ldr	r0, [sp, #0]
 8004f96:	b015      	add	sp, #84	; 0x54
 8004f98:	ecbd 8b02 	vpop	{d8}
 8004f9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004fa0:	4b94      	ldr	r3, [pc, #592]	; (80051f4 <_dtoa_r+0x304>)
 8004fa2:	9300      	str	r3, [sp, #0]
 8004fa4:	3303      	adds	r3, #3
 8004fa6:	e7f3      	b.n	8004f90 <_dtoa_r+0xa0>
 8004fa8:	ed9d 7b02 	vldr	d7, [sp, #8]
 8004fac:	2200      	movs	r2, #0
 8004fae:	ec51 0b17 	vmov	r0, r1, d7
 8004fb2:	2300      	movs	r3, #0
 8004fb4:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8004fb8:	f7fb fd86 	bl	8000ac8 <__aeabi_dcmpeq>
 8004fbc:	4680      	mov	r8, r0
 8004fbe:	b158      	cbz	r0, 8004fd8 <_dtoa_r+0xe8>
 8004fc0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004fc2:	2301      	movs	r3, #1
 8004fc4:	6013      	str	r3, [r2, #0]
 8004fc6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	f000 8551 	beq.w	8005a70 <_dtoa_r+0xb80>
 8004fce:	488b      	ldr	r0, [pc, #556]	; (80051fc <_dtoa_r+0x30c>)
 8004fd0:	6018      	str	r0, [r3, #0]
 8004fd2:	1e43      	subs	r3, r0, #1
 8004fd4:	9300      	str	r3, [sp, #0]
 8004fd6:	e7dd      	b.n	8004f94 <_dtoa_r+0xa4>
 8004fd8:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8004fdc:	aa12      	add	r2, sp, #72	; 0x48
 8004fde:	a913      	add	r1, sp, #76	; 0x4c
 8004fe0:	4620      	mov	r0, r4
 8004fe2:	f001 f8ad 	bl	8006140 <__d2b>
 8004fe6:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8004fea:	4683      	mov	fp, r0
 8004fec:	2d00      	cmp	r5, #0
 8004fee:	d07c      	beq.n	80050ea <_dtoa_r+0x1fa>
 8004ff0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004ff2:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8004ff6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004ffa:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8004ffe:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8005002:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8005006:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800500a:	4b7d      	ldr	r3, [pc, #500]	; (8005200 <_dtoa_r+0x310>)
 800500c:	2200      	movs	r2, #0
 800500e:	4630      	mov	r0, r6
 8005010:	4639      	mov	r1, r7
 8005012:	f7fb f939 	bl	8000288 <__aeabi_dsub>
 8005016:	a36e      	add	r3, pc, #440	; (adr r3, 80051d0 <_dtoa_r+0x2e0>)
 8005018:	e9d3 2300 	ldrd	r2, r3, [r3]
 800501c:	f7fb faec 	bl	80005f8 <__aeabi_dmul>
 8005020:	a36d      	add	r3, pc, #436	; (adr r3, 80051d8 <_dtoa_r+0x2e8>)
 8005022:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005026:	f7fb f931 	bl	800028c <__adddf3>
 800502a:	4606      	mov	r6, r0
 800502c:	4628      	mov	r0, r5
 800502e:	460f      	mov	r7, r1
 8005030:	f7fb fa78 	bl	8000524 <__aeabi_i2d>
 8005034:	a36a      	add	r3, pc, #424	; (adr r3, 80051e0 <_dtoa_r+0x2f0>)
 8005036:	e9d3 2300 	ldrd	r2, r3, [r3]
 800503a:	f7fb fadd 	bl	80005f8 <__aeabi_dmul>
 800503e:	4602      	mov	r2, r0
 8005040:	460b      	mov	r3, r1
 8005042:	4630      	mov	r0, r6
 8005044:	4639      	mov	r1, r7
 8005046:	f7fb f921 	bl	800028c <__adddf3>
 800504a:	4606      	mov	r6, r0
 800504c:	460f      	mov	r7, r1
 800504e:	f7fb fd83 	bl	8000b58 <__aeabi_d2iz>
 8005052:	2200      	movs	r2, #0
 8005054:	4682      	mov	sl, r0
 8005056:	2300      	movs	r3, #0
 8005058:	4630      	mov	r0, r6
 800505a:	4639      	mov	r1, r7
 800505c:	f7fb fd3e 	bl	8000adc <__aeabi_dcmplt>
 8005060:	b148      	cbz	r0, 8005076 <_dtoa_r+0x186>
 8005062:	4650      	mov	r0, sl
 8005064:	f7fb fa5e 	bl	8000524 <__aeabi_i2d>
 8005068:	4632      	mov	r2, r6
 800506a:	463b      	mov	r3, r7
 800506c:	f7fb fd2c 	bl	8000ac8 <__aeabi_dcmpeq>
 8005070:	b908      	cbnz	r0, 8005076 <_dtoa_r+0x186>
 8005072:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005076:	f1ba 0f16 	cmp.w	sl, #22
 800507a:	d854      	bhi.n	8005126 <_dtoa_r+0x236>
 800507c:	4b61      	ldr	r3, [pc, #388]	; (8005204 <_dtoa_r+0x314>)
 800507e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005082:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005086:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800508a:	f7fb fd27 	bl	8000adc <__aeabi_dcmplt>
 800508e:	2800      	cmp	r0, #0
 8005090:	d04b      	beq.n	800512a <_dtoa_r+0x23a>
 8005092:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005096:	2300      	movs	r3, #0
 8005098:	930e      	str	r3, [sp, #56]	; 0x38
 800509a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800509c:	1b5d      	subs	r5, r3, r5
 800509e:	1e6b      	subs	r3, r5, #1
 80050a0:	9304      	str	r3, [sp, #16]
 80050a2:	bf43      	ittte	mi
 80050a4:	2300      	movmi	r3, #0
 80050a6:	f1c5 0801 	rsbmi	r8, r5, #1
 80050aa:	9304      	strmi	r3, [sp, #16]
 80050ac:	f04f 0800 	movpl.w	r8, #0
 80050b0:	f1ba 0f00 	cmp.w	sl, #0
 80050b4:	db3b      	blt.n	800512e <_dtoa_r+0x23e>
 80050b6:	9b04      	ldr	r3, [sp, #16]
 80050b8:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 80050bc:	4453      	add	r3, sl
 80050be:	9304      	str	r3, [sp, #16]
 80050c0:	2300      	movs	r3, #0
 80050c2:	9306      	str	r3, [sp, #24]
 80050c4:	9b05      	ldr	r3, [sp, #20]
 80050c6:	2b09      	cmp	r3, #9
 80050c8:	d869      	bhi.n	800519e <_dtoa_r+0x2ae>
 80050ca:	2b05      	cmp	r3, #5
 80050cc:	bfc4      	itt	gt
 80050ce:	3b04      	subgt	r3, #4
 80050d0:	9305      	strgt	r3, [sp, #20]
 80050d2:	9b05      	ldr	r3, [sp, #20]
 80050d4:	f1a3 0302 	sub.w	r3, r3, #2
 80050d8:	bfcc      	ite	gt
 80050da:	2500      	movgt	r5, #0
 80050dc:	2501      	movle	r5, #1
 80050de:	2b03      	cmp	r3, #3
 80050e0:	d869      	bhi.n	80051b6 <_dtoa_r+0x2c6>
 80050e2:	e8df f003 	tbb	[pc, r3]
 80050e6:	4e2c      	.short	0x4e2c
 80050e8:	5a4c      	.short	0x5a4c
 80050ea:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 80050ee:	441d      	add	r5, r3
 80050f0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80050f4:	2b20      	cmp	r3, #32
 80050f6:	bfc1      	itttt	gt
 80050f8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80050fc:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8005100:	fa09 f303 	lslgt.w	r3, r9, r3
 8005104:	fa26 f000 	lsrgt.w	r0, r6, r0
 8005108:	bfda      	itte	le
 800510a:	f1c3 0320 	rsble	r3, r3, #32
 800510e:	fa06 f003 	lslle.w	r0, r6, r3
 8005112:	4318      	orrgt	r0, r3
 8005114:	f7fb f9f6 	bl	8000504 <__aeabi_ui2d>
 8005118:	2301      	movs	r3, #1
 800511a:	4606      	mov	r6, r0
 800511c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8005120:	3d01      	subs	r5, #1
 8005122:	9310      	str	r3, [sp, #64]	; 0x40
 8005124:	e771      	b.n	800500a <_dtoa_r+0x11a>
 8005126:	2301      	movs	r3, #1
 8005128:	e7b6      	b.n	8005098 <_dtoa_r+0x1a8>
 800512a:	900e      	str	r0, [sp, #56]	; 0x38
 800512c:	e7b5      	b.n	800509a <_dtoa_r+0x1aa>
 800512e:	f1ca 0300 	rsb	r3, sl, #0
 8005132:	9306      	str	r3, [sp, #24]
 8005134:	2300      	movs	r3, #0
 8005136:	eba8 080a 	sub.w	r8, r8, sl
 800513a:	930d      	str	r3, [sp, #52]	; 0x34
 800513c:	e7c2      	b.n	80050c4 <_dtoa_r+0x1d4>
 800513e:	2300      	movs	r3, #0
 8005140:	9308      	str	r3, [sp, #32]
 8005142:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005144:	2b00      	cmp	r3, #0
 8005146:	dc39      	bgt.n	80051bc <_dtoa_r+0x2cc>
 8005148:	f04f 0901 	mov.w	r9, #1
 800514c:	f8cd 9004 	str.w	r9, [sp, #4]
 8005150:	464b      	mov	r3, r9
 8005152:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8005156:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8005158:	2200      	movs	r2, #0
 800515a:	6042      	str	r2, [r0, #4]
 800515c:	2204      	movs	r2, #4
 800515e:	f102 0614 	add.w	r6, r2, #20
 8005162:	429e      	cmp	r6, r3
 8005164:	6841      	ldr	r1, [r0, #4]
 8005166:	d92f      	bls.n	80051c8 <_dtoa_r+0x2d8>
 8005168:	4620      	mov	r0, r4
 800516a:	f000 fcc7 	bl	8005afc <_Balloc>
 800516e:	9000      	str	r0, [sp, #0]
 8005170:	2800      	cmp	r0, #0
 8005172:	d14b      	bne.n	800520c <_dtoa_r+0x31c>
 8005174:	4b24      	ldr	r3, [pc, #144]	; (8005208 <_dtoa_r+0x318>)
 8005176:	4602      	mov	r2, r0
 8005178:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800517c:	e6d1      	b.n	8004f22 <_dtoa_r+0x32>
 800517e:	2301      	movs	r3, #1
 8005180:	e7de      	b.n	8005140 <_dtoa_r+0x250>
 8005182:	2300      	movs	r3, #0
 8005184:	9308      	str	r3, [sp, #32]
 8005186:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005188:	eb0a 0903 	add.w	r9, sl, r3
 800518c:	f109 0301 	add.w	r3, r9, #1
 8005190:	2b01      	cmp	r3, #1
 8005192:	9301      	str	r3, [sp, #4]
 8005194:	bfb8      	it	lt
 8005196:	2301      	movlt	r3, #1
 8005198:	e7dd      	b.n	8005156 <_dtoa_r+0x266>
 800519a:	2301      	movs	r3, #1
 800519c:	e7f2      	b.n	8005184 <_dtoa_r+0x294>
 800519e:	2501      	movs	r5, #1
 80051a0:	2300      	movs	r3, #0
 80051a2:	9305      	str	r3, [sp, #20]
 80051a4:	9508      	str	r5, [sp, #32]
 80051a6:	f04f 39ff 	mov.w	r9, #4294967295
 80051aa:	2200      	movs	r2, #0
 80051ac:	f8cd 9004 	str.w	r9, [sp, #4]
 80051b0:	2312      	movs	r3, #18
 80051b2:	9209      	str	r2, [sp, #36]	; 0x24
 80051b4:	e7cf      	b.n	8005156 <_dtoa_r+0x266>
 80051b6:	2301      	movs	r3, #1
 80051b8:	9308      	str	r3, [sp, #32]
 80051ba:	e7f4      	b.n	80051a6 <_dtoa_r+0x2b6>
 80051bc:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80051c0:	f8cd 9004 	str.w	r9, [sp, #4]
 80051c4:	464b      	mov	r3, r9
 80051c6:	e7c6      	b.n	8005156 <_dtoa_r+0x266>
 80051c8:	3101      	adds	r1, #1
 80051ca:	6041      	str	r1, [r0, #4]
 80051cc:	0052      	lsls	r2, r2, #1
 80051ce:	e7c6      	b.n	800515e <_dtoa_r+0x26e>
 80051d0:	636f4361 	.word	0x636f4361
 80051d4:	3fd287a7 	.word	0x3fd287a7
 80051d8:	8b60c8b3 	.word	0x8b60c8b3
 80051dc:	3fc68a28 	.word	0x3fc68a28
 80051e0:	509f79fb 	.word	0x509f79fb
 80051e4:	3fd34413 	.word	0x3fd34413
 80051e8:	080072a5 	.word	0x080072a5
 80051ec:	080072bc 	.word	0x080072bc
 80051f0:	7ff00000 	.word	0x7ff00000
 80051f4:	080072a1 	.word	0x080072a1
 80051f8:	08007298 	.word	0x08007298
 80051fc:	08007275 	.word	0x08007275
 8005200:	3ff80000 	.word	0x3ff80000
 8005204:	080073b8 	.word	0x080073b8
 8005208:	0800731b 	.word	0x0800731b
 800520c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800520e:	9a00      	ldr	r2, [sp, #0]
 8005210:	601a      	str	r2, [r3, #0]
 8005212:	9b01      	ldr	r3, [sp, #4]
 8005214:	2b0e      	cmp	r3, #14
 8005216:	f200 80ad 	bhi.w	8005374 <_dtoa_r+0x484>
 800521a:	2d00      	cmp	r5, #0
 800521c:	f000 80aa 	beq.w	8005374 <_dtoa_r+0x484>
 8005220:	f1ba 0f00 	cmp.w	sl, #0
 8005224:	dd36      	ble.n	8005294 <_dtoa_r+0x3a4>
 8005226:	4ac3      	ldr	r2, [pc, #780]	; (8005534 <_dtoa_r+0x644>)
 8005228:	f00a 030f 	and.w	r3, sl, #15
 800522c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005230:	ed93 7b00 	vldr	d7, [r3]
 8005234:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8005238:	ea4f 172a 	mov.w	r7, sl, asr #4
 800523c:	eeb0 8a47 	vmov.f32	s16, s14
 8005240:	eef0 8a67 	vmov.f32	s17, s15
 8005244:	d016      	beq.n	8005274 <_dtoa_r+0x384>
 8005246:	4bbc      	ldr	r3, [pc, #752]	; (8005538 <_dtoa_r+0x648>)
 8005248:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800524c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005250:	f7fb fafc 	bl	800084c <__aeabi_ddiv>
 8005254:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005258:	f007 070f 	and.w	r7, r7, #15
 800525c:	2503      	movs	r5, #3
 800525e:	4eb6      	ldr	r6, [pc, #728]	; (8005538 <_dtoa_r+0x648>)
 8005260:	b957      	cbnz	r7, 8005278 <_dtoa_r+0x388>
 8005262:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005266:	ec53 2b18 	vmov	r2, r3, d8
 800526a:	f7fb faef 	bl	800084c <__aeabi_ddiv>
 800526e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005272:	e029      	b.n	80052c8 <_dtoa_r+0x3d8>
 8005274:	2502      	movs	r5, #2
 8005276:	e7f2      	b.n	800525e <_dtoa_r+0x36e>
 8005278:	07f9      	lsls	r1, r7, #31
 800527a:	d508      	bpl.n	800528e <_dtoa_r+0x39e>
 800527c:	ec51 0b18 	vmov	r0, r1, d8
 8005280:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005284:	f7fb f9b8 	bl	80005f8 <__aeabi_dmul>
 8005288:	ec41 0b18 	vmov	d8, r0, r1
 800528c:	3501      	adds	r5, #1
 800528e:	107f      	asrs	r7, r7, #1
 8005290:	3608      	adds	r6, #8
 8005292:	e7e5      	b.n	8005260 <_dtoa_r+0x370>
 8005294:	f000 80a6 	beq.w	80053e4 <_dtoa_r+0x4f4>
 8005298:	f1ca 0600 	rsb	r6, sl, #0
 800529c:	4ba5      	ldr	r3, [pc, #660]	; (8005534 <_dtoa_r+0x644>)
 800529e:	4fa6      	ldr	r7, [pc, #664]	; (8005538 <_dtoa_r+0x648>)
 80052a0:	f006 020f 	and.w	r2, r6, #15
 80052a4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80052a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052ac:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80052b0:	f7fb f9a2 	bl	80005f8 <__aeabi_dmul>
 80052b4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80052b8:	1136      	asrs	r6, r6, #4
 80052ba:	2300      	movs	r3, #0
 80052bc:	2502      	movs	r5, #2
 80052be:	2e00      	cmp	r6, #0
 80052c0:	f040 8085 	bne.w	80053ce <_dtoa_r+0x4de>
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d1d2      	bne.n	800526e <_dtoa_r+0x37e>
 80052c8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	f000 808c 	beq.w	80053e8 <_dtoa_r+0x4f8>
 80052d0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80052d4:	4b99      	ldr	r3, [pc, #612]	; (800553c <_dtoa_r+0x64c>)
 80052d6:	2200      	movs	r2, #0
 80052d8:	4630      	mov	r0, r6
 80052da:	4639      	mov	r1, r7
 80052dc:	f7fb fbfe 	bl	8000adc <__aeabi_dcmplt>
 80052e0:	2800      	cmp	r0, #0
 80052e2:	f000 8081 	beq.w	80053e8 <_dtoa_r+0x4f8>
 80052e6:	9b01      	ldr	r3, [sp, #4]
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d07d      	beq.n	80053e8 <_dtoa_r+0x4f8>
 80052ec:	f1b9 0f00 	cmp.w	r9, #0
 80052f0:	dd3c      	ble.n	800536c <_dtoa_r+0x47c>
 80052f2:	f10a 33ff 	add.w	r3, sl, #4294967295
 80052f6:	9307      	str	r3, [sp, #28]
 80052f8:	2200      	movs	r2, #0
 80052fa:	4b91      	ldr	r3, [pc, #580]	; (8005540 <_dtoa_r+0x650>)
 80052fc:	4630      	mov	r0, r6
 80052fe:	4639      	mov	r1, r7
 8005300:	f7fb f97a 	bl	80005f8 <__aeabi_dmul>
 8005304:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005308:	3501      	adds	r5, #1
 800530a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800530e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005312:	4628      	mov	r0, r5
 8005314:	f7fb f906 	bl	8000524 <__aeabi_i2d>
 8005318:	4632      	mov	r2, r6
 800531a:	463b      	mov	r3, r7
 800531c:	f7fb f96c 	bl	80005f8 <__aeabi_dmul>
 8005320:	4b88      	ldr	r3, [pc, #544]	; (8005544 <_dtoa_r+0x654>)
 8005322:	2200      	movs	r2, #0
 8005324:	f7fa ffb2 	bl	800028c <__adddf3>
 8005328:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800532c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005330:	9303      	str	r3, [sp, #12]
 8005332:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005334:	2b00      	cmp	r3, #0
 8005336:	d15c      	bne.n	80053f2 <_dtoa_r+0x502>
 8005338:	4b83      	ldr	r3, [pc, #524]	; (8005548 <_dtoa_r+0x658>)
 800533a:	2200      	movs	r2, #0
 800533c:	4630      	mov	r0, r6
 800533e:	4639      	mov	r1, r7
 8005340:	f7fa ffa2 	bl	8000288 <__aeabi_dsub>
 8005344:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005348:	4606      	mov	r6, r0
 800534a:	460f      	mov	r7, r1
 800534c:	f7fb fbe4 	bl	8000b18 <__aeabi_dcmpgt>
 8005350:	2800      	cmp	r0, #0
 8005352:	f040 8296 	bne.w	8005882 <_dtoa_r+0x992>
 8005356:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800535a:	4630      	mov	r0, r6
 800535c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005360:	4639      	mov	r1, r7
 8005362:	f7fb fbbb 	bl	8000adc <__aeabi_dcmplt>
 8005366:	2800      	cmp	r0, #0
 8005368:	f040 8288 	bne.w	800587c <_dtoa_r+0x98c>
 800536c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005370:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005374:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005376:	2b00      	cmp	r3, #0
 8005378:	f2c0 8158 	blt.w	800562c <_dtoa_r+0x73c>
 800537c:	f1ba 0f0e 	cmp.w	sl, #14
 8005380:	f300 8154 	bgt.w	800562c <_dtoa_r+0x73c>
 8005384:	4b6b      	ldr	r3, [pc, #428]	; (8005534 <_dtoa_r+0x644>)
 8005386:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800538a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800538e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005390:	2b00      	cmp	r3, #0
 8005392:	f280 80e3 	bge.w	800555c <_dtoa_r+0x66c>
 8005396:	9b01      	ldr	r3, [sp, #4]
 8005398:	2b00      	cmp	r3, #0
 800539a:	f300 80df 	bgt.w	800555c <_dtoa_r+0x66c>
 800539e:	f040 826d 	bne.w	800587c <_dtoa_r+0x98c>
 80053a2:	4b69      	ldr	r3, [pc, #420]	; (8005548 <_dtoa_r+0x658>)
 80053a4:	2200      	movs	r2, #0
 80053a6:	4640      	mov	r0, r8
 80053a8:	4649      	mov	r1, r9
 80053aa:	f7fb f925 	bl	80005f8 <__aeabi_dmul>
 80053ae:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80053b2:	f7fb fba7 	bl	8000b04 <__aeabi_dcmpge>
 80053b6:	9e01      	ldr	r6, [sp, #4]
 80053b8:	4637      	mov	r7, r6
 80053ba:	2800      	cmp	r0, #0
 80053bc:	f040 8243 	bne.w	8005846 <_dtoa_r+0x956>
 80053c0:	9d00      	ldr	r5, [sp, #0]
 80053c2:	2331      	movs	r3, #49	; 0x31
 80053c4:	f805 3b01 	strb.w	r3, [r5], #1
 80053c8:	f10a 0a01 	add.w	sl, sl, #1
 80053cc:	e23f      	b.n	800584e <_dtoa_r+0x95e>
 80053ce:	07f2      	lsls	r2, r6, #31
 80053d0:	d505      	bpl.n	80053de <_dtoa_r+0x4ee>
 80053d2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80053d6:	f7fb f90f 	bl	80005f8 <__aeabi_dmul>
 80053da:	3501      	adds	r5, #1
 80053dc:	2301      	movs	r3, #1
 80053de:	1076      	asrs	r6, r6, #1
 80053e0:	3708      	adds	r7, #8
 80053e2:	e76c      	b.n	80052be <_dtoa_r+0x3ce>
 80053e4:	2502      	movs	r5, #2
 80053e6:	e76f      	b.n	80052c8 <_dtoa_r+0x3d8>
 80053e8:	9b01      	ldr	r3, [sp, #4]
 80053ea:	f8cd a01c 	str.w	sl, [sp, #28]
 80053ee:	930c      	str	r3, [sp, #48]	; 0x30
 80053f0:	e78d      	b.n	800530e <_dtoa_r+0x41e>
 80053f2:	9900      	ldr	r1, [sp, #0]
 80053f4:	980c      	ldr	r0, [sp, #48]	; 0x30
 80053f6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80053f8:	4b4e      	ldr	r3, [pc, #312]	; (8005534 <_dtoa_r+0x644>)
 80053fa:	ed9d 7b02 	vldr	d7, [sp, #8]
 80053fe:	4401      	add	r1, r0
 8005400:	9102      	str	r1, [sp, #8]
 8005402:	9908      	ldr	r1, [sp, #32]
 8005404:	eeb0 8a47 	vmov.f32	s16, s14
 8005408:	eef0 8a67 	vmov.f32	s17, s15
 800540c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005410:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005414:	2900      	cmp	r1, #0
 8005416:	d045      	beq.n	80054a4 <_dtoa_r+0x5b4>
 8005418:	494c      	ldr	r1, [pc, #304]	; (800554c <_dtoa_r+0x65c>)
 800541a:	2000      	movs	r0, #0
 800541c:	f7fb fa16 	bl	800084c <__aeabi_ddiv>
 8005420:	ec53 2b18 	vmov	r2, r3, d8
 8005424:	f7fa ff30 	bl	8000288 <__aeabi_dsub>
 8005428:	9d00      	ldr	r5, [sp, #0]
 800542a:	ec41 0b18 	vmov	d8, r0, r1
 800542e:	4639      	mov	r1, r7
 8005430:	4630      	mov	r0, r6
 8005432:	f7fb fb91 	bl	8000b58 <__aeabi_d2iz>
 8005436:	900c      	str	r0, [sp, #48]	; 0x30
 8005438:	f7fb f874 	bl	8000524 <__aeabi_i2d>
 800543c:	4602      	mov	r2, r0
 800543e:	460b      	mov	r3, r1
 8005440:	4630      	mov	r0, r6
 8005442:	4639      	mov	r1, r7
 8005444:	f7fa ff20 	bl	8000288 <__aeabi_dsub>
 8005448:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800544a:	3330      	adds	r3, #48	; 0x30
 800544c:	f805 3b01 	strb.w	r3, [r5], #1
 8005450:	ec53 2b18 	vmov	r2, r3, d8
 8005454:	4606      	mov	r6, r0
 8005456:	460f      	mov	r7, r1
 8005458:	f7fb fb40 	bl	8000adc <__aeabi_dcmplt>
 800545c:	2800      	cmp	r0, #0
 800545e:	d165      	bne.n	800552c <_dtoa_r+0x63c>
 8005460:	4632      	mov	r2, r6
 8005462:	463b      	mov	r3, r7
 8005464:	4935      	ldr	r1, [pc, #212]	; (800553c <_dtoa_r+0x64c>)
 8005466:	2000      	movs	r0, #0
 8005468:	f7fa ff0e 	bl	8000288 <__aeabi_dsub>
 800546c:	ec53 2b18 	vmov	r2, r3, d8
 8005470:	f7fb fb34 	bl	8000adc <__aeabi_dcmplt>
 8005474:	2800      	cmp	r0, #0
 8005476:	f040 80b9 	bne.w	80055ec <_dtoa_r+0x6fc>
 800547a:	9b02      	ldr	r3, [sp, #8]
 800547c:	429d      	cmp	r5, r3
 800547e:	f43f af75 	beq.w	800536c <_dtoa_r+0x47c>
 8005482:	4b2f      	ldr	r3, [pc, #188]	; (8005540 <_dtoa_r+0x650>)
 8005484:	ec51 0b18 	vmov	r0, r1, d8
 8005488:	2200      	movs	r2, #0
 800548a:	f7fb f8b5 	bl	80005f8 <__aeabi_dmul>
 800548e:	4b2c      	ldr	r3, [pc, #176]	; (8005540 <_dtoa_r+0x650>)
 8005490:	ec41 0b18 	vmov	d8, r0, r1
 8005494:	2200      	movs	r2, #0
 8005496:	4630      	mov	r0, r6
 8005498:	4639      	mov	r1, r7
 800549a:	f7fb f8ad 	bl	80005f8 <__aeabi_dmul>
 800549e:	4606      	mov	r6, r0
 80054a0:	460f      	mov	r7, r1
 80054a2:	e7c4      	b.n	800542e <_dtoa_r+0x53e>
 80054a4:	ec51 0b17 	vmov	r0, r1, d7
 80054a8:	f7fb f8a6 	bl	80005f8 <__aeabi_dmul>
 80054ac:	9b02      	ldr	r3, [sp, #8]
 80054ae:	9d00      	ldr	r5, [sp, #0]
 80054b0:	930c      	str	r3, [sp, #48]	; 0x30
 80054b2:	ec41 0b18 	vmov	d8, r0, r1
 80054b6:	4639      	mov	r1, r7
 80054b8:	4630      	mov	r0, r6
 80054ba:	f7fb fb4d 	bl	8000b58 <__aeabi_d2iz>
 80054be:	9011      	str	r0, [sp, #68]	; 0x44
 80054c0:	f7fb f830 	bl	8000524 <__aeabi_i2d>
 80054c4:	4602      	mov	r2, r0
 80054c6:	460b      	mov	r3, r1
 80054c8:	4630      	mov	r0, r6
 80054ca:	4639      	mov	r1, r7
 80054cc:	f7fa fedc 	bl	8000288 <__aeabi_dsub>
 80054d0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80054d2:	3330      	adds	r3, #48	; 0x30
 80054d4:	f805 3b01 	strb.w	r3, [r5], #1
 80054d8:	9b02      	ldr	r3, [sp, #8]
 80054da:	429d      	cmp	r5, r3
 80054dc:	4606      	mov	r6, r0
 80054de:	460f      	mov	r7, r1
 80054e0:	f04f 0200 	mov.w	r2, #0
 80054e4:	d134      	bne.n	8005550 <_dtoa_r+0x660>
 80054e6:	4b19      	ldr	r3, [pc, #100]	; (800554c <_dtoa_r+0x65c>)
 80054e8:	ec51 0b18 	vmov	r0, r1, d8
 80054ec:	f7fa fece 	bl	800028c <__adddf3>
 80054f0:	4602      	mov	r2, r0
 80054f2:	460b      	mov	r3, r1
 80054f4:	4630      	mov	r0, r6
 80054f6:	4639      	mov	r1, r7
 80054f8:	f7fb fb0e 	bl	8000b18 <__aeabi_dcmpgt>
 80054fc:	2800      	cmp	r0, #0
 80054fe:	d175      	bne.n	80055ec <_dtoa_r+0x6fc>
 8005500:	ec53 2b18 	vmov	r2, r3, d8
 8005504:	4911      	ldr	r1, [pc, #68]	; (800554c <_dtoa_r+0x65c>)
 8005506:	2000      	movs	r0, #0
 8005508:	f7fa febe 	bl	8000288 <__aeabi_dsub>
 800550c:	4602      	mov	r2, r0
 800550e:	460b      	mov	r3, r1
 8005510:	4630      	mov	r0, r6
 8005512:	4639      	mov	r1, r7
 8005514:	f7fb fae2 	bl	8000adc <__aeabi_dcmplt>
 8005518:	2800      	cmp	r0, #0
 800551a:	f43f af27 	beq.w	800536c <_dtoa_r+0x47c>
 800551e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005520:	1e6b      	subs	r3, r5, #1
 8005522:	930c      	str	r3, [sp, #48]	; 0x30
 8005524:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005528:	2b30      	cmp	r3, #48	; 0x30
 800552a:	d0f8      	beq.n	800551e <_dtoa_r+0x62e>
 800552c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8005530:	e04a      	b.n	80055c8 <_dtoa_r+0x6d8>
 8005532:	bf00      	nop
 8005534:	080073b8 	.word	0x080073b8
 8005538:	08007390 	.word	0x08007390
 800553c:	3ff00000 	.word	0x3ff00000
 8005540:	40240000 	.word	0x40240000
 8005544:	401c0000 	.word	0x401c0000
 8005548:	40140000 	.word	0x40140000
 800554c:	3fe00000 	.word	0x3fe00000
 8005550:	4baf      	ldr	r3, [pc, #700]	; (8005810 <_dtoa_r+0x920>)
 8005552:	f7fb f851 	bl	80005f8 <__aeabi_dmul>
 8005556:	4606      	mov	r6, r0
 8005558:	460f      	mov	r7, r1
 800555a:	e7ac      	b.n	80054b6 <_dtoa_r+0x5c6>
 800555c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005560:	9d00      	ldr	r5, [sp, #0]
 8005562:	4642      	mov	r2, r8
 8005564:	464b      	mov	r3, r9
 8005566:	4630      	mov	r0, r6
 8005568:	4639      	mov	r1, r7
 800556a:	f7fb f96f 	bl	800084c <__aeabi_ddiv>
 800556e:	f7fb faf3 	bl	8000b58 <__aeabi_d2iz>
 8005572:	9002      	str	r0, [sp, #8]
 8005574:	f7fa ffd6 	bl	8000524 <__aeabi_i2d>
 8005578:	4642      	mov	r2, r8
 800557a:	464b      	mov	r3, r9
 800557c:	f7fb f83c 	bl	80005f8 <__aeabi_dmul>
 8005580:	4602      	mov	r2, r0
 8005582:	460b      	mov	r3, r1
 8005584:	4630      	mov	r0, r6
 8005586:	4639      	mov	r1, r7
 8005588:	f7fa fe7e 	bl	8000288 <__aeabi_dsub>
 800558c:	9e02      	ldr	r6, [sp, #8]
 800558e:	9f01      	ldr	r7, [sp, #4]
 8005590:	3630      	adds	r6, #48	; 0x30
 8005592:	f805 6b01 	strb.w	r6, [r5], #1
 8005596:	9e00      	ldr	r6, [sp, #0]
 8005598:	1bae      	subs	r6, r5, r6
 800559a:	42b7      	cmp	r7, r6
 800559c:	4602      	mov	r2, r0
 800559e:	460b      	mov	r3, r1
 80055a0:	d137      	bne.n	8005612 <_dtoa_r+0x722>
 80055a2:	f7fa fe73 	bl	800028c <__adddf3>
 80055a6:	4642      	mov	r2, r8
 80055a8:	464b      	mov	r3, r9
 80055aa:	4606      	mov	r6, r0
 80055ac:	460f      	mov	r7, r1
 80055ae:	f7fb fab3 	bl	8000b18 <__aeabi_dcmpgt>
 80055b2:	b9c8      	cbnz	r0, 80055e8 <_dtoa_r+0x6f8>
 80055b4:	4642      	mov	r2, r8
 80055b6:	464b      	mov	r3, r9
 80055b8:	4630      	mov	r0, r6
 80055ba:	4639      	mov	r1, r7
 80055bc:	f7fb fa84 	bl	8000ac8 <__aeabi_dcmpeq>
 80055c0:	b110      	cbz	r0, 80055c8 <_dtoa_r+0x6d8>
 80055c2:	9b02      	ldr	r3, [sp, #8]
 80055c4:	07d9      	lsls	r1, r3, #31
 80055c6:	d40f      	bmi.n	80055e8 <_dtoa_r+0x6f8>
 80055c8:	4620      	mov	r0, r4
 80055ca:	4659      	mov	r1, fp
 80055cc:	f000 fad6 	bl	8005b7c <_Bfree>
 80055d0:	2300      	movs	r3, #0
 80055d2:	702b      	strb	r3, [r5, #0]
 80055d4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80055d6:	f10a 0001 	add.w	r0, sl, #1
 80055da:	6018      	str	r0, [r3, #0]
 80055dc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80055de:	2b00      	cmp	r3, #0
 80055e0:	f43f acd8 	beq.w	8004f94 <_dtoa_r+0xa4>
 80055e4:	601d      	str	r5, [r3, #0]
 80055e6:	e4d5      	b.n	8004f94 <_dtoa_r+0xa4>
 80055e8:	f8cd a01c 	str.w	sl, [sp, #28]
 80055ec:	462b      	mov	r3, r5
 80055ee:	461d      	mov	r5, r3
 80055f0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80055f4:	2a39      	cmp	r2, #57	; 0x39
 80055f6:	d108      	bne.n	800560a <_dtoa_r+0x71a>
 80055f8:	9a00      	ldr	r2, [sp, #0]
 80055fa:	429a      	cmp	r2, r3
 80055fc:	d1f7      	bne.n	80055ee <_dtoa_r+0x6fe>
 80055fe:	9a07      	ldr	r2, [sp, #28]
 8005600:	9900      	ldr	r1, [sp, #0]
 8005602:	3201      	adds	r2, #1
 8005604:	9207      	str	r2, [sp, #28]
 8005606:	2230      	movs	r2, #48	; 0x30
 8005608:	700a      	strb	r2, [r1, #0]
 800560a:	781a      	ldrb	r2, [r3, #0]
 800560c:	3201      	adds	r2, #1
 800560e:	701a      	strb	r2, [r3, #0]
 8005610:	e78c      	b.n	800552c <_dtoa_r+0x63c>
 8005612:	4b7f      	ldr	r3, [pc, #508]	; (8005810 <_dtoa_r+0x920>)
 8005614:	2200      	movs	r2, #0
 8005616:	f7fa ffef 	bl	80005f8 <__aeabi_dmul>
 800561a:	2200      	movs	r2, #0
 800561c:	2300      	movs	r3, #0
 800561e:	4606      	mov	r6, r0
 8005620:	460f      	mov	r7, r1
 8005622:	f7fb fa51 	bl	8000ac8 <__aeabi_dcmpeq>
 8005626:	2800      	cmp	r0, #0
 8005628:	d09b      	beq.n	8005562 <_dtoa_r+0x672>
 800562a:	e7cd      	b.n	80055c8 <_dtoa_r+0x6d8>
 800562c:	9a08      	ldr	r2, [sp, #32]
 800562e:	2a00      	cmp	r2, #0
 8005630:	f000 80c4 	beq.w	80057bc <_dtoa_r+0x8cc>
 8005634:	9a05      	ldr	r2, [sp, #20]
 8005636:	2a01      	cmp	r2, #1
 8005638:	f300 80a8 	bgt.w	800578c <_dtoa_r+0x89c>
 800563c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800563e:	2a00      	cmp	r2, #0
 8005640:	f000 80a0 	beq.w	8005784 <_dtoa_r+0x894>
 8005644:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005648:	9e06      	ldr	r6, [sp, #24]
 800564a:	4645      	mov	r5, r8
 800564c:	9a04      	ldr	r2, [sp, #16]
 800564e:	2101      	movs	r1, #1
 8005650:	441a      	add	r2, r3
 8005652:	4620      	mov	r0, r4
 8005654:	4498      	add	r8, r3
 8005656:	9204      	str	r2, [sp, #16]
 8005658:	f000 fb4c 	bl	8005cf4 <__i2b>
 800565c:	4607      	mov	r7, r0
 800565e:	2d00      	cmp	r5, #0
 8005660:	dd0b      	ble.n	800567a <_dtoa_r+0x78a>
 8005662:	9b04      	ldr	r3, [sp, #16]
 8005664:	2b00      	cmp	r3, #0
 8005666:	dd08      	ble.n	800567a <_dtoa_r+0x78a>
 8005668:	42ab      	cmp	r3, r5
 800566a:	9a04      	ldr	r2, [sp, #16]
 800566c:	bfa8      	it	ge
 800566e:	462b      	movge	r3, r5
 8005670:	eba8 0803 	sub.w	r8, r8, r3
 8005674:	1aed      	subs	r5, r5, r3
 8005676:	1ad3      	subs	r3, r2, r3
 8005678:	9304      	str	r3, [sp, #16]
 800567a:	9b06      	ldr	r3, [sp, #24]
 800567c:	b1fb      	cbz	r3, 80056be <_dtoa_r+0x7ce>
 800567e:	9b08      	ldr	r3, [sp, #32]
 8005680:	2b00      	cmp	r3, #0
 8005682:	f000 809f 	beq.w	80057c4 <_dtoa_r+0x8d4>
 8005686:	2e00      	cmp	r6, #0
 8005688:	dd11      	ble.n	80056ae <_dtoa_r+0x7be>
 800568a:	4639      	mov	r1, r7
 800568c:	4632      	mov	r2, r6
 800568e:	4620      	mov	r0, r4
 8005690:	f000 fbec 	bl	8005e6c <__pow5mult>
 8005694:	465a      	mov	r2, fp
 8005696:	4601      	mov	r1, r0
 8005698:	4607      	mov	r7, r0
 800569a:	4620      	mov	r0, r4
 800569c:	f000 fb40 	bl	8005d20 <__multiply>
 80056a0:	4659      	mov	r1, fp
 80056a2:	9007      	str	r0, [sp, #28]
 80056a4:	4620      	mov	r0, r4
 80056a6:	f000 fa69 	bl	8005b7c <_Bfree>
 80056aa:	9b07      	ldr	r3, [sp, #28]
 80056ac:	469b      	mov	fp, r3
 80056ae:	9b06      	ldr	r3, [sp, #24]
 80056b0:	1b9a      	subs	r2, r3, r6
 80056b2:	d004      	beq.n	80056be <_dtoa_r+0x7ce>
 80056b4:	4659      	mov	r1, fp
 80056b6:	4620      	mov	r0, r4
 80056b8:	f000 fbd8 	bl	8005e6c <__pow5mult>
 80056bc:	4683      	mov	fp, r0
 80056be:	2101      	movs	r1, #1
 80056c0:	4620      	mov	r0, r4
 80056c2:	f000 fb17 	bl	8005cf4 <__i2b>
 80056c6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	4606      	mov	r6, r0
 80056cc:	dd7c      	ble.n	80057c8 <_dtoa_r+0x8d8>
 80056ce:	461a      	mov	r2, r3
 80056d0:	4601      	mov	r1, r0
 80056d2:	4620      	mov	r0, r4
 80056d4:	f000 fbca 	bl	8005e6c <__pow5mult>
 80056d8:	9b05      	ldr	r3, [sp, #20]
 80056da:	2b01      	cmp	r3, #1
 80056dc:	4606      	mov	r6, r0
 80056de:	dd76      	ble.n	80057ce <_dtoa_r+0x8de>
 80056e0:	2300      	movs	r3, #0
 80056e2:	9306      	str	r3, [sp, #24]
 80056e4:	6933      	ldr	r3, [r6, #16]
 80056e6:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80056ea:	6918      	ldr	r0, [r3, #16]
 80056ec:	f000 fab2 	bl	8005c54 <__hi0bits>
 80056f0:	f1c0 0020 	rsb	r0, r0, #32
 80056f4:	9b04      	ldr	r3, [sp, #16]
 80056f6:	4418      	add	r0, r3
 80056f8:	f010 001f 	ands.w	r0, r0, #31
 80056fc:	f000 8086 	beq.w	800580c <_dtoa_r+0x91c>
 8005700:	f1c0 0320 	rsb	r3, r0, #32
 8005704:	2b04      	cmp	r3, #4
 8005706:	dd7f      	ble.n	8005808 <_dtoa_r+0x918>
 8005708:	f1c0 001c 	rsb	r0, r0, #28
 800570c:	9b04      	ldr	r3, [sp, #16]
 800570e:	4403      	add	r3, r0
 8005710:	4480      	add	r8, r0
 8005712:	4405      	add	r5, r0
 8005714:	9304      	str	r3, [sp, #16]
 8005716:	f1b8 0f00 	cmp.w	r8, #0
 800571a:	dd05      	ble.n	8005728 <_dtoa_r+0x838>
 800571c:	4659      	mov	r1, fp
 800571e:	4642      	mov	r2, r8
 8005720:	4620      	mov	r0, r4
 8005722:	f000 fbfd 	bl	8005f20 <__lshift>
 8005726:	4683      	mov	fp, r0
 8005728:	9b04      	ldr	r3, [sp, #16]
 800572a:	2b00      	cmp	r3, #0
 800572c:	dd05      	ble.n	800573a <_dtoa_r+0x84a>
 800572e:	4631      	mov	r1, r6
 8005730:	461a      	mov	r2, r3
 8005732:	4620      	mov	r0, r4
 8005734:	f000 fbf4 	bl	8005f20 <__lshift>
 8005738:	4606      	mov	r6, r0
 800573a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800573c:	2b00      	cmp	r3, #0
 800573e:	d069      	beq.n	8005814 <_dtoa_r+0x924>
 8005740:	4631      	mov	r1, r6
 8005742:	4658      	mov	r0, fp
 8005744:	f000 fc58 	bl	8005ff8 <__mcmp>
 8005748:	2800      	cmp	r0, #0
 800574a:	da63      	bge.n	8005814 <_dtoa_r+0x924>
 800574c:	2300      	movs	r3, #0
 800574e:	4659      	mov	r1, fp
 8005750:	220a      	movs	r2, #10
 8005752:	4620      	mov	r0, r4
 8005754:	f000 fa34 	bl	8005bc0 <__multadd>
 8005758:	9b08      	ldr	r3, [sp, #32]
 800575a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800575e:	4683      	mov	fp, r0
 8005760:	2b00      	cmp	r3, #0
 8005762:	f000 818f 	beq.w	8005a84 <_dtoa_r+0xb94>
 8005766:	4639      	mov	r1, r7
 8005768:	2300      	movs	r3, #0
 800576a:	220a      	movs	r2, #10
 800576c:	4620      	mov	r0, r4
 800576e:	f000 fa27 	bl	8005bc0 <__multadd>
 8005772:	f1b9 0f00 	cmp.w	r9, #0
 8005776:	4607      	mov	r7, r0
 8005778:	f300 808e 	bgt.w	8005898 <_dtoa_r+0x9a8>
 800577c:	9b05      	ldr	r3, [sp, #20]
 800577e:	2b02      	cmp	r3, #2
 8005780:	dc50      	bgt.n	8005824 <_dtoa_r+0x934>
 8005782:	e089      	b.n	8005898 <_dtoa_r+0x9a8>
 8005784:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005786:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800578a:	e75d      	b.n	8005648 <_dtoa_r+0x758>
 800578c:	9b01      	ldr	r3, [sp, #4]
 800578e:	1e5e      	subs	r6, r3, #1
 8005790:	9b06      	ldr	r3, [sp, #24]
 8005792:	42b3      	cmp	r3, r6
 8005794:	bfbf      	itttt	lt
 8005796:	9b06      	ldrlt	r3, [sp, #24]
 8005798:	9606      	strlt	r6, [sp, #24]
 800579a:	1af2      	sublt	r2, r6, r3
 800579c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800579e:	bfb6      	itet	lt
 80057a0:	189b      	addlt	r3, r3, r2
 80057a2:	1b9e      	subge	r6, r3, r6
 80057a4:	930d      	strlt	r3, [sp, #52]	; 0x34
 80057a6:	9b01      	ldr	r3, [sp, #4]
 80057a8:	bfb8      	it	lt
 80057aa:	2600      	movlt	r6, #0
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	bfb5      	itete	lt
 80057b0:	eba8 0503 	sublt.w	r5, r8, r3
 80057b4:	9b01      	ldrge	r3, [sp, #4]
 80057b6:	2300      	movlt	r3, #0
 80057b8:	4645      	movge	r5, r8
 80057ba:	e747      	b.n	800564c <_dtoa_r+0x75c>
 80057bc:	9e06      	ldr	r6, [sp, #24]
 80057be:	9f08      	ldr	r7, [sp, #32]
 80057c0:	4645      	mov	r5, r8
 80057c2:	e74c      	b.n	800565e <_dtoa_r+0x76e>
 80057c4:	9a06      	ldr	r2, [sp, #24]
 80057c6:	e775      	b.n	80056b4 <_dtoa_r+0x7c4>
 80057c8:	9b05      	ldr	r3, [sp, #20]
 80057ca:	2b01      	cmp	r3, #1
 80057cc:	dc18      	bgt.n	8005800 <_dtoa_r+0x910>
 80057ce:	9b02      	ldr	r3, [sp, #8]
 80057d0:	b9b3      	cbnz	r3, 8005800 <_dtoa_r+0x910>
 80057d2:	9b03      	ldr	r3, [sp, #12]
 80057d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80057d8:	b9a3      	cbnz	r3, 8005804 <_dtoa_r+0x914>
 80057da:	9b03      	ldr	r3, [sp, #12]
 80057dc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80057e0:	0d1b      	lsrs	r3, r3, #20
 80057e2:	051b      	lsls	r3, r3, #20
 80057e4:	b12b      	cbz	r3, 80057f2 <_dtoa_r+0x902>
 80057e6:	9b04      	ldr	r3, [sp, #16]
 80057e8:	3301      	adds	r3, #1
 80057ea:	9304      	str	r3, [sp, #16]
 80057ec:	f108 0801 	add.w	r8, r8, #1
 80057f0:	2301      	movs	r3, #1
 80057f2:	9306      	str	r3, [sp, #24]
 80057f4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	f47f af74 	bne.w	80056e4 <_dtoa_r+0x7f4>
 80057fc:	2001      	movs	r0, #1
 80057fe:	e779      	b.n	80056f4 <_dtoa_r+0x804>
 8005800:	2300      	movs	r3, #0
 8005802:	e7f6      	b.n	80057f2 <_dtoa_r+0x902>
 8005804:	9b02      	ldr	r3, [sp, #8]
 8005806:	e7f4      	b.n	80057f2 <_dtoa_r+0x902>
 8005808:	d085      	beq.n	8005716 <_dtoa_r+0x826>
 800580a:	4618      	mov	r0, r3
 800580c:	301c      	adds	r0, #28
 800580e:	e77d      	b.n	800570c <_dtoa_r+0x81c>
 8005810:	40240000 	.word	0x40240000
 8005814:	9b01      	ldr	r3, [sp, #4]
 8005816:	2b00      	cmp	r3, #0
 8005818:	dc38      	bgt.n	800588c <_dtoa_r+0x99c>
 800581a:	9b05      	ldr	r3, [sp, #20]
 800581c:	2b02      	cmp	r3, #2
 800581e:	dd35      	ble.n	800588c <_dtoa_r+0x99c>
 8005820:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8005824:	f1b9 0f00 	cmp.w	r9, #0
 8005828:	d10d      	bne.n	8005846 <_dtoa_r+0x956>
 800582a:	4631      	mov	r1, r6
 800582c:	464b      	mov	r3, r9
 800582e:	2205      	movs	r2, #5
 8005830:	4620      	mov	r0, r4
 8005832:	f000 f9c5 	bl	8005bc0 <__multadd>
 8005836:	4601      	mov	r1, r0
 8005838:	4606      	mov	r6, r0
 800583a:	4658      	mov	r0, fp
 800583c:	f000 fbdc 	bl	8005ff8 <__mcmp>
 8005840:	2800      	cmp	r0, #0
 8005842:	f73f adbd 	bgt.w	80053c0 <_dtoa_r+0x4d0>
 8005846:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005848:	9d00      	ldr	r5, [sp, #0]
 800584a:	ea6f 0a03 	mvn.w	sl, r3
 800584e:	f04f 0800 	mov.w	r8, #0
 8005852:	4631      	mov	r1, r6
 8005854:	4620      	mov	r0, r4
 8005856:	f000 f991 	bl	8005b7c <_Bfree>
 800585a:	2f00      	cmp	r7, #0
 800585c:	f43f aeb4 	beq.w	80055c8 <_dtoa_r+0x6d8>
 8005860:	f1b8 0f00 	cmp.w	r8, #0
 8005864:	d005      	beq.n	8005872 <_dtoa_r+0x982>
 8005866:	45b8      	cmp	r8, r7
 8005868:	d003      	beq.n	8005872 <_dtoa_r+0x982>
 800586a:	4641      	mov	r1, r8
 800586c:	4620      	mov	r0, r4
 800586e:	f000 f985 	bl	8005b7c <_Bfree>
 8005872:	4639      	mov	r1, r7
 8005874:	4620      	mov	r0, r4
 8005876:	f000 f981 	bl	8005b7c <_Bfree>
 800587a:	e6a5      	b.n	80055c8 <_dtoa_r+0x6d8>
 800587c:	2600      	movs	r6, #0
 800587e:	4637      	mov	r7, r6
 8005880:	e7e1      	b.n	8005846 <_dtoa_r+0x956>
 8005882:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8005884:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8005888:	4637      	mov	r7, r6
 800588a:	e599      	b.n	80053c0 <_dtoa_r+0x4d0>
 800588c:	9b08      	ldr	r3, [sp, #32]
 800588e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8005892:	2b00      	cmp	r3, #0
 8005894:	f000 80fd 	beq.w	8005a92 <_dtoa_r+0xba2>
 8005898:	2d00      	cmp	r5, #0
 800589a:	dd05      	ble.n	80058a8 <_dtoa_r+0x9b8>
 800589c:	4639      	mov	r1, r7
 800589e:	462a      	mov	r2, r5
 80058a0:	4620      	mov	r0, r4
 80058a2:	f000 fb3d 	bl	8005f20 <__lshift>
 80058a6:	4607      	mov	r7, r0
 80058a8:	9b06      	ldr	r3, [sp, #24]
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d05c      	beq.n	8005968 <_dtoa_r+0xa78>
 80058ae:	6879      	ldr	r1, [r7, #4]
 80058b0:	4620      	mov	r0, r4
 80058b2:	f000 f923 	bl	8005afc <_Balloc>
 80058b6:	4605      	mov	r5, r0
 80058b8:	b928      	cbnz	r0, 80058c6 <_dtoa_r+0x9d6>
 80058ba:	4b80      	ldr	r3, [pc, #512]	; (8005abc <_dtoa_r+0xbcc>)
 80058bc:	4602      	mov	r2, r0
 80058be:	f240 21ea 	movw	r1, #746	; 0x2ea
 80058c2:	f7ff bb2e 	b.w	8004f22 <_dtoa_r+0x32>
 80058c6:	693a      	ldr	r2, [r7, #16]
 80058c8:	3202      	adds	r2, #2
 80058ca:	0092      	lsls	r2, r2, #2
 80058cc:	f107 010c 	add.w	r1, r7, #12
 80058d0:	300c      	adds	r0, #12
 80058d2:	f000 f905 	bl	8005ae0 <memcpy>
 80058d6:	2201      	movs	r2, #1
 80058d8:	4629      	mov	r1, r5
 80058da:	4620      	mov	r0, r4
 80058dc:	f000 fb20 	bl	8005f20 <__lshift>
 80058e0:	9b00      	ldr	r3, [sp, #0]
 80058e2:	3301      	adds	r3, #1
 80058e4:	9301      	str	r3, [sp, #4]
 80058e6:	9b00      	ldr	r3, [sp, #0]
 80058e8:	444b      	add	r3, r9
 80058ea:	9307      	str	r3, [sp, #28]
 80058ec:	9b02      	ldr	r3, [sp, #8]
 80058ee:	f003 0301 	and.w	r3, r3, #1
 80058f2:	46b8      	mov	r8, r7
 80058f4:	9306      	str	r3, [sp, #24]
 80058f6:	4607      	mov	r7, r0
 80058f8:	9b01      	ldr	r3, [sp, #4]
 80058fa:	4631      	mov	r1, r6
 80058fc:	3b01      	subs	r3, #1
 80058fe:	4658      	mov	r0, fp
 8005900:	9302      	str	r3, [sp, #8]
 8005902:	f7ff fa67 	bl	8004dd4 <quorem>
 8005906:	4603      	mov	r3, r0
 8005908:	3330      	adds	r3, #48	; 0x30
 800590a:	9004      	str	r0, [sp, #16]
 800590c:	4641      	mov	r1, r8
 800590e:	4658      	mov	r0, fp
 8005910:	9308      	str	r3, [sp, #32]
 8005912:	f000 fb71 	bl	8005ff8 <__mcmp>
 8005916:	463a      	mov	r2, r7
 8005918:	4681      	mov	r9, r0
 800591a:	4631      	mov	r1, r6
 800591c:	4620      	mov	r0, r4
 800591e:	f000 fb87 	bl	8006030 <__mdiff>
 8005922:	68c2      	ldr	r2, [r0, #12]
 8005924:	9b08      	ldr	r3, [sp, #32]
 8005926:	4605      	mov	r5, r0
 8005928:	bb02      	cbnz	r2, 800596c <_dtoa_r+0xa7c>
 800592a:	4601      	mov	r1, r0
 800592c:	4658      	mov	r0, fp
 800592e:	f000 fb63 	bl	8005ff8 <__mcmp>
 8005932:	9b08      	ldr	r3, [sp, #32]
 8005934:	4602      	mov	r2, r0
 8005936:	4629      	mov	r1, r5
 8005938:	4620      	mov	r0, r4
 800593a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800593e:	f000 f91d 	bl	8005b7c <_Bfree>
 8005942:	9b05      	ldr	r3, [sp, #20]
 8005944:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005946:	9d01      	ldr	r5, [sp, #4]
 8005948:	ea43 0102 	orr.w	r1, r3, r2
 800594c:	9b06      	ldr	r3, [sp, #24]
 800594e:	430b      	orrs	r3, r1
 8005950:	9b08      	ldr	r3, [sp, #32]
 8005952:	d10d      	bne.n	8005970 <_dtoa_r+0xa80>
 8005954:	2b39      	cmp	r3, #57	; 0x39
 8005956:	d029      	beq.n	80059ac <_dtoa_r+0xabc>
 8005958:	f1b9 0f00 	cmp.w	r9, #0
 800595c:	dd01      	ble.n	8005962 <_dtoa_r+0xa72>
 800595e:	9b04      	ldr	r3, [sp, #16]
 8005960:	3331      	adds	r3, #49	; 0x31
 8005962:	9a02      	ldr	r2, [sp, #8]
 8005964:	7013      	strb	r3, [r2, #0]
 8005966:	e774      	b.n	8005852 <_dtoa_r+0x962>
 8005968:	4638      	mov	r0, r7
 800596a:	e7b9      	b.n	80058e0 <_dtoa_r+0x9f0>
 800596c:	2201      	movs	r2, #1
 800596e:	e7e2      	b.n	8005936 <_dtoa_r+0xa46>
 8005970:	f1b9 0f00 	cmp.w	r9, #0
 8005974:	db06      	blt.n	8005984 <_dtoa_r+0xa94>
 8005976:	9905      	ldr	r1, [sp, #20]
 8005978:	ea41 0909 	orr.w	r9, r1, r9
 800597c:	9906      	ldr	r1, [sp, #24]
 800597e:	ea59 0101 	orrs.w	r1, r9, r1
 8005982:	d120      	bne.n	80059c6 <_dtoa_r+0xad6>
 8005984:	2a00      	cmp	r2, #0
 8005986:	ddec      	ble.n	8005962 <_dtoa_r+0xa72>
 8005988:	4659      	mov	r1, fp
 800598a:	2201      	movs	r2, #1
 800598c:	4620      	mov	r0, r4
 800598e:	9301      	str	r3, [sp, #4]
 8005990:	f000 fac6 	bl	8005f20 <__lshift>
 8005994:	4631      	mov	r1, r6
 8005996:	4683      	mov	fp, r0
 8005998:	f000 fb2e 	bl	8005ff8 <__mcmp>
 800599c:	2800      	cmp	r0, #0
 800599e:	9b01      	ldr	r3, [sp, #4]
 80059a0:	dc02      	bgt.n	80059a8 <_dtoa_r+0xab8>
 80059a2:	d1de      	bne.n	8005962 <_dtoa_r+0xa72>
 80059a4:	07da      	lsls	r2, r3, #31
 80059a6:	d5dc      	bpl.n	8005962 <_dtoa_r+0xa72>
 80059a8:	2b39      	cmp	r3, #57	; 0x39
 80059aa:	d1d8      	bne.n	800595e <_dtoa_r+0xa6e>
 80059ac:	9a02      	ldr	r2, [sp, #8]
 80059ae:	2339      	movs	r3, #57	; 0x39
 80059b0:	7013      	strb	r3, [r2, #0]
 80059b2:	462b      	mov	r3, r5
 80059b4:	461d      	mov	r5, r3
 80059b6:	3b01      	subs	r3, #1
 80059b8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80059bc:	2a39      	cmp	r2, #57	; 0x39
 80059be:	d050      	beq.n	8005a62 <_dtoa_r+0xb72>
 80059c0:	3201      	adds	r2, #1
 80059c2:	701a      	strb	r2, [r3, #0]
 80059c4:	e745      	b.n	8005852 <_dtoa_r+0x962>
 80059c6:	2a00      	cmp	r2, #0
 80059c8:	dd03      	ble.n	80059d2 <_dtoa_r+0xae2>
 80059ca:	2b39      	cmp	r3, #57	; 0x39
 80059cc:	d0ee      	beq.n	80059ac <_dtoa_r+0xabc>
 80059ce:	3301      	adds	r3, #1
 80059d0:	e7c7      	b.n	8005962 <_dtoa_r+0xa72>
 80059d2:	9a01      	ldr	r2, [sp, #4]
 80059d4:	9907      	ldr	r1, [sp, #28]
 80059d6:	f802 3c01 	strb.w	r3, [r2, #-1]
 80059da:	428a      	cmp	r2, r1
 80059dc:	d02a      	beq.n	8005a34 <_dtoa_r+0xb44>
 80059de:	4659      	mov	r1, fp
 80059e0:	2300      	movs	r3, #0
 80059e2:	220a      	movs	r2, #10
 80059e4:	4620      	mov	r0, r4
 80059e6:	f000 f8eb 	bl	8005bc0 <__multadd>
 80059ea:	45b8      	cmp	r8, r7
 80059ec:	4683      	mov	fp, r0
 80059ee:	f04f 0300 	mov.w	r3, #0
 80059f2:	f04f 020a 	mov.w	r2, #10
 80059f6:	4641      	mov	r1, r8
 80059f8:	4620      	mov	r0, r4
 80059fa:	d107      	bne.n	8005a0c <_dtoa_r+0xb1c>
 80059fc:	f000 f8e0 	bl	8005bc0 <__multadd>
 8005a00:	4680      	mov	r8, r0
 8005a02:	4607      	mov	r7, r0
 8005a04:	9b01      	ldr	r3, [sp, #4]
 8005a06:	3301      	adds	r3, #1
 8005a08:	9301      	str	r3, [sp, #4]
 8005a0a:	e775      	b.n	80058f8 <_dtoa_r+0xa08>
 8005a0c:	f000 f8d8 	bl	8005bc0 <__multadd>
 8005a10:	4639      	mov	r1, r7
 8005a12:	4680      	mov	r8, r0
 8005a14:	2300      	movs	r3, #0
 8005a16:	220a      	movs	r2, #10
 8005a18:	4620      	mov	r0, r4
 8005a1a:	f000 f8d1 	bl	8005bc0 <__multadd>
 8005a1e:	4607      	mov	r7, r0
 8005a20:	e7f0      	b.n	8005a04 <_dtoa_r+0xb14>
 8005a22:	f1b9 0f00 	cmp.w	r9, #0
 8005a26:	9a00      	ldr	r2, [sp, #0]
 8005a28:	bfcc      	ite	gt
 8005a2a:	464d      	movgt	r5, r9
 8005a2c:	2501      	movle	r5, #1
 8005a2e:	4415      	add	r5, r2
 8005a30:	f04f 0800 	mov.w	r8, #0
 8005a34:	4659      	mov	r1, fp
 8005a36:	2201      	movs	r2, #1
 8005a38:	4620      	mov	r0, r4
 8005a3a:	9301      	str	r3, [sp, #4]
 8005a3c:	f000 fa70 	bl	8005f20 <__lshift>
 8005a40:	4631      	mov	r1, r6
 8005a42:	4683      	mov	fp, r0
 8005a44:	f000 fad8 	bl	8005ff8 <__mcmp>
 8005a48:	2800      	cmp	r0, #0
 8005a4a:	dcb2      	bgt.n	80059b2 <_dtoa_r+0xac2>
 8005a4c:	d102      	bne.n	8005a54 <_dtoa_r+0xb64>
 8005a4e:	9b01      	ldr	r3, [sp, #4]
 8005a50:	07db      	lsls	r3, r3, #31
 8005a52:	d4ae      	bmi.n	80059b2 <_dtoa_r+0xac2>
 8005a54:	462b      	mov	r3, r5
 8005a56:	461d      	mov	r5, r3
 8005a58:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005a5c:	2a30      	cmp	r2, #48	; 0x30
 8005a5e:	d0fa      	beq.n	8005a56 <_dtoa_r+0xb66>
 8005a60:	e6f7      	b.n	8005852 <_dtoa_r+0x962>
 8005a62:	9a00      	ldr	r2, [sp, #0]
 8005a64:	429a      	cmp	r2, r3
 8005a66:	d1a5      	bne.n	80059b4 <_dtoa_r+0xac4>
 8005a68:	f10a 0a01 	add.w	sl, sl, #1
 8005a6c:	2331      	movs	r3, #49	; 0x31
 8005a6e:	e779      	b.n	8005964 <_dtoa_r+0xa74>
 8005a70:	4b13      	ldr	r3, [pc, #76]	; (8005ac0 <_dtoa_r+0xbd0>)
 8005a72:	f7ff baaf 	b.w	8004fd4 <_dtoa_r+0xe4>
 8005a76:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	f47f aa86 	bne.w	8004f8a <_dtoa_r+0x9a>
 8005a7e:	4b11      	ldr	r3, [pc, #68]	; (8005ac4 <_dtoa_r+0xbd4>)
 8005a80:	f7ff baa8 	b.w	8004fd4 <_dtoa_r+0xe4>
 8005a84:	f1b9 0f00 	cmp.w	r9, #0
 8005a88:	dc03      	bgt.n	8005a92 <_dtoa_r+0xba2>
 8005a8a:	9b05      	ldr	r3, [sp, #20]
 8005a8c:	2b02      	cmp	r3, #2
 8005a8e:	f73f aec9 	bgt.w	8005824 <_dtoa_r+0x934>
 8005a92:	9d00      	ldr	r5, [sp, #0]
 8005a94:	4631      	mov	r1, r6
 8005a96:	4658      	mov	r0, fp
 8005a98:	f7ff f99c 	bl	8004dd4 <quorem>
 8005a9c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8005aa0:	f805 3b01 	strb.w	r3, [r5], #1
 8005aa4:	9a00      	ldr	r2, [sp, #0]
 8005aa6:	1aaa      	subs	r2, r5, r2
 8005aa8:	4591      	cmp	r9, r2
 8005aaa:	ddba      	ble.n	8005a22 <_dtoa_r+0xb32>
 8005aac:	4659      	mov	r1, fp
 8005aae:	2300      	movs	r3, #0
 8005ab0:	220a      	movs	r2, #10
 8005ab2:	4620      	mov	r0, r4
 8005ab4:	f000 f884 	bl	8005bc0 <__multadd>
 8005ab8:	4683      	mov	fp, r0
 8005aba:	e7eb      	b.n	8005a94 <_dtoa_r+0xba4>
 8005abc:	0800731b 	.word	0x0800731b
 8005ac0:	08007274 	.word	0x08007274
 8005ac4:	08007298 	.word	0x08007298

08005ac8 <_localeconv_r>:
 8005ac8:	4800      	ldr	r0, [pc, #0]	; (8005acc <_localeconv_r+0x4>)
 8005aca:	4770      	bx	lr
 8005acc:	20000160 	.word	0x20000160

08005ad0 <malloc>:
 8005ad0:	4b02      	ldr	r3, [pc, #8]	; (8005adc <malloc+0xc>)
 8005ad2:	4601      	mov	r1, r0
 8005ad4:	6818      	ldr	r0, [r3, #0]
 8005ad6:	f000 bbef 	b.w	80062b8 <_malloc_r>
 8005ada:	bf00      	nop
 8005adc:	2000000c 	.word	0x2000000c

08005ae0 <memcpy>:
 8005ae0:	440a      	add	r2, r1
 8005ae2:	4291      	cmp	r1, r2
 8005ae4:	f100 33ff 	add.w	r3, r0, #4294967295
 8005ae8:	d100      	bne.n	8005aec <memcpy+0xc>
 8005aea:	4770      	bx	lr
 8005aec:	b510      	push	{r4, lr}
 8005aee:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005af2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005af6:	4291      	cmp	r1, r2
 8005af8:	d1f9      	bne.n	8005aee <memcpy+0xe>
 8005afa:	bd10      	pop	{r4, pc}

08005afc <_Balloc>:
 8005afc:	b570      	push	{r4, r5, r6, lr}
 8005afe:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005b00:	4604      	mov	r4, r0
 8005b02:	460d      	mov	r5, r1
 8005b04:	b976      	cbnz	r6, 8005b24 <_Balloc+0x28>
 8005b06:	2010      	movs	r0, #16
 8005b08:	f7ff ffe2 	bl	8005ad0 <malloc>
 8005b0c:	4602      	mov	r2, r0
 8005b0e:	6260      	str	r0, [r4, #36]	; 0x24
 8005b10:	b920      	cbnz	r0, 8005b1c <_Balloc+0x20>
 8005b12:	4b18      	ldr	r3, [pc, #96]	; (8005b74 <_Balloc+0x78>)
 8005b14:	4818      	ldr	r0, [pc, #96]	; (8005b78 <_Balloc+0x7c>)
 8005b16:	2166      	movs	r1, #102	; 0x66
 8005b18:	f000 fd94 	bl	8006644 <__assert_func>
 8005b1c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005b20:	6006      	str	r6, [r0, #0]
 8005b22:	60c6      	str	r6, [r0, #12]
 8005b24:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8005b26:	68f3      	ldr	r3, [r6, #12]
 8005b28:	b183      	cbz	r3, 8005b4c <_Balloc+0x50>
 8005b2a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005b2c:	68db      	ldr	r3, [r3, #12]
 8005b2e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005b32:	b9b8      	cbnz	r0, 8005b64 <_Balloc+0x68>
 8005b34:	2101      	movs	r1, #1
 8005b36:	fa01 f605 	lsl.w	r6, r1, r5
 8005b3a:	1d72      	adds	r2, r6, #5
 8005b3c:	0092      	lsls	r2, r2, #2
 8005b3e:	4620      	mov	r0, r4
 8005b40:	f000 fb5a 	bl	80061f8 <_calloc_r>
 8005b44:	b160      	cbz	r0, 8005b60 <_Balloc+0x64>
 8005b46:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005b4a:	e00e      	b.n	8005b6a <_Balloc+0x6e>
 8005b4c:	2221      	movs	r2, #33	; 0x21
 8005b4e:	2104      	movs	r1, #4
 8005b50:	4620      	mov	r0, r4
 8005b52:	f000 fb51 	bl	80061f8 <_calloc_r>
 8005b56:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005b58:	60f0      	str	r0, [r6, #12]
 8005b5a:	68db      	ldr	r3, [r3, #12]
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d1e4      	bne.n	8005b2a <_Balloc+0x2e>
 8005b60:	2000      	movs	r0, #0
 8005b62:	bd70      	pop	{r4, r5, r6, pc}
 8005b64:	6802      	ldr	r2, [r0, #0]
 8005b66:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005b6a:	2300      	movs	r3, #0
 8005b6c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005b70:	e7f7      	b.n	8005b62 <_Balloc+0x66>
 8005b72:	bf00      	nop
 8005b74:	080072a5 	.word	0x080072a5
 8005b78:	0800732c 	.word	0x0800732c

08005b7c <_Bfree>:
 8005b7c:	b570      	push	{r4, r5, r6, lr}
 8005b7e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005b80:	4605      	mov	r5, r0
 8005b82:	460c      	mov	r4, r1
 8005b84:	b976      	cbnz	r6, 8005ba4 <_Bfree+0x28>
 8005b86:	2010      	movs	r0, #16
 8005b88:	f7ff ffa2 	bl	8005ad0 <malloc>
 8005b8c:	4602      	mov	r2, r0
 8005b8e:	6268      	str	r0, [r5, #36]	; 0x24
 8005b90:	b920      	cbnz	r0, 8005b9c <_Bfree+0x20>
 8005b92:	4b09      	ldr	r3, [pc, #36]	; (8005bb8 <_Bfree+0x3c>)
 8005b94:	4809      	ldr	r0, [pc, #36]	; (8005bbc <_Bfree+0x40>)
 8005b96:	218a      	movs	r1, #138	; 0x8a
 8005b98:	f000 fd54 	bl	8006644 <__assert_func>
 8005b9c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005ba0:	6006      	str	r6, [r0, #0]
 8005ba2:	60c6      	str	r6, [r0, #12]
 8005ba4:	b13c      	cbz	r4, 8005bb6 <_Bfree+0x3a>
 8005ba6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005ba8:	6862      	ldr	r2, [r4, #4]
 8005baa:	68db      	ldr	r3, [r3, #12]
 8005bac:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005bb0:	6021      	str	r1, [r4, #0]
 8005bb2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005bb6:	bd70      	pop	{r4, r5, r6, pc}
 8005bb8:	080072a5 	.word	0x080072a5
 8005bbc:	0800732c 	.word	0x0800732c

08005bc0 <__multadd>:
 8005bc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005bc4:	690e      	ldr	r6, [r1, #16]
 8005bc6:	4607      	mov	r7, r0
 8005bc8:	4698      	mov	r8, r3
 8005bca:	460c      	mov	r4, r1
 8005bcc:	f101 0014 	add.w	r0, r1, #20
 8005bd0:	2300      	movs	r3, #0
 8005bd2:	6805      	ldr	r5, [r0, #0]
 8005bd4:	b2a9      	uxth	r1, r5
 8005bd6:	fb02 8101 	mla	r1, r2, r1, r8
 8005bda:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8005bde:	0c2d      	lsrs	r5, r5, #16
 8005be0:	fb02 c505 	mla	r5, r2, r5, ip
 8005be4:	b289      	uxth	r1, r1
 8005be6:	3301      	adds	r3, #1
 8005be8:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8005bec:	429e      	cmp	r6, r3
 8005bee:	f840 1b04 	str.w	r1, [r0], #4
 8005bf2:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8005bf6:	dcec      	bgt.n	8005bd2 <__multadd+0x12>
 8005bf8:	f1b8 0f00 	cmp.w	r8, #0
 8005bfc:	d022      	beq.n	8005c44 <__multadd+0x84>
 8005bfe:	68a3      	ldr	r3, [r4, #8]
 8005c00:	42b3      	cmp	r3, r6
 8005c02:	dc19      	bgt.n	8005c38 <__multadd+0x78>
 8005c04:	6861      	ldr	r1, [r4, #4]
 8005c06:	4638      	mov	r0, r7
 8005c08:	3101      	adds	r1, #1
 8005c0a:	f7ff ff77 	bl	8005afc <_Balloc>
 8005c0e:	4605      	mov	r5, r0
 8005c10:	b928      	cbnz	r0, 8005c1e <__multadd+0x5e>
 8005c12:	4602      	mov	r2, r0
 8005c14:	4b0d      	ldr	r3, [pc, #52]	; (8005c4c <__multadd+0x8c>)
 8005c16:	480e      	ldr	r0, [pc, #56]	; (8005c50 <__multadd+0x90>)
 8005c18:	21b5      	movs	r1, #181	; 0xb5
 8005c1a:	f000 fd13 	bl	8006644 <__assert_func>
 8005c1e:	6922      	ldr	r2, [r4, #16]
 8005c20:	3202      	adds	r2, #2
 8005c22:	f104 010c 	add.w	r1, r4, #12
 8005c26:	0092      	lsls	r2, r2, #2
 8005c28:	300c      	adds	r0, #12
 8005c2a:	f7ff ff59 	bl	8005ae0 <memcpy>
 8005c2e:	4621      	mov	r1, r4
 8005c30:	4638      	mov	r0, r7
 8005c32:	f7ff ffa3 	bl	8005b7c <_Bfree>
 8005c36:	462c      	mov	r4, r5
 8005c38:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8005c3c:	3601      	adds	r6, #1
 8005c3e:	f8c3 8014 	str.w	r8, [r3, #20]
 8005c42:	6126      	str	r6, [r4, #16]
 8005c44:	4620      	mov	r0, r4
 8005c46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005c4a:	bf00      	nop
 8005c4c:	0800731b 	.word	0x0800731b
 8005c50:	0800732c 	.word	0x0800732c

08005c54 <__hi0bits>:
 8005c54:	0c03      	lsrs	r3, r0, #16
 8005c56:	041b      	lsls	r3, r3, #16
 8005c58:	b9d3      	cbnz	r3, 8005c90 <__hi0bits+0x3c>
 8005c5a:	0400      	lsls	r0, r0, #16
 8005c5c:	2310      	movs	r3, #16
 8005c5e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8005c62:	bf04      	itt	eq
 8005c64:	0200      	lsleq	r0, r0, #8
 8005c66:	3308      	addeq	r3, #8
 8005c68:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8005c6c:	bf04      	itt	eq
 8005c6e:	0100      	lsleq	r0, r0, #4
 8005c70:	3304      	addeq	r3, #4
 8005c72:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8005c76:	bf04      	itt	eq
 8005c78:	0080      	lsleq	r0, r0, #2
 8005c7a:	3302      	addeq	r3, #2
 8005c7c:	2800      	cmp	r0, #0
 8005c7e:	db05      	blt.n	8005c8c <__hi0bits+0x38>
 8005c80:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8005c84:	f103 0301 	add.w	r3, r3, #1
 8005c88:	bf08      	it	eq
 8005c8a:	2320      	moveq	r3, #32
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	4770      	bx	lr
 8005c90:	2300      	movs	r3, #0
 8005c92:	e7e4      	b.n	8005c5e <__hi0bits+0xa>

08005c94 <__lo0bits>:
 8005c94:	6803      	ldr	r3, [r0, #0]
 8005c96:	f013 0207 	ands.w	r2, r3, #7
 8005c9a:	4601      	mov	r1, r0
 8005c9c:	d00b      	beq.n	8005cb6 <__lo0bits+0x22>
 8005c9e:	07da      	lsls	r2, r3, #31
 8005ca0:	d424      	bmi.n	8005cec <__lo0bits+0x58>
 8005ca2:	0798      	lsls	r0, r3, #30
 8005ca4:	bf49      	itett	mi
 8005ca6:	085b      	lsrmi	r3, r3, #1
 8005ca8:	089b      	lsrpl	r3, r3, #2
 8005caa:	2001      	movmi	r0, #1
 8005cac:	600b      	strmi	r3, [r1, #0]
 8005cae:	bf5c      	itt	pl
 8005cb0:	600b      	strpl	r3, [r1, #0]
 8005cb2:	2002      	movpl	r0, #2
 8005cb4:	4770      	bx	lr
 8005cb6:	b298      	uxth	r0, r3
 8005cb8:	b9b0      	cbnz	r0, 8005ce8 <__lo0bits+0x54>
 8005cba:	0c1b      	lsrs	r3, r3, #16
 8005cbc:	2010      	movs	r0, #16
 8005cbe:	f013 0fff 	tst.w	r3, #255	; 0xff
 8005cc2:	bf04      	itt	eq
 8005cc4:	0a1b      	lsreq	r3, r3, #8
 8005cc6:	3008      	addeq	r0, #8
 8005cc8:	071a      	lsls	r2, r3, #28
 8005cca:	bf04      	itt	eq
 8005ccc:	091b      	lsreq	r3, r3, #4
 8005cce:	3004      	addeq	r0, #4
 8005cd0:	079a      	lsls	r2, r3, #30
 8005cd2:	bf04      	itt	eq
 8005cd4:	089b      	lsreq	r3, r3, #2
 8005cd6:	3002      	addeq	r0, #2
 8005cd8:	07da      	lsls	r2, r3, #31
 8005cda:	d403      	bmi.n	8005ce4 <__lo0bits+0x50>
 8005cdc:	085b      	lsrs	r3, r3, #1
 8005cde:	f100 0001 	add.w	r0, r0, #1
 8005ce2:	d005      	beq.n	8005cf0 <__lo0bits+0x5c>
 8005ce4:	600b      	str	r3, [r1, #0]
 8005ce6:	4770      	bx	lr
 8005ce8:	4610      	mov	r0, r2
 8005cea:	e7e8      	b.n	8005cbe <__lo0bits+0x2a>
 8005cec:	2000      	movs	r0, #0
 8005cee:	4770      	bx	lr
 8005cf0:	2020      	movs	r0, #32
 8005cf2:	4770      	bx	lr

08005cf4 <__i2b>:
 8005cf4:	b510      	push	{r4, lr}
 8005cf6:	460c      	mov	r4, r1
 8005cf8:	2101      	movs	r1, #1
 8005cfa:	f7ff feff 	bl	8005afc <_Balloc>
 8005cfe:	4602      	mov	r2, r0
 8005d00:	b928      	cbnz	r0, 8005d0e <__i2b+0x1a>
 8005d02:	4b05      	ldr	r3, [pc, #20]	; (8005d18 <__i2b+0x24>)
 8005d04:	4805      	ldr	r0, [pc, #20]	; (8005d1c <__i2b+0x28>)
 8005d06:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8005d0a:	f000 fc9b 	bl	8006644 <__assert_func>
 8005d0e:	2301      	movs	r3, #1
 8005d10:	6144      	str	r4, [r0, #20]
 8005d12:	6103      	str	r3, [r0, #16]
 8005d14:	bd10      	pop	{r4, pc}
 8005d16:	bf00      	nop
 8005d18:	0800731b 	.word	0x0800731b
 8005d1c:	0800732c 	.word	0x0800732c

08005d20 <__multiply>:
 8005d20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d24:	4614      	mov	r4, r2
 8005d26:	690a      	ldr	r2, [r1, #16]
 8005d28:	6923      	ldr	r3, [r4, #16]
 8005d2a:	429a      	cmp	r2, r3
 8005d2c:	bfb8      	it	lt
 8005d2e:	460b      	movlt	r3, r1
 8005d30:	460d      	mov	r5, r1
 8005d32:	bfbc      	itt	lt
 8005d34:	4625      	movlt	r5, r4
 8005d36:	461c      	movlt	r4, r3
 8005d38:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8005d3c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8005d40:	68ab      	ldr	r3, [r5, #8]
 8005d42:	6869      	ldr	r1, [r5, #4]
 8005d44:	eb0a 0709 	add.w	r7, sl, r9
 8005d48:	42bb      	cmp	r3, r7
 8005d4a:	b085      	sub	sp, #20
 8005d4c:	bfb8      	it	lt
 8005d4e:	3101      	addlt	r1, #1
 8005d50:	f7ff fed4 	bl	8005afc <_Balloc>
 8005d54:	b930      	cbnz	r0, 8005d64 <__multiply+0x44>
 8005d56:	4602      	mov	r2, r0
 8005d58:	4b42      	ldr	r3, [pc, #264]	; (8005e64 <__multiply+0x144>)
 8005d5a:	4843      	ldr	r0, [pc, #268]	; (8005e68 <__multiply+0x148>)
 8005d5c:	f240 115d 	movw	r1, #349	; 0x15d
 8005d60:	f000 fc70 	bl	8006644 <__assert_func>
 8005d64:	f100 0614 	add.w	r6, r0, #20
 8005d68:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8005d6c:	4633      	mov	r3, r6
 8005d6e:	2200      	movs	r2, #0
 8005d70:	4543      	cmp	r3, r8
 8005d72:	d31e      	bcc.n	8005db2 <__multiply+0x92>
 8005d74:	f105 0c14 	add.w	ip, r5, #20
 8005d78:	f104 0314 	add.w	r3, r4, #20
 8005d7c:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8005d80:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8005d84:	9202      	str	r2, [sp, #8]
 8005d86:	ebac 0205 	sub.w	r2, ip, r5
 8005d8a:	3a15      	subs	r2, #21
 8005d8c:	f022 0203 	bic.w	r2, r2, #3
 8005d90:	3204      	adds	r2, #4
 8005d92:	f105 0115 	add.w	r1, r5, #21
 8005d96:	458c      	cmp	ip, r1
 8005d98:	bf38      	it	cc
 8005d9a:	2204      	movcc	r2, #4
 8005d9c:	9201      	str	r2, [sp, #4]
 8005d9e:	9a02      	ldr	r2, [sp, #8]
 8005da0:	9303      	str	r3, [sp, #12]
 8005da2:	429a      	cmp	r2, r3
 8005da4:	d808      	bhi.n	8005db8 <__multiply+0x98>
 8005da6:	2f00      	cmp	r7, #0
 8005da8:	dc55      	bgt.n	8005e56 <__multiply+0x136>
 8005daa:	6107      	str	r7, [r0, #16]
 8005dac:	b005      	add	sp, #20
 8005dae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005db2:	f843 2b04 	str.w	r2, [r3], #4
 8005db6:	e7db      	b.n	8005d70 <__multiply+0x50>
 8005db8:	f8b3 a000 	ldrh.w	sl, [r3]
 8005dbc:	f1ba 0f00 	cmp.w	sl, #0
 8005dc0:	d020      	beq.n	8005e04 <__multiply+0xe4>
 8005dc2:	f105 0e14 	add.w	lr, r5, #20
 8005dc6:	46b1      	mov	r9, r6
 8005dc8:	2200      	movs	r2, #0
 8005dca:	f85e 4b04 	ldr.w	r4, [lr], #4
 8005dce:	f8d9 b000 	ldr.w	fp, [r9]
 8005dd2:	b2a1      	uxth	r1, r4
 8005dd4:	fa1f fb8b 	uxth.w	fp, fp
 8005dd8:	fb0a b101 	mla	r1, sl, r1, fp
 8005ddc:	4411      	add	r1, r2
 8005dde:	f8d9 2000 	ldr.w	r2, [r9]
 8005de2:	0c24      	lsrs	r4, r4, #16
 8005de4:	0c12      	lsrs	r2, r2, #16
 8005de6:	fb0a 2404 	mla	r4, sl, r4, r2
 8005dea:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8005dee:	b289      	uxth	r1, r1
 8005df0:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8005df4:	45f4      	cmp	ip, lr
 8005df6:	f849 1b04 	str.w	r1, [r9], #4
 8005dfa:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8005dfe:	d8e4      	bhi.n	8005dca <__multiply+0xaa>
 8005e00:	9901      	ldr	r1, [sp, #4]
 8005e02:	5072      	str	r2, [r6, r1]
 8005e04:	9a03      	ldr	r2, [sp, #12]
 8005e06:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8005e0a:	3304      	adds	r3, #4
 8005e0c:	f1b9 0f00 	cmp.w	r9, #0
 8005e10:	d01f      	beq.n	8005e52 <__multiply+0x132>
 8005e12:	6834      	ldr	r4, [r6, #0]
 8005e14:	f105 0114 	add.w	r1, r5, #20
 8005e18:	46b6      	mov	lr, r6
 8005e1a:	f04f 0a00 	mov.w	sl, #0
 8005e1e:	880a      	ldrh	r2, [r1, #0]
 8005e20:	f8be b002 	ldrh.w	fp, [lr, #2]
 8005e24:	fb09 b202 	mla	r2, r9, r2, fp
 8005e28:	4492      	add	sl, r2
 8005e2a:	b2a4      	uxth	r4, r4
 8005e2c:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8005e30:	f84e 4b04 	str.w	r4, [lr], #4
 8005e34:	f851 4b04 	ldr.w	r4, [r1], #4
 8005e38:	f8be 2000 	ldrh.w	r2, [lr]
 8005e3c:	0c24      	lsrs	r4, r4, #16
 8005e3e:	fb09 2404 	mla	r4, r9, r4, r2
 8005e42:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8005e46:	458c      	cmp	ip, r1
 8005e48:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8005e4c:	d8e7      	bhi.n	8005e1e <__multiply+0xfe>
 8005e4e:	9a01      	ldr	r2, [sp, #4]
 8005e50:	50b4      	str	r4, [r6, r2]
 8005e52:	3604      	adds	r6, #4
 8005e54:	e7a3      	b.n	8005d9e <__multiply+0x7e>
 8005e56:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d1a5      	bne.n	8005daa <__multiply+0x8a>
 8005e5e:	3f01      	subs	r7, #1
 8005e60:	e7a1      	b.n	8005da6 <__multiply+0x86>
 8005e62:	bf00      	nop
 8005e64:	0800731b 	.word	0x0800731b
 8005e68:	0800732c 	.word	0x0800732c

08005e6c <__pow5mult>:
 8005e6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005e70:	4615      	mov	r5, r2
 8005e72:	f012 0203 	ands.w	r2, r2, #3
 8005e76:	4606      	mov	r6, r0
 8005e78:	460f      	mov	r7, r1
 8005e7a:	d007      	beq.n	8005e8c <__pow5mult+0x20>
 8005e7c:	4c25      	ldr	r4, [pc, #148]	; (8005f14 <__pow5mult+0xa8>)
 8005e7e:	3a01      	subs	r2, #1
 8005e80:	2300      	movs	r3, #0
 8005e82:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005e86:	f7ff fe9b 	bl	8005bc0 <__multadd>
 8005e8a:	4607      	mov	r7, r0
 8005e8c:	10ad      	asrs	r5, r5, #2
 8005e8e:	d03d      	beq.n	8005f0c <__pow5mult+0xa0>
 8005e90:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8005e92:	b97c      	cbnz	r4, 8005eb4 <__pow5mult+0x48>
 8005e94:	2010      	movs	r0, #16
 8005e96:	f7ff fe1b 	bl	8005ad0 <malloc>
 8005e9a:	4602      	mov	r2, r0
 8005e9c:	6270      	str	r0, [r6, #36]	; 0x24
 8005e9e:	b928      	cbnz	r0, 8005eac <__pow5mult+0x40>
 8005ea0:	4b1d      	ldr	r3, [pc, #116]	; (8005f18 <__pow5mult+0xac>)
 8005ea2:	481e      	ldr	r0, [pc, #120]	; (8005f1c <__pow5mult+0xb0>)
 8005ea4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8005ea8:	f000 fbcc 	bl	8006644 <__assert_func>
 8005eac:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005eb0:	6004      	str	r4, [r0, #0]
 8005eb2:	60c4      	str	r4, [r0, #12]
 8005eb4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8005eb8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005ebc:	b94c      	cbnz	r4, 8005ed2 <__pow5mult+0x66>
 8005ebe:	f240 2171 	movw	r1, #625	; 0x271
 8005ec2:	4630      	mov	r0, r6
 8005ec4:	f7ff ff16 	bl	8005cf4 <__i2b>
 8005ec8:	2300      	movs	r3, #0
 8005eca:	f8c8 0008 	str.w	r0, [r8, #8]
 8005ece:	4604      	mov	r4, r0
 8005ed0:	6003      	str	r3, [r0, #0]
 8005ed2:	f04f 0900 	mov.w	r9, #0
 8005ed6:	07eb      	lsls	r3, r5, #31
 8005ed8:	d50a      	bpl.n	8005ef0 <__pow5mult+0x84>
 8005eda:	4639      	mov	r1, r7
 8005edc:	4622      	mov	r2, r4
 8005ede:	4630      	mov	r0, r6
 8005ee0:	f7ff ff1e 	bl	8005d20 <__multiply>
 8005ee4:	4639      	mov	r1, r7
 8005ee6:	4680      	mov	r8, r0
 8005ee8:	4630      	mov	r0, r6
 8005eea:	f7ff fe47 	bl	8005b7c <_Bfree>
 8005eee:	4647      	mov	r7, r8
 8005ef0:	106d      	asrs	r5, r5, #1
 8005ef2:	d00b      	beq.n	8005f0c <__pow5mult+0xa0>
 8005ef4:	6820      	ldr	r0, [r4, #0]
 8005ef6:	b938      	cbnz	r0, 8005f08 <__pow5mult+0x9c>
 8005ef8:	4622      	mov	r2, r4
 8005efa:	4621      	mov	r1, r4
 8005efc:	4630      	mov	r0, r6
 8005efe:	f7ff ff0f 	bl	8005d20 <__multiply>
 8005f02:	6020      	str	r0, [r4, #0]
 8005f04:	f8c0 9000 	str.w	r9, [r0]
 8005f08:	4604      	mov	r4, r0
 8005f0a:	e7e4      	b.n	8005ed6 <__pow5mult+0x6a>
 8005f0c:	4638      	mov	r0, r7
 8005f0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005f12:	bf00      	nop
 8005f14:	08007480 	.word	0x08007480
 8005f18:	080072a5 	.word	0x080072a5
 8005f1c:	0800732c 	.word	0x0800732c

08005f20 <__lshift>:
 8005f20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005f24:	460c      	mov	r4, r1
 8005f26:	6849      	ldr	r1, [r1, #4]
 8005f28:	6923      	ldr	r3, [r4, #16]
 8005f2a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005f2e:	68a3      	ldr	r3, [r4, #8]
 8005f30:	4607      	mov	r7, r0
 8005f32:	4691      	mov	r9, r2
 8005f34:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005f38:	f108 0601 	add.w	r6, r8, #1
 8005f3c:	42b3      	cmp	r3, r6
 8005f3e:	db0b      	blt.n	8005f58 <__lshift+0x38>
 8005f40:	4638      	mov	r0, r7
 8005f42:	f7ff fddb 	bl	8005afc <_Balloc>
 8005f46:	4605      	mov	r5, r0
 8005f48:	b948      	cbnz	r0, 8005f5e <__lshift+0x3e>
 8005f4a:	4602      	mov	r2, r0
 8005f4c:	4b28      	ldr	r3, [pc, #160]	; (8005ff0 <__lshift+0xd0>)
 8005f4e:	4829      	ldr	r0, [pc, #164]	; (8005ff4 <__lshift+0xd4>)
 8005f50:	f240 11d9 	movw	r1, #473	; 0x1d9
 8005f54:	f000 fb76 	bl	8006644 <__assert_func>
 8005f58:	3101      	adds	r1, #1
 8005f5a:	005b      	lsls	r3, r3, #1
 8005f5c:	e7ee      	b.n	8005f3c <__lshift+0x1c>
 8005f5e:	2300      	movs	r3, #0
 8005f60:	f100 0114 	add.w	r1, r0, #20
 8005f64:	f100 0210 	add.w	r2, r0, #16
 8005f68:	4618      	mov	r0, r3
 8005f6a:	4553      	cmp	r3, sl
 8005f6c:	db33      	blt.n	8005fd6 <__lshift+0xb6>
 8005f6e:	6920      	ldr	r0, [r4, #16]
 8005f70:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005f74:	f104 0314 	add.w	r3, r4, #20
 8005f78:	f019 091f 	ands.w	r9, r9, #31
 8005f7c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005f80:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005f84:	d02b      	beq.n	8005fde <__lshift+0xbe>
 8005f86:	f1c9 0e20 	rsb	lr, r9, #32
 8005f8a:	468a      	mov	sl, r1
 8005f8c:	2200      	movs	r2, #0
 8005f8e:	6818      	ldr	r0, [r3, #0]
 8005f90:	fa00 f009 	lsl.w	r0, r0, r9
 8005f94:	4302      	orrs	r2, r0
 8005f96:	f84a 2b04 	str.w	r2, [sl], #4
 8005f9a:	f853 2b04 	ldr.w	r2, [r3], #4
 8005f9e:	459c      	cmp	ip, r3
 8005fa0:	fa22 f20e 	lsr.w	r2, r2, lr
 8005fa4:	d8f3      	bhi.n	8005f8e <__lshift+0x6e>
 8005fa6:	ebac 0304 	sub.w	r3, ip, r4
 8005faa:	3b15      	subs	r3, #21
 8005fac:	f023 0303 	bic.w	r3, r3, #3
 8005fb0:	3304      	adds	r3, #4
 8005fb2:	f104 0015 	add.w	r0, r4, #21
 8005fb6:	4584      	cmp	ip, r0
 8005fb8:	bf38      	it	cc
 8005fba:	2304      	movcc	r3, #4
 8005fbc:	50ca      	str	r2, [r1, r3]
 8005fbe:	b10a      	cbz	r2, 8005fc4 <__lshift+0xa4>
 8005fc0:	f108 0602 	add.w	r6, r8, #2
 8005fc4:	3e01      	subs	r6, #1
 8005fc6:	4638      	mov	r0, r7
 8005fc8:	612e      	str	r6, [r5, #16]
 8005fca:	4621      	mov	r1, r4
 8005fcc:	f7ff fdd6 	bl	8005b7c <_Bfree>
 8005fd0:	4628      	mov	r0, r5
 8005fd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005fd6:	f842 0f04 	str.w	r0, [r2, #4]!
 8005fda:	3301      	adds	r3, #1
 8005fdc:	e7c5      	b.n	8005f6a <__lshift+0x4a>
 8005fde:	3904      	subs	r1, #4
 8005fe0:	f853 2b04 	ldr.w	r2, [r3], #4
 8005fe4:	f841 2f04 	str.w	r2, [r1, #4]!
 8005fe8:	459c      	cmp	ip, r3
 8005fea:	d8f9      	bhi.n	8005fe0 <__lshift+0xc0>
 8005fec:	e7ea      	b.n	8005fc4 <__lshift+0xa4>
 8005fee:	bf00      	nop
 8005ff0:	0800731b 	.word	0x0800731b
 8005ff4:	0800732c 	.word	0x0800732c

08005ff8 <__mcmp>:
 8005ff8:	b530      	push	{r4, r5, lr}
 8005ffa:	6902      	ldr	r2, [r0, #16]
 8005ffc:	690c      	ldr	r4, [r1, #16]
 8005ffe:	1b12      	subs	r2, r2, r4
 8006000:	d10e      	bne.n	8006020 <__mcmp+0x28>
 8006002:	f100 0314 	add.w	r3, r0, #20
 8006006:	3114      	adds	r1, #20
 8006008:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800600c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8006010:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8006014:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8006018:	42a5      	cmp	r5, r4
 800601a:	d003      	beq.n	8006024 <__mcmp+0x2c>
 800601c:	d305      	bcc.n	800602a <__mcmp+0x32>
 800601e:	2201      	movs	r2, #1
 8006020:	4610      	mov	r0, r2
 8006022:	bd30      	pop	{r4, r5, pc}
 8006024:	4283      	cmp	r3, r0
 8006026:	d3f3      	bcc.n	8006010 <__mcmp+0x18>
 8006028:	e7fa      	b.n	8006020 <__mcmp+0x28>
 800602a:	f04f 32ff 	mov.w	r2, #4294967295
 800602e:	e7f7      	b.n	8006020 <__mcmp+0x28>

08006030 <__mdiff>:
 8006030:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006034:	460c      	mov	r4, r1
 8006036:	4606      	mov	r6, r0
 8006038:	4611      	mov	r1, r2
 800603a:	4620      	mov	r0, r4
 800603c:	4617      	mov	r7, r2
 800603e:	f7ff ffdb 	bl	8005ff8 <__mcmp>
 8006042:	1e05      	subs	r5, r0, #0
 8006044:	d110      	bne.n	8006068 <__mdiff+0x38>
 8006046:	4629      	mov	r1, r5
 8006048:	4630      	mov	r0, r6
 800604a:	f7ff fd57 	bl	8005afc <_Balloc>
 800604e:	b930      	cbnz	r0, 800605e <__mdiff+0x2e>
 8006050:	4b39      	ldr	r3, [pc, #228]	; (8006138 <__mdiff+0x108>)
 8006052:	4602      	mov	r2, r0
 8006054:	f240 2132 	movw	r1, #562	; 0x232
 8006058:	4838      	ldr	r0, [pc, #224]	; (800613c <__mdiff+0x10c>)
 800605a:	f000 faf3 	bl	8006644 <__assert_func>
 800605e:	2301      	movs	r3, #1
 8006060:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006064:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006068:	bfa4      	itt	ge
 800606a:	463b      	movge	r3, r7
 800606c:	4627      	movge	r7, r4
 800606e:	4630      	mov	r0, r6
 8006070:	6879      	ldr	r1, [r7, #4]
 8006072:	bfa6      	itte	ge
 8006074:	461c      	movge	r4, r3
 8006076:	2500      	movge	r5, #0
 8006078:	2501      	movlt	r5, #1
 800607a:	f7ff fd3f 	bl	8005afc <_Balloc>
 800607e:	b920      	cbnz	r0, 800608a <__mdiff+0x5a>
 8006080:	4b2d      	ldr	r3, [pc, #180]	; (8006138 <__mdiff+0x108>)
 8006082:	4602      	mov	r2, r0
 8006084:	f44f 7110 	mov.w	r1, #576	; 0x240
 8006088:	e7e6      	b.n	8006058 <__mdiff+0x28>
 800608a:	693e      	ldr	r6, [r7, #16]
 800608c:	60c5      	str	r5, [r0, #12]
 800608e:	6925      	ldr	r5, [r4, #16]
 8006090:	f107 0114 	add.w	r1, r7, #20
 8006094:	f104 0914 	add.w	r9, r4, #20
 8006098:	f100 0e14 	add.w	lr, r0, #20
 800609c:	f107 0210 	add.w	r2, r7, #16
 80060a0:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 80060a4:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 80060a8:	46f2      	mov	sl, lr
 80060aa:	2700      	movs	r7, #0
 80060ac:	f859 3b04 	ldr.w	r3, [r9], #4
 80060b0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80060b4:	fa1f f883 	uxth.w	r8, r3
 80060b8:	fa17 f78b 	uxtah	r7, r7, fp
 80060bc:	0c1b      	lsrs	r3, r3, #16
 80060be:	eba7 0808 	sub.w	r8, r7, r8
 80060c2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80060c6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80060ca:	fa1f f888 	uxth.w	r8, r8
 80060ce:	141f      	asrs	r7, r3, #16
 80060d0:	454d      	cmp	r5, r9
 80060d2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80060d6:	f84a 3b04 	str.w	r3, [sl], #4
 80060da:	d8e7      	bhi.n	80060ac <__mdiff+0x7c>
 80060dc:	1b2b      	subs	r3, r5, r4
 80060de:	3b15      	subs	r3, #21
 80060e0:	f023 0303 	bic.w	r3, r3, #3
 80060e4:	3304      	adds	r3, #4
 80060e6:	3415      	adds	r4, #21
 80060e8:	42a5      	cmp	r5, r4
 80060ea:	bf38      	it	cc
 80060ec:	2304      	movcc	r3, #4
 80060ee:	4419      	add	r1, r3
 80060f0:	4473      	add	r3, lr
 80060f2:	469e      	mov	lr, r3
 80060f4:	460d      	mov	r5, r1
 80060f6:	4565      	cmp	r5, ip
 80060f8:	d30e      	bcc.n	8006118 <__mdiff+0xe8>
 80060fa:	f10c 0203 	add.w	r2, ip, #3
 80060fe:	1a52      	subs	r2, r2, r1
 8006100:	f022 0203 	bic.w	r2, r2, #3
 8006104:	3903      	subs	r1, #3
 8006106:	458c      	cmp	ip, r1
 8006108:	bf38      	it	cc
 800610a:	2200      	movcc	r2, #0
 800610c:	441a      	add	r2, r3
 800610e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8006112:	b17b      	cbz	r3, 8006134 <__mdiff+0x104>
 8006114:	6106      	str	r6, [r0, #16]
 8006116:	e7a5      	b.n	8006064 <__mdiff+0x34>
 8006118:	f855 8b04 	ldr.w	r8, [r5], #4
 800611c:	fa17 f488 	uxtah	r4, r7, r8
 8006120:	1422      	asrs	r2, r4, #16
 8006122:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8006126:	b2a4      	uxth	r4, r4
 8006128:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800612c:	f84e 4b04 	str.w	r4, [lr], #4
 8006130:	1417      	asrs	r7, r2, #16
 8006132:	e7e0      	b.n	80060f6 <__mdiff+0xc6>
 8006134:	3e01      	subs	r6, #1
 8006136:	e7ea      	b.n	800610e <__mdiff+0xde>
 8006138:	0800731b 	.word	0x0800731b
 800613c:	0800732c 	.word	0x0800732c

08006140 <__d2b>:
 8006140:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006144:	4689      	mov	r9, r1
 8006146:	2101      	movs	r1, #1
 8006148:	ec57 6b10 	vmov	r6, r7, d0
 800614c:	4690      	mov	r8, r2
 800614e:	f7ff fcd5 	bl	8005afc <_Balloc>
 8006152:	4604      	mov	r4, r0
 8006154:	b930      	cbnz	r0, 8006164 <__d2b+0x24>
 8006156:	4602      	mov	r2, r0
 8006158:	4b25      	ldr	r3, [pc, #148]	; (80061f0 <__d2b+0xb0>)
 800615a:	4826      	ldr	r0, [pc, #152]	; (80061f4 <__d2b+0xb4>)
 800615c:	f240 310a 	movw	r1, #778	; 0x30a
 8006160:	f000 fa70 	bl	8006644 <__assert_func>
 8006164:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8006168:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800616c:	bb35      	cbnz	r5, 80061bc <__d2b+0x7c>
 800616e:	2e00      	cmp	r6, #0
 8006170:	9301      	str	r3, [sp, #4]
 8006172:	d028      	beq.n	80061c6 <__d2b+0x86>
 8006174:	4668      	mov	r0, sp
 8006176:	9600      	str	r6, [sp, #0]
 8006178:	f7ff fd8c 	bl	8005c94 <__lo0bits>
 800617c:	9900      	ldr	r1, [sp, #0]
 800617e:	b300      	cbz	r0, 80061c2 <__d2b+0x82>
 8006180:	9a01      	ldr	r2, [sp, #4]
 8006182:	f1c0 0320 	rsb	r3, r0, #32
 8006186:	fa02 f303 	lsl.w	r3, r2, r3
 800618a:	430b      	orrs	r3, r1
 800618c:	40c2      	lsrs	r2, r0
 800618e:	6163      	str	r3, [r4, #20]
 8006190:	9201      	str	r2, [sp, #4]
 8006192:	9b01      	ldr	r3, [sp, #4]
 8006194:	61a3      	str	r3, [r4, #24]
 8006196:	2b00      	cmp	r3, #0
 8006198:	bf14      	ite	ne
 800619a:	2202      	movne	r2, #2
 800619c:	2201      	moveq	r2, #1
 800619e:	6122      	str	r2, [r4, #16]
 80061a0:	b1d5      	cbz	r5, 80061d8 <__d2b+0x98>
 80061a2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80061a6:	4405      	add	r5, r0
 80061a8:	f8c9 5000 	str.w	r5, [r9]
 80061ac:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80061b0:	f8c8 0000 	str.w	r0, [r8]
 80061b4:	4620      	mov	r0, r4
 80061b6:	b003      	add	sp, #12
 80061b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80061bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80061c0:	e7d5      	b.n	800616e <__d2b+0x2e>
 80061c2:	6161      	str	r1, [r4, #20]
 80061c4:	e7e5      	b.n	8006192 <__d2b+0x52>
 80061c6:	a801      	add	r0, sp, #4
 80061c8:	f7ff fd64 	bl	8005c94 <__lo0bits>
 80061cc:	9b01      	ldr	r3, [sp, #4]
 80061ce:	6163      	str	r3, [r4, #20]
 80061d0:	2201      	movs	r2, #1
 80061d2:	6122      	str	r2, [r4, #16]
 80061d4:	3020      	adds	r0, #32
 80061d6:	e7e3      	b.n	80061a0 <__d2b+0x60>
 80061d8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80061dc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80061e0:	f8c9 0000 	str.w	r0, [r9]
 80061e4:	6918      	ldr	r0, [r3, #16]
 80061e6:	f7ff fd35 	bl	8005c54 <__hi0bits>
 80061ea:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80061ee:	e7df      	b.n	80061b0 <__d2b+0x70>
 80061f0:	0800731b 	.word	0x0800731b
 80061f4:	0800732c 	.word	0x0800732c

080061f8 <_calloc_r>:
 80061f8:	b513      	push	{r0, r1, r4, lr}
 80061fa:	434a      	muls	r2, r1
 80061fc:	4611      	mov	r1, r2
 80061fe:	9201      	str	r2, [sp, #4]
 8006200:	f000 f85a 	bl	80062b8 <_malloc_r>
 8006204:	4604      	mov	r4, r0
 8006206:	b118      	cbz	r0, 8006210 <_calloc_r+0x18>
 8006208:	9a01      	ldr	r2, [sp, #4]
 800620a:	2100      	movs	r1, #0
 800620c:	f7fe f950 	bl	80044b0 <memset>
 8006210:	4620      	mov	r0, r4
 8006212:	b002      	add	sp, #8
 8006214:	bd10      	pop	{r4, pc}
	...

08006218 <_free_r>:
 8006218:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800621a:	2900      	cmp	r1, #0
 800621c:	d048      	beq.n	80062b0 <_free_r+0x98>
 800621e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006222:	9001      	str	r0, [sp, #4]
 8006224:	2b00      	cmp	r3, #0
 8006226:	f1a1 0404 	sub.w	r4, r1, #4
 800622a:	bfb8      	it	lt
 800622c:	18e4      	addlt	r4, r4, r3
 800622e:	f000 fa65 	bl	80066fc <__malloc_lock>
 8006232:	4a20      	ldr	r2, [pc, #128]	; (80062b4 <_free_r+0x9c>)
 8006234:	9801      	ldr	r0, [sp, #4]
 8006236:	6813      	ldr	r3, [r2, #0]
 8006238:	4615      	mov	r5, r2
 800623a:	b933      	cbnz	r3, 800624a <_free_r+0x32>
 800623c:	6063      	str	r3, [r4, #4]
 800623e:	6014      	str	r4, [r2, #0]
 8006240:	b003      	add	sp, #12
 8006242:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006246:	f000 ba5f 	b.w	8006708 <__malloc_unlock>
 800624a:	42a3      	cmp	r3, r4
 800624c:	d90b      	bls.n	8006266 <_free_r+0x4e>
 800624e:	6821      	ldr	r1, [r4, #0]
 8006250:	1862      	adds	r2, r4, r1
 8006252:	4293      	cmp	r3, r2
 8006254:	bf04      	itt	eq
 8006256:	681a      	ldreq	r2, [r3, #0]
 8006258:	685b      	ldreq	r3, [r3, #4]
 800625a:	6063      	str	r3, [r4, #4]
 800625c:	bf04      	itt	eq
 800625e:	1852      	addeq	r2, r2, r1
 8006260:	6022      	streq	r2, [r4, #0]
 8006262:	602c      	str	r4, [r5, #0]
 8006264:	e7ec      	b.n	8006240 <_free_r+0x28>
 8006266:	461a      	mov	r2, r3
 8006268:	685b      	ldr	r3, [r3, #4]
 800626a:	b10b      	cbz	r3, 8006270 <_free_r+0x58>
 800626c:	42a3      	cmp	r3, r4
 800626e:	d9fa      	bls.n	8006266 <_free_r+0x4e>
 8006270:	6811      	ldr	r1, [r2, #0]
 8006272:	1855      	adds	r5, r2, r1
 8006274:	42a5      	cmp	r5, r4
 8006276:	d10b      	bne.n	8006290 <_free_r+0x78>
 8006278:	6824      	ldr	r4, [r4, #0]
 800627a:	4421      	add	r1, r4
 800627c:	1854      	adds	r4, r2, r1
 800627e:	42a3      	cmp	r3, r4
 8006280:	6011      	str	r1, [r2, #0]
 8006282:	d1dd      	bne.n	8006240 <_free_r+0x28>
 8006284:	681c      	ldr	r4, [r3, #0]
 8006286:	685b      	ldr	r3, [r3, #4]
 8006288:	6053      	str	r3, [r2, #4]
 800628a:	4421      	add	r1, r4
 800628c:	6011      	str	r1, [r2, #0]
 800628e:	e7d7      	b.n	8006240 <_free_r+0x28>
 8006290:	d902      	bls.n	8006298 <_free_r+0x80>
 8006292:	230c      	movs	r3, #12
 8006294:	6003      	str	r3, [r0, #0]
 8006296:	e7d3      	b.n	8006240 <_free_r+0x28>
 8006298:	6825      	ldr	r5, [r4, #0]
 800629a:	1961      	adds	r1, r4, r5
 800629c:	428b      	cmp	r3, r1
 800629e:	bf04      	itt	eq
 80062a0:	6819      	ldreq	r1, [r3, #0]
 80062a2:	685b      	ldreq	r3, [r3, #4]
 80062a4:	6063      	str	r3, [r4, #4]
 80062a6:	bf04      	itt	eq
 80062a8:	1949      	addeq	r1, r1, r5
 80062aa:	6021      	streq	r1, [r4, #0]
 80062ac:	6054      	str	r4, [r2, #4]
 80062ae:	e7c7      	b.n	8006240 <_free_r+0x28>
 80062b0:	b003      	add	sp, #12
 80062b2:	bd30      	pop	{r4, r5, pc}
 80062b4:	20000200 	.word	0x20000200

080062b8 <_malloc_r>:
 80062b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062ba:	1ccd      	adds	r5, r1, #3
 80062bc:	f025 0503 	bic.w	r5, r5, #3
 80062c0:	3508      	adds	r5, #8
 80062c2:	2d0c      	cmp	r5, #12
 80062c4:	bf38      	it	cc
 80062c6:	250c      	movcc	r5, #12
 80062c8:	2d00      	cmp	r5, #0
 80062ca:	4606      	mov	r6, r0
 80062cc:	db01      	blt.n	80062d2 <_malloc_r+0x1a>
 80062ce:	42a9      	cmp	r1, r5
 80062d0:	d903      	bls.n	80062da <_malloc_r+0x22>
 80062d2:	230c      	movs	r3, #12
 80062d4:	6033      	str	r3, [r6, #0]
 80062d6:	2000      	movs	r0, #0
 80062d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80062da:	f000 fa0f 	bl	80066fc <__malloc_lock>
 80062de:	4921      	ldr	r1, [pc, #132]	; (8006364 <_malloc_r+0xac>)
 80062e0:	680a      	ldr	r2, [r1, #0]
 80062e2:	4614      	mov	r4, r2
 80062e4:	b99c      	cbnz	r4, 800630e <_malloc_r+0x56>
 80062e6:	4f20      	ldr	r7, [pc, #128]	; (8006368 <_malloc_r+0xb0>)
 80062e8:	683b      	ldr	r3, [r7, #0]
 80062ea:	b923      	cbnz	r3, 80062f6 <_malloc_r+0x3e>
 80062ec:	4621      	mov	r1, r4
 80062ee:	4630      	mov	r0, r6
 80062f0:	f000 f998 	bl	8006624 <_sbrk_r>
 80062f4:	6038      	str	r0, [r7, #0]
 80062f6:	4629      	mov	r1, r5
 80062f8:	4630      	mov	r0, r6
 80062fa:	f000 f993 	bl	8006624 <_sbrk_r>
 80062fe:	1c43      	adds	r3, r0, #1
 8006300:	d123      	bne.n	800634a <_malloc_r+0x92>
 8006302:	230c      	movs	r3, #12
 8006304:	6033      	str	r3, [r6, #0]
 8006306:	4630      	mov	r0, r6
 8006308:	f000 f9fe 	bl	8006708 <__malloc_unlock>
 800630c:	e7e3      	b.n	80062d6 <_malloc_r+0x1e>
 800630e:	6823      	ldr	r3, [r4, #0]
 8006310:	1b5b      	subs	r3, r3, r5
 8006312:	d417      	bmi.n	8006344 <_malloc_r+0x8c>
 8006314:	2b0b      	cmp	r3, #11
 8006316:	d903      	bls.n	8006320 <_malloc_r+0x68>
 8006318:	6023      	str	r3, [r4, #0]
 800631a:	441c      	add	r4, r3
 800631c:	6025      	str	r5, [r4, #0]
 800631e:	e004      	b.n	800632a <_malloc_r+0x72>
 8006320:	6863      	ldr	r3, [r4, #4]
 8006322:	42a2      	cmp	r2, r4
 8006324:	bf0c      	ite	eq
 8006326:	600b      	streq	r3, [r1, #0]
 8006328:	6053      	strne	r3, [r2, #4]
 800632a:	4630      	mov	r0, r6
 800632c:	f000 f9ec 	bl	8006708 <__malloc_unlock>
 8006330:	f104 000b 	add.w	r0, r4, #11
 8006334:	1d23      	adds	r3, r4, #4
 8006336:	f020 0007 	bic.w	r0, r0, #7
 800633a:	1ac2      	subs	r2, r0, r3
 800633c:	d0cc      	beq.n	80062d8 <_malloc_r+0x20>
 800633e:	1a1b      	subs	r3, r3, r0
 8006340:	50a3      	str	r3, [r4, r2]
 8006342:	e7c9      	b.n	80062d8 <_malloc_r+0x20>
 8006344:	4622      	mov	r2, r4
 8006346:	6864      	ldr	r4, [r4, #4]
 8006348:	e7cc      	b.n	80062e4 <_malloc_r+0x2c>
 800634a:	1cc4      	adds	r4, r0, #3
 800634c:	f024 0403 	bic.w	r4, r4, #3
 8006350:	42a0      	cmp	r0, r4
 8006352:	d0e3      	beq.n	800631c <_malloc_r+0x64>
 8006354:	1a21      	subs	r1, r4, r0
 8006356:	4630      	mov	r0, r6
 8006358:	f000 f964 	bl	8006624 <_sbrk_r>
 800635c:	3001      	adds	r0, #1
 800635e:	d1dd      	bne.n	800631c <_malloc_r+0x64>
 8006360:	e7cf      	b.n	8006302 <_malloc_r+0x4a>
 8006362:	bf00      	nop
 8006364:	20000200 	.word	0x20000200
 8006368:	20000204 	.word	0x20000204

0800636c <__ssputs_r>:
 800636c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006370:	688e      	ldr	r6, [r1, #8]
 8006372:	429e      	cmp	r6, r3
 8006374:	4682      	mov	sl, r0
 8006376:	460c      	mov	r4, r1
 8006378:	4690      	mov	r8, r2
 800637a:	461f      	mov	r7, r3
 800637c:	d838      	bhi.n	80063f0 <__ssputs_r+0x84>
 800637e:	898a      	ldrh	r2, [r1, #12]
 8006380:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006384:	d032      	beq.n	80063ec <__ssputs_r+0x80>
 8006386:	6825      	ldr	r5, [r4, #0]
 8006388:	6909      	ldr	r1, [r1, #16]
 800638a:	eba5 0901 	sub.w	r9, r5, r1
 800638e:	6965      	ldr	r5, [r4, #20]
 8006390:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006394:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006398:	3301      	adds	r3, #1
 800639a:	444b      	add	r3, r9
 800639c:	106d      	asrs	r5, r5, #1
 800639e:	429d      	cmp	r5, r3
 80063a0:	bf38      	it	cc
 80063a2:	461d      	movcc	r5, r3
 80063a4:	0553      	lsls	r3, r2, #21
 80063a6:	d531      	bpl.n	800640c <__ssputs_r+0xa0>
 80063a8:	4629      	mov	r1, r5
 80063aa:	f7ff ff85 	bl	80062b8 <_malloc_r>
 80063ae:	4606      	mov	r6, r0
 80063b0:	b950      	cbnz	r0, 80063c8 <__ssputs_r+0x5c>
 80063b2:	230c      	movs	r3, #12
 80063b4:	f8ca 3000 	str.w	r3, [sl]
 80063b8:	89a3      	ldrh	r3, [r4, #12]
 80063ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80063be:	81a3      	strh	r3, [r4, #12]
 80063c0:	f04f 30ff 	mov.w	r0, #4294967295
 80063c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80063c8:	6921      	ldr	r1, [r4, #16]
 80063ca:	464a      	mov	r2, r9
 80063cc:	f7ff fb88 	bl	8005ae0 <memcpy>
 80063d0:	89a3      	ldrh	r3, [r4, #12]
 80063d2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80063d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80063da:	81a3      	strh	r3, [r4, #12]
 80063dc:	6126      	str	r6, [r4, #16]
 80063de:	6165      	str	r5, [r4, #20]
 80063e0:	444e      	add	r6, r9
 80063e2:	eba5 0509 	sub.w	r5, r5, r9
 80063e6:	6026      	str	r6, [r4, #0]
 80063e8:	60a5      	str	r5, [r4, #8]
 80063ea:	463e      	mov	r6, r7
 80063ec:	42be      	cmp	r6, r7
 80063ee:	d900      	bls.n	80063f2 <__ssputs_r+0x86>
 80063f0:	463e      	mov	r6, r7
 80063f2:	4632      	mov	r2, r6
 80063f4:	6820      	ldr	r0, [r4, #0]
 80063f6:	4641      	mov	r1, r8
 80063f8:	f000 f966 	bl	80066c8 <memmove>
 80063fc:	68a3      	ldr	r3, [r4, #8]
 80063fe:	6822      	ldr	r2, [r4, #0]
 8006400:	1b9b      	subs	r3, r3, r6
 8006402:	4432      	add	r2, r6
 8006404:	60a3      	str	r3, [r4, #8]
 8006406:	6022      	str	r2, [r4, #0]
 8006408:	2000      	movs	r0, #0
 800640a:	e7db      	b.n	80063c4 <__ssputs_r+0x58>
 800640c:	462a      	mov	r2, r5
 800640e:	f000 f981 	bl	8006714 <_realloc_r>
 8006412:	4606      	mov	r6, r0
 8006414:	2800      	cmp	r0, #0
 8006416:	d1e1      	bne.n	80063dc <__ssputs_r+0x70>
 8006418:	6921      	ldr	r1, [r4, #16]
 800641a:	4650      	mov	r0, sl
 800641c:	f7ff fefc 	bl	8006218 <_free_r>
 8006420:	e7c7      	b.n	80063b2 <__ssputs_r+0x46>
	...

08006424 <_svfiprintf_r>:
 8006424:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006428:	4698      	mov	r8, r3
 800642a:	898b      	ldrh	r3, [r1, #12]
 800642c:	061b      	lsls	r3, r3, #24
 800642e:	b09d      	sub	sp, #116	; 0x74
 8006430:	4607      	mov	r7, r0
 8006432:	460d      	mov	r5, r1
 8006434:	4614      	mov	r4, r2
 8006436:	d50e      	bpl.n	8006456 <_svfiprintf_r+0x32>
 8006438:	690b      	ldr	r3, [r1, #16]
 800643a:	b963      	cbnz	r3, 8006456 <_svfiprintf_r+0x32>
 800643c:	2140      	movs	r1, #64	; 0x40
 800643e:	f7ff ff3b 	bl	80062b8 <_malloc_r>
 8006442:	6028      	str	r0, [r5, #0]
 8006444:	6128      	str	r0, [r5, #16]
 8006446:	b920      	cbnz	r0, 8006452 <_svfiprintf_r+0x2e>
 8006448:	230c      	movs	r3, #12
 800644a:	603b      	str	r3, [r7, #0]
 800644c:	f04f 30ff 	mov.w	r0, #4294967295
 8006450:	e0d1      	b.n	80065f6 <_svfiprintf_r+0x1d2>
 8006452:	2340      	movs	r3, #64	; 0x40
 8006454:	616b      	str	r3, [r5, #20]
 8006456:	2300      	movs	r3, #0
 8006458:	9309      	str	r3, [sp, #36]	; 0x24
 800645a:	2320      	movs	r3, #32
 800645c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006460:	f8cd 800c 	str.w	r8, [sp, #12]
 8006464:	2330      	movs	r3, #48	; 0x30
 8006466:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006610 <_svfiprintf_r+0x1ec>
 800646a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800646e:	f04f 0901 	mov.w	r9, #1
 8006472:	4623      	mov	r3, r4
 8006474:	469a      	mov	sl, r3
 8006476:	f813 2b01 	ldrb.w	r2, [r3], #1
 800647a:	b10a      	cbz	r2, 8006480 <_svfiprintf_r+0x5c>
 800647c:	2a25      	cmp	r2, #37	; 0x25
 800647e:	d1f9      	bne.n	8006474 <_svfiprintf_r+0x50>
 8006480:	ebba 0b04 	subs.w	fp, sl, r4
 8006484:	d00b      	beq.n	800649e <_svfiprintf_r+0x7a>
 8006486:	465b      	mov	r3, fp
 8006488:	4622      	mov	r2, r4
 800648a:	4629      	mov	r1, r5
 800648c:	4638      	mov	r0, r7
 800648e:	f7ff ff6d 	bl	800636c <__ssputs_r>
 8006492:	3001      	adds	r0, #1
 8006494:	f000 80aa 	beq.w	80065ec <_svfiprintf_r+0x1c8>
 8006498:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800649a:	445a      	add	r2, fp
 800649c:	9209      	str	r2, [sp, #36]	; 0x24
 800649e:	f89a 3000 	ldrb.w	r3, [sl]
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	f000 80a2 	beq.w	80065ec <_svfiprintf_r+0x1c8>
 80064a8:	2300      	movs	r3, #0
 80064aa:	f04f 32ff 	mov.w	r2, #4294967295
 80064ae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80064b2:	f10a 0a01 	add.w	sl, sl, #1
 80064b6:	9304      	str	r3, [sp, #16]
 80064b8:	9307      	str	r3, [sp, #28]
 80064ba:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80064be:	931a      	str	r3, [sp, #104]	; 0x68
 80064c0:	4654      	mov	r4, sl
 80064c2:	2205      	movs	r2, #5
 80064c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80064c8:	4851      	ldr	r0, [pc, #324]	; (8006610 <_svfiprintf_r+0x1ec>)
 80064ca:	f7f9 fe89 	bl	80001e0 <memchr>
 80064ce:	9a04      	ldr	r2, [sp, #16]
 80064d0:	b9d8      	cbnz	r0, 800650a <_svfiprintf_r+0xe6>
 80064d2:	06d0      	lsls	r0, r2, #27
 80064d4:	bf44      	itt	mi
 80064d6:	2320      	movmi	r3, #32
 80064d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80064dc:	0711      	lsls	r1, r2, #28
 80064de:	bf44      	itt	mi
 80064e0:	232b      	movmi	r3, #43	; 0x2b
 80064e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80064e6:	f89a 3000 	ldrb.w	r3, [sl]
 80064ea:	2b2a      	cmp	r3, #42	; 0x2a
 80064ec:	d015      	beq.n	800651a <_svfiprintf_r+0xf6>
 80064ee:	9a07      	ldr	r2, [sp, #28]
 80064f0:	4654      	mov	r4, sl
 80064f2:	2000      	movs	r0, #0
 80064f4:	f04f 0c0a 	mov.w	ip, #10
 80064f8:	4621      	mov	r1, r4
 80064fa:	f811 3b01 	ldrb.w	r3, [r1], #1
 80064fe:	3b30      	subs	r3, #48	; 0x30
 8006500:	2b09      	cmp	r3, #9
 8006502:	d94e      	bls.n	80065a2 <_svfiprintf_r+0x17e>
 8006504:	b1b0      	cbz	r0, 8006534 <_svfiprintf_r+0x110>
 8006506:	9207      	str	r2, [sp, #28]
 8006508:	e014      	b.n	8006534 <_svfiprintf_r+0x110>
 800650a:	eba0 0308 	sub.w	r3, r0, r8
 800650e:	fa09 f303 	lsl.w	r3, r9, r3
 8006512:	4313      	orrs	r3, r2
 8006514:	9304      	str	r3, [sp, #16]
 8006516:	46a2      	mov	sl, r4
 8006518:	e7d2      	b.n	80064c0 <_svfiprintf_r+0x9c>
 800651a:	9b03      	ldr	r3, [sp, #12]
 800651c:	1d19      	adds	r1, r3, #4
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	9103      	str	r1, [sp, #12]
 8006522:	2b00      	cmp	r3, #0
 8006524:	bfbb      	ittet	lt
 8006526:	425b      	neglt	r3, r3
 8006528:	f042 0202 	orrlt.w	r2, r2, #2
 800652c:	9307      	strge	r3, [sp, #28]
 800652e:	9307      	strlt	r3, [sp, #28]
 8006530:	bfb8      	it	lt
 8006532:	9204      	strlt	r2, [sp, #16]
 8006534:	7823      	ldrb	r3, [r4, #0]
 8006536:	2b2e      	cmp	r3, #46	; 0x2e
 8006538:	d10c      	bne.n	8006554 <_svfiprintf_r+0x130>
 800653a:	7863      	ldrb	r3, [r4, #1]
 800653c:	2b2a      	cmp	r3, #42	; 0x2a
 800653e:	d135      	bne.n	80065ac <_svfiprintf_r+0x188>
 8006540:	9b03      	ldr	r3, [sp, #12]
 8006542:	1d1a      	adds	r2, r3, #4
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	9203      	str	r2, [sp, #12]
 8006548:	2b00      	cmp	r3, #0
 800654a:	bfb8      	it	lt
 800654c:	f04f 33ff 	movlt.w	r3, #4294967295
 8006550:	3402      	adds	r4, #2
 8006552:	9305      	str	r3, [sp, #20]
 8006554:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006620 <_svfiprintf_r+0x1fc>
 8006558:	7821      	ldrb	r1, [r4, #0]
 800655a:	2203      	movs	r2, #3
 800655c:	4650      	mov	r0, sl
 800655e:	f7f9 fe3f 	bl	80001e0 <memchr>
 8006562:	b140      	cbz	r0, 8006576 <_svfiprintf_r+0x152>
 8006564:	2340      	movs	r3, #64	; 0x40
 8006566:	eba0 000a 	sub.w	r0, r0, sl
 800656a:	fa03 f000 	lsl.w	r0, r3, r0
 800656e:	9b04      	ldr	r3, [sp, #16]
 8006570:	4303      	orrs	r3, r0
 8006572:	3401      	adds	r4, #1
 8006574:	9304      	str	r3, [sp, #16]
 8006576:	f814 1b01 	ldrb.w	r1, [r4], #1
 800657a:	4826      	ldr	r0, [pc, #152]	; (8006614 <_svfiprintf_r+0x1f0>)
 800657c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006580:	2206      	movs	r2, #6
 8006582:	f7f9 fe2d 	bl	80001e0 <memchr>
 8006586:	2800      	cmp	r0, #0
 8006588:	d038      	beq.n	80065fc <_svfiprintf_r+0x1d8>
 800658a:	4b23      	ldr	r3, [pc, #140]	; (8006618 <_svfiprintf_r+0x1f4>)
 800658c:	bb1b      	cbnz	r3, 80065d6 <_svfiprintf_r+0x1b2>
 800658e:	9b03      	ldr	r3, [sp, #12]
 8006590:	3307      	adds	r3, #7
 8006592:	f023 0307 	bic.w	r3, r3, #7
 8006596:	3308      	adds	r3, #8
 8006598:	9303      	str	r3, [sp, #12]
 800659a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800659c:	4433      	add	r3, r6
 800659e:	9309      	str	r3, [sp, #36]	; 0x24
 80065a0:	e767      	b.n	8006472 <_svfiprintf_r+0x4e>
 80065a2:	fb0c 3202 	mla	r2, ip, r2, r3
 80065a6:	460c      	mov	r4, r1
 80065a8:	2001      	movs	r0, #1
 80065aa:	e7a5      	b.n	80064f8 <_svfiprintf_r+0xd4>
 80065ac:	2300      	movs	r3, #0
 80065ae:	3401      	adds	r4, #1
 80065b0:	9305      	str	r3, [sp, #20]
 80065b2:	4619      	mov	r1, r3
 80065b4:	f04f 0c0a 	mov.w	ip, #10
 80065b8:	4620      	mov	r0, r4
 80065ba:	f810 2b01 	ldrb.w	r2, [r0], #1
 80065be:	3a30      	subs	r2, #48	; 0x30
 80065c0:	2a09      	cmp	r2, #9
 80065c2:	d903      	bls.n	80065cc <_svfiprintf_r+0x1a8>
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d0c5      	beq.n	8006554 <_svfiprintf_r+0x130>
 80065c8:	9105      	str	r1, [sp, #20]
 80065ca:	e7c3      	b.n	8006554 <_svfiprintf_r+0x130>
 80065cc:	fb0c 2101 	mla	r1, ip, r1, r2
 80065d0:	4604      	mov	r4, r0
 80065d2:	2301      	movs	r3, #1
 80065d4:	e7f0      	b.n	80065b8 <_svfiprintf_r+0x194>
 80065d6:	ab03      	add	r3, sp, #12
 80065d8:	9300      	str	r3, [sp, #0]
 80065da:	462a      	mov	r2, r5
 80065dc:	4b0f      	ldr	r3, [pc, #60]	; (800661c <_svfiprintf_r+0x1f8>)
 80065de:	a904      	add	r1, sp, #16
 80065e0:	4638      	mov	r0, r7
 80065e2:	f7fe f80d 	bl	8004600 <_printf_float>
 80065e6:	1c42      	adds	r2, r0, #1
 80065e8:	4606      	mov	r6, r0
 80065ea:	d1d6      	bne.n	800659a <_svfiprintf_r+0x176>
 80065ec:	89ab      	ldrh	r3, [r5, #12]
 80065ee:	065b      	lsls	r3, r3, #25
 80065f0:	f53f af2c 	bmi.w	800644c <_svfiprintf_r+0x28>
 80065f4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80065f6:	b01d      	add	sp, #116	; 0x74
 80065f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065fc:	ab03      	add	r3, sp, #12
 80065fe:	9300      	str	r3, [sp, #0]
 8006600:	462a      	mov	r2, r5
 8006602:	4b06      	ldr	r3, [pc, #24]	; (800661c <_svfiprintf_r+0x1f8>)
 8006604:	a904      	add	r1, sp, #16
 8006606:	4638      	mov	r0, r7
 8006608:	f7fe fa9e 	bl	8004b48 <_printf_i>
 800660c:	e7eb      	b.n	80065e6 <_svfiprintf_r+0x1c2>
 800660e:	bf00      	nop
 8006610:	0800748c 	.word	0x0800748c
 8006614:	08007496 	.word	0x08007496
 8006618:	08004601 	.word	0x08004601
 800661c:	0800636d 	.word	0x0800636d
 8006620:	08007492 	.word	0x08007492

08006624 <_sbrk_r>:
 8006624:	b538      	push	{r3, r4, r5, lr}
 8006626:	4d06      	ldr	r5, [pc, #24]	; (8006640 <_sbrk_r+0x1c>)
 8006628:	2300      	movs	r3, #0
 800662a:	4604      	mov	r4, r0
 800662c:	4608      	mov	r0, r1
 800662e:	602b      	str	r3, [r5, #0]
 8006630:	f7fb fa3c 	bl	8001aac <_sbrk>
 8006634:	1c43      	adds	r3, r0, #1
 8006636:	d102      	bne.n	800663e <_sbrk_r+0x1a>
 8006638:	682b      	ldr	r3, [r5, #0]
 800663a:	b103      	cbz	r3, 800663e <_sbrk_r+0x1a>
 800663c:	6023      	str	r3, [r4, #0]
 800663e:	bd38      	pop	{r3, r4, r5, pc}
 8006640:	2000044c 	.word	0x2000044c

08006644 <__assert_func>:
 8006644:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006646:	4614      	mov	r4, r2
 8006648:	461a      	mov	r2, r3
 800664a:	4b09      	ldr	r3, [pc, #36]	; (8006670 <__assert_func+0x2c>)
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	4605      	mov	r5, r0
 8006650:	68d8      	ldr	r0, [r3, #12]
 8006652:	b14c      	cbz	r4, 8006668 <__assert_func+0x24>
 8006654:	4b07      	ldr	r3, [pc, #28]	; (8006674 <__assert_func+0x30>)
 8006656:	9100      	str	r1, [sp, #0]
 8006658:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800665c:	4906      	ldr	r1, [pc, #24]	; (8006678 <__assert_func+0x34>)
 800665e:	462b      	mov	r3, r5
 8006660:	f000 f80e 	bl	8006680 <fiprintf>
 8006664:	f000 faa4 	bl	8006bb0 <abort>
 8006668:	4b04      	ldr	r3, [pc, #16]	; (800667c <__assert_func+0x38>)
 800666a:	461c      	mov	r4, r3
 800666c:	e7f3      	b.n	8006656 <__assert_func+0x12>
 800666e:	bf00      	nop
 8006670:	2000000c 	.word	0x2000000c
 8006674:	0800749d 	.word	0x0800749d
 8006678:	080074aa 	.word	0x080074aa
 800667c:	080074d8 	.word	0x080074d8

08006680 <fiprintf>:
 8006680:	b40e      	push	{r1, r2, r3}
 8006682:	b503      	push	{r0, r1, lr}
 8006684:	4601      	mov	r1, r0
 8006686:	ab03      	add	r3, sp, #12
 8006688:	4805      	ldr	r0, [pc, #20]	; (80066a0 <fiprintf+0x20>)
 800668a:	f853 2b04 	ldr.w	r2, [r3], #4
 800668e:	6800      	ldr	r0, [r0, #0]
 8006690:	9301      	str	r3, [sp, #4]
 8006692:	f000 f88f 	bl	80067b4 <_vfiprintf_r>
 8006696:	b002      	add	sp, #8
 8006698:	f85d eb04 	ldr.w	lr, [sp], #4
 800669c:	b003      	add	sp, #12
 800669e:	4770      	bx	lr
 80066a0:	2000000c 	.word	0x2000000c

080066a4 <__ascii_mbtowc>:
 80066a4:	b082      	sub	sp, #8
 80066a6:	b901      	cbnz	r1, 80066aa <__ascii_mbtowc+0x6>
 80066a8:	a901      	add	r1, sp, #4
 80066aa:	b142      	cbz	r2, 80066be <__ascii_mbtowc+0x1a>
 80066ac:	b14b      	cbz	r3, 80066c2 <__ascii_mbtowc+0x1e>
 80066ae:	7813      	ldrb	r3, [r2, #0]
 80066b0:	600b      	str	r3, [r1, #0]
 80066b2:	7812      	ldrb	r2, [r2, #0]
 80066b4:	1e10      	subs	r0, r2, #0
 80066b6:	bf18      	it	ne
 80066b8:	2001      	movne	r0, #1
 80066ba:	b002      	add	sp, #8
 80066bc:	4770      	bx	lr
 80066be:	4610      	mov	r0, r2
 80066c0:	e7fb      	b.n	80066ba <__ascii_mbtowc+0x16>
 80066c2:	f06f 0001 	mvn.w	r0, #1
 80066c6:	e7f8      	b.n	80066ba <__ascii_mbtowc+0x16>

080066c8 <memmove>:
 80066c8:	4288      	cmp	r0, r1
 80066ca:	b510      	push	{r4, lr}
 80066cc:	eb01 0402 	add.w	r4, r1, r2
 80066d0:	d902      	bls.n	80066d8 <memmove+0x10>
 80066d2:	4284      	cmp	r4, r0
 80066d4:	4623      	mov	r3, r4
 80066d6:	d807      	bhi.n	80066e8 <memmove+0x20>
 80066d8:	1e43      	subs	r3, r0, #1
 80066da:	42a1      	cmp	r1, r4
 80066dc:	d008      	beq.n	80066f0 <memmove+0x28>
 80066de:	f811 2b01 	ldrb.w	r2, [r1], #1
 80066e2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80066e6:	e7f8      	b.n	80066da <memmove+0x12>
 80066e8:	4402      	add	r2, r0
 80066ea:	4601      	mov	r1, r0
 80066ec:	428a      	cmp	r2, r1
 80066ee:	d100      	bne.n	80066f2 <memmove+0x2a>
 80066f0:	bd10      	pop	{r4, pc}
 80066f2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80066f6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80066fa:	e7f7      	b.n	80066ec <memmove+0x24>

080066fc <__malloc_lock>:
 80066fc:	4801      	ldr	r0, [pc, #4]	; (8006704 <__malloc_lock+0x8>)
 80066fe:	f000 bc17 	b.w	8006f30 <__retarget_lock_acquire_recursive>
 8006702:	bf00      	nop
 8006704:	20000454 	.word	0x20000454

08006708 <__malloc_unlock>:
 8006708:	4801      	ldr	r0, [pc, #4]	; (8006710 <__malloc_unlock+0x8>)
 800670a:	f000 bc12 	b.w	8006f32 <__retarget_lock_release_recursive>
 800670e:	bf00      	nop
 8006710:	20000454 	.word	0x20000454

08006714 <_realloc_r>:
 8006714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006716:	4607      	mov	r7, r0
 8006718:	4614      	mov	r4, r2
 800671a:	460e      	mov	r6, r1
 800671c:	b921      	cbnz	r1, 8006728 <_realloc_r+0x14>
 800671e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006722:	4611      	mov	r1, r2
 8006724:	f7ff bdc8 	b.w	80062b8 <_malloc_r>
 8006728:	b922      	cbnz	r2, 8006734 <_realloc_r+0x20>
 800672a:	f7ff fd75 	bl	8006218 <_free_r>
 800672e:	4625      	mov	r5, r4
 8006730:	4628      	mov	r0, r5
 8006732:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006734:	f000 fc62 	bl	8006ffc <_malloc_usable_size_r>
 8006738:	42a0      	cmp	r0, r4
 800673a:	d20f      	bcs.n	800675c <_realloc_r+0x48>
 800673c:	4621      	mov	r1, r4
 800673e:	4638      	mov	r0, r7
 8006740:	f7ff fdba 	bl	80062b8 <_malloc_r>
 8006744:	4605      	mov	r5, r0
 8006746:	2800      	cmp	r0, #0
 8006748:	d0f2      	beq.n	8006730 <_realloc_r+0x1c>
 800674a:	4631      	mov	r1, r6
 800674c:	4622      	mov	r2, r4
 800674e:	f7ff f9c7 	bl	8005ae0 <memcpy>
 8006752:	4631      	mov	r1, r6
 8006754:	4638      	mov	r0, r7
 8006756:	f7ff fd5f 	bl	8006218 <_free_r>
 800675a:	e7e9      	b.n	8006730 <_realloc_r+0x1c>
 800675c:	4635      	mov	r5, r6
 800675e:	e7e7      	b.n	8006730 <_realloc_r+0x1c>

08006760 <__sfputc_r>:
 8006760:	6893      	ldr	r3, [r2, #8]
 8006762:	3b01      	subs	r3, #1
 8006764:	2b00      	cmp	r3, #0
 8006766:	b410      	push	{r4}
 8006768:	6093      	str	r3, [r2, #8]
 800676a:	da08      	bge.n	800677e <__sfputc_r+0x1e>
 800676c:	6994      	ldr	r4, [r2, #24]
 800676e:	42a3      	cmp	r3, r4
 8006770:	db01      	blt.n	8006776 <__sfputc_r+0x16>
 8006772:	290a      	cmp	r1, #10
 8006774:	d103      	bne.n	800677e <__sfputc_r+0x1e>
 8006776:	f85d 4b04 	ldr.w	r4, [sp], #4
 800677a:	f000 b94b 	b.w	8006a14 <__swbuf_r>
 800677e:	6813      	ldr	r3, [r2, #0]
 8006780:	1c58      	adds	r0, r3, #1
 8006782:	6010      	str	r0, [r2, #0]
 8006784:	7019      	strb	r1, [r3, #0]
 8006786:	4608      	mov	r0, r1
 8006788:	f85d 4b04 	ldr.w	r4, [sp], #4
 800678c:	4770      	bx	lr

0800678e <__sfputs_r>:
 800678e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006790:	4606      	mov	r6, r0
 8006792:	460f      	mov	r7, r1
 8006794:	4614      	mov	r4, r2
 8006796:	18d5      	adds	r5, r2, r3
 8006798:	42ac      	cmp	r4, r5
 800679a:	d101      	bne.n	80067a0 <__sfputs_r+0x12>
 800679c:	2000      	movs	r0, #0
 800679e:	e007      	b.n	80067b0 <__sfputs_r+0x22>
 80067a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80067a4:	463a      	mov	r2, r7
 80067a6:	4630      	mov	r0, r6
 80067a8:	f7ff ffda 	bl	8006760 <__sfputc_r>
 80067ac:	1c43      	adds	r3, r0, #1
 80067ae:	d1f3      	bne.n	8006798 <__sfputs_r+0xa>
 80067b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080067b4 <_vfiprintf_r>:
 80067b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067b8:	460d      	mov	r5, r1
 80067ba:	b09d      	sub	sp, #116	; 0x74
 80067bc:	4614      	mov	r4, r2
 80067be:	4698      	mov	r8, r3
 80067c0:	4606      	mov	r6, r0
 80067c2:	b118      	cbz	r0, 80067cc <_vfiprintf_r+0x18>
 80067c4:	6983      	ldr	r3, [r0, #24]
 80067c6:	b90b      	cbnz	r3, 80067cc <_vfiprintf_r+0x18>
 80067c8:	f000 fb14 	bl	8006df4 <__sinit>
 80067cc:	4b89      	ldr	r3, [pc, #548]	; (80069f4 <_vfiprintf_r+0x240>)
 80067ce:	429d      	cmp	r5, r3
 80067d0:	d11b      	bne.n	800680a <_vfiprintf_r+0x56>
 80067d2:	6875      	ldr	r5, [r6, #4]
 80067d4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80067d6:	07d9      	lsls	r1, r3, #31
 80067d8:	d405      	bmi.n	80067e6 <_vfiprintf_r+0x32>
 80067da:	89ab      	ldrh	r3, [r5, #12]
 80067dc:	059a      	lsls	r2, r3, #22
 80067de:	d402      	bmi.n	80067e6 <_vfiprintf_r+0x32>
 80067e0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80067e2:	f000 fba5 	bl	8006f30 <__retarget_lock_acquire_recursive>
 80067e6:	89ab      	ldrh	r3, [r5, #12]
 80067e8:	071b      	lsls	r3, r3, #28
 80067ea:	d501      	bpl.n	80067f0 <_vfiprintf_r+0x3c>
 80067ec:	692b      	ldr	r3, [r5, #16]
 80067ee:	b9eb      	cbnz	r3, 800682c <_vfiprintf_r+0x78>
 80067f0:	4629      	mov	r1, r5
 80067f2:	4630      	mov	r0, r6
 80067f4:	f000 f96e 	bl	8006ad4 <__swsetup_r>
 80067f8:	b1c0      	cbz	r0, 800682c <_vfiprintf_r+0x78>
 80067fa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80067fc:	07dc      	lsls	r4, r3, #31
 80067fe:	d50e      	bpl.n	800681e <_vfiprintf_r+0x6a>
 8006800:	f04f 30ff 	mov.w	r0, #4294967295
 8006804:	b01d      	add	sp, #116	; 0x74
 8006806:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800680a:	4b7b      	ldr	r3, [pc, #492]	; (80069f8 <_vfiprintf_r+0x244>)
 800680c:	429d      	cmp	r5, r3
 800680e:	d101      	bne.n	8006814 <_vfiprintf_r+0x60>
 8006810:	68b5      	ldr	r5, [r6, #8]
 8006812:	e7df      	b.n	80067d4 <_vfiprintf_r+0x20>
 8006814:	4b79      	ldr	r3, [pc, #484]	; (80069fc <_vfiprintf_r+0x248>)
 8006816:	429d      	cmp	r5, r3
 8006818:	bf08      	it	eq
 800681a:	68f5      	ldreq	r5, [r6, #12]
 800681c:	e7da      	b.n	80067d4 <_vfiprintf_r+0x20>
 800681e:	89ab      	ldrh	r3, [r5, #12]
 8006820:	0598      	lsls	r0, r3, #22
 8006822:	d4ed      	bmi.n	8006800 <_vfiprintf_r+0x4c>
 8006824:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006826:	f000 fb84 	bl	8006f32 <__retarget_lock_release_recursive>
 800682a:	e7e9      	b.n	8006800 <_vfiprintf_r+0x4c>
 800682c:	2300      	movs	r3, #0
 800682e:	9309      	str	r3, [sp, #36]	; 0x24
 8006830:	2320      	movs	r3, #32
 8006832:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006836:	f8cd 800c 	str.w	r8, [sp, #12]
 800683a:	2330      	movs	r3, #48	; 0x30
 800683c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006a00 <_vfiprintf_r+0x24c>
 8006840:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006844:	f04f 0901 	mov.w	r9, #1
 8006848:	4623      	mov	r3, r4
 800684a:	469a      	mov	sl, r3
 800684c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006850:	b10a      	cbz	r2, 8006856 <_vfiprintf_r+0xa2>
 8006852:	2a25      	cmp	r2, #37	; 0x25
 8006854:	d1f9      	bne.n	800684a <_vfiprintf_r+0x96>
 8006856:	ebba 0b04 	subs.w	fp, sl, r4
 800685a:	d00b      	beq.n	8006874 <_vfiprintf_r+0xc0>
 800685c:	465b      	mov	r3, fp
 800685e:	4622      	mov	r2, r4
 8006860:	4629      	mov	r1, r5
 8006862:	4630      	mov	r0, r6
 8006864:	f7ff ff93 	bl	800678e <__sfputs_r>
 8006868:	3001      	adds	r0, #1
 800686a:	f000 80aa 	beq.w	80069c2 <_vfiprintf_r+0x20e>
 800686e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006870:	445a      	add	r2, fp
 8006872:	9209      	str	r2, [sp, #36]	; 0x24
 8006874:	f89a 3000 	ldrb.w	r3, [sl]
 8006878:	2b00      	cmp	r3, #0
 800687a:	f000 80a2 	beq.w	80069c2 <_vfiprintf_r+0x20e>
 800687e:	2300      	movs	r3, #0
 8006880:	f04f 32ff 	mov.w	r2, #4294967295
 8006884:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006888:	f10a 0a01 	add.w	sl, sl, #1
 800688c:	9304      	str	r3, [sp, #16]
 800688e:	9307      	str	r3, [sp, #28]
 8006890:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006894:	931a      	str	r3, [sp, #104]	; 0x68
 8006896:	4654      	mov	r4, sl
 8006898:	2205      	movs	r2, #5
 800689a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800689e:	4858      	ldr	r0, [pc, #352]	; (8006a00 <_vfiprintf_r+0x24c>)
 80068a0:	f7f9 fc9e 	bl	80001e0 <memchr>
 80068a4:	9a04      	ldr	r2, [sp, #16]
 80068a6:	b9d8      	cbnz	r0, 80068e0 <_vfiprintf_r+0x12c>
 80068a8:	06d1      	lsls	r1, r2, #27
 80068aa:	bf44      	itt	mi
 80068ac:	2320      	movmi	r3, #32
 80068ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80068b2:	0713      	lsls	r3, r2, #28
 80068b4:	bf44      	itt	mi
 80068b6:	232b      	movmi	r3, #43	; 0x2b
 80068b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80068bc:	f89a 3000 	ldrb.w	r3, [sl]
 80068c0:	2b2a      	cmp	r3, #42	; 0x2a
 80068c2:	d015      	beq.n	80068f0 <_vfiprintf_r+0x13c>
 80068c4:	9a07      	ldr	r2, [sp, #28]
 80068c6:	4654      	mov	r4, sl
 80068c8:	2000      	movs	r0, #0
 80068ca:	f04f 0c0a 	mov.w	ip, #10
 80068ce:	4621      	mov	r1, r4
 80068d0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80068d4:	3b30      	subs	r3, #48	; 0x30
 80068d6:	2b09      	cmp	r3, #9
 80068d8:	d94e      	bls.n	8006978 <_vfiprintf_r+0x1c4>
 80068da:	b1b0      	cbz	r0, 800690a <_vfiprintf_r+0x156>
 80068dc:	9207      	str	r2, [sp, #28]
 80068de:	e014      	b.n	800690a <_vfiprintf_r+0x156>
 80068e0:	eba0 0308 	sub.w	r3, r0, r8
 80068e4:	fa09 f303 	lsl.w	r3, r9, r3
 80068e8:	4313      	orrs	r3, r2
 80068ea:	9304      	str	r3, [sp, #16]
 80068ec:	46a2      	mov	sl, r4
 80068ee:	e7d2      	b.n	8006896 <_vfiprintf_r+0xe2>
 80068f0:	9b03      	ldr	r3, [sp, #12]
 80068f2:	1d19      	adds	r1, r3, #4
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	9103      	str	r1, [sp, #12]
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	bfbb      	ittet	lt
 80068fc:	425b      	neglt	r3, r3
 80068fe:	f042 0202 	orrlt.w	r2, r2, #2
 8006902:	9307      	strge	r3, [sp, #28]
 8006904:	9307      	strlt	r3, [sp, #28]
 8006906:	bfb8      	it	lt
 8006908:	9204      	strlt	r2, [sp, #16]
 800690a:	7823      	ldrb	r3, [r4, #0]
 800690c:	2b2e      	cmp	r3, #46	; 0x2e
 800690e:	d10c      	bne.n	800692a <_vfiprintf_r+0x176>
 8006910:	7863      	ldrb	r3, [r4, #1]
 8006912:	2b2a      	cmp	r3, #42	; 0x2a
 8006914:	d135      	bne.n	8006982 <_vfiprintf_r+0x1ce>
 8006916:	9b03      	ldr	r3, [sp, #12]
 8006918:	1d1a      	adds	r2, r3, #4
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	9203      	str	r2, [sp, #12]
 800691e:	2b00      	cmp	r3, #0
 8006920:	bfb8      	it	lt
 8006922:	f04f 33ff 	movlt.w	r3, #4294967295
 8006926:	3402      	adds	r4, #2
 8006928:	9305      	str	r3, [sp, #20]
 800692a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006a10 <_vfiprintf_r+0x25c>
 800692e:	7821      	ldrb	r1, [r4, #0]
 8006930:	2203      	movs	r2, #3
 8006932:	4650      	mov	r0, sl
 8006934:	f7f9 fc54 	bl	80001e0 <memchr>
 8006938:	b140      	cbz	r0, 800694c <_vfiprintf_r+0x198>
 800693a:	2340      	movs	r3, #64	; 0x40
 800693c:	eba0 000a 	sub.w	r0, r0, sl
 8006940:	fa03 f000 	lsl.w	r0, r3, r0
 8006944:	9b04      	ldr	r3, [sp, #16]
 8006946:	4303      	orrs	r3, r0
 8006948:	3401      	adds	r4, #1
 800694a:	9304      	str	r3, [sp, #16]
 800694c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006950:	482c      	ldr	r0, [pc, #176]	; (8006a04 <_vfiprintf_r+0x250>)
 8006952:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006956:	2206      	movs	r2, #6
 8006958:	f7f9 fc42 	bl	80001e0 <memchr>
 800695c:	2800      	cmp	r0, #0
 800695e:	d03f      	beq.n	80069e0 <_vfiprintf_r+0x22c>
 8006960:	4b29      	ldr	r3, [pc, #164]	; (8006a08 <_vfiprintf_r+0x254>)
 8006962:	bb1b      	cbnz	r3, 80069ac <_vfiprintf_r+0x1f8>
 8006964:	9b03      	ldr	r3, [sp, #12]
 8006966:	3307      	adds	r3, #7
 8006968:	f023 0307 	bic.w	r3, r3, #7
 800696c:	3308      	adds	r3, #8
 800696e:	9303      	str	r3, [sp, #12]
 8006970:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006972:	443b      	add	r3, r7
 8006974:	9309      	str	r3, [sp, #36]	; 0x24
 8006976:	e767      	b.n	8006848 <_vfiprintf_r+0x94>
 8006978:	fb0c 3202 	mla	r2, ip, r2, r3
 800697c:	460c      	mov	r4, r1
 800697e:	2001      	movs	r0, #1
 8006980:	e7a5      	b.n	80068ce <_vfiprintf_r+0x11a>
 8006982:	2300      	movs	r3, #0
 8006984:	3401      	adds	r4, #1
 8006986:	9305      	str	r3, [sp, #20]
 8006988:	4619      	mov	r1, r3
 800698a:	f04f 0c0a 	mov.w	ip, #10
 800698e:	4620      	mov	r0, r4
 8006990:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006994:	3a30      	subs	r2, #48	; 0x30
 8006996:	2a09      	cmp	r2, #9
 8006998:	d903      	bls.n	80069a2 <_vfiprintf_r+0x1ee>
 800699a:	2b00      	cmp	r3, #0
 800699c:	d0c5      	beq.n	800692a <_vfiprintf_r+0x176>
 800699e:	9105      	str	r1, [sp, #20]
 80069a0:	e7c3      	b.n	800692a <_vfiprintf_r+0x176>
 80069a2:	fb0c 2101 	mla	r1, ip, r1, r2
 80069a6:	4604      	mov	r4, r0
 80069a8:	2301      	movs	r3, #1
 80069aa:	e7f0      	b.n	800698e <_vfiprintf_r+0x1da>
 80069ac:	ab03      	add	r3, sp, #12
 80069ae:	9300      	str	r3, [sp, #0]
 80069b0:	462a      	mov	r2, r5
 80069b2:	4b16      	ldr	r3, [pc, #88]	; (8006a0c <_vfiprintf_r+0x258>)
 80069b4:	a904      	add	r1, sp, #16
 80069b6:	4630      	mov	r0, r6
 80069b8:	f7fd fe22 	bl	8004600 <_printf_float>
 80069bc:	4607      	mov	r7, r0
 80069be:	1c78      	adds	r0, r7, #1
 80069c0:	d1d6      	bne.n	8006970 <_vfiprintf_r+0x1bc>
 80069c2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80069c4:	07d9      	lsls	r1, r3, #31
 80069c6:	d405      	bmi.n	80069d4 <_vfiprintf_r+0x220>
 80069c8:	89ab      	ldrh	r3, [r5, #12]
 80069ca:	059a      	lsls	r2, r3, #22
 80069cc:	d402      	bmi.n	80069d4 <_vfiprintf_r+0x220>
 80069ce:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80069d0:	f000 faaf 	bl	8006f32 <__retarget_lock_release_recursive>
 80069d4:	89ab      	ldrh	r3, [r5, #12]
 80069d6:	065b      	lsls	r3, r3, #25
 80069d8:	f53f af12 	bmi.w	8006800 <_vfiprintf_r+0x4c>
 80069dc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80069de:	e711      	b.n	8006804 <_vfiprintf_r+0x50>
 80069e0:	ab03      	add	r3, sp, #12
 80069e2:	9300      	str	r3, [sp, #0]
 80069e4:	462a      	mov	r2, r5
 80069e6:	4b09      	ldr	r3, [pc, #36]	; (8006a0c <_vfiprintf_r+0x258>)
 80069e8:	a904      	add	r1, sp, #16
 80069ea:	4630      	mov	r0, r6
 80069ec:	f7fe f8ac 	bl	8004b48 <_printf_i>
 80069f0:	e7e4      	b.n	80069bc <_vfiprintf_r+0x208>
 80069f2:	bf00      	nop
 80069f4:	08007604 	.word	0x08007604
 80069f8:	08007624 	.word	0x08007624
 80069fc:	080075e4 	.word	0x080075e4
 8006a00:	0800748c 	.word	0x0800748c
 8006a04:	08007496 	.word	0x08007496
 8006a08:	08004601 	.word	0x08004601
 8006a0c:	0800678f 	.word	0x0800678f
 8006a10:	08007492 	.word	0x08007492

08006a14 <__swbuf_r>:
 8006a14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a16:	460e      	mov	r6, r1
 8006a18:	4614      	mov	r4, r2
 8006a1a:	4605      	mov	r5, r0
 8006a1c:	b118      	cbz	r0, 8006a26 <__swbuf_r+0x12>
 8006a1e:	6983      	ldr	r3, [r0, #24]
 8006a20:	b90b      	cbnz	r3, 8006a26 <__swbuf_r+0x12>
 8006a22:	f000 f9e7 	bl	8006df4 <__sinit>
 8006a26:	4b21      	ldr	r3, [pc, #132]	; (8006aac <__swbuf_r+0x98>)
 8006a28:	429c      	cmp	r4, r3
 8006a2a:	d12b      	bne.n	8006a84 <__swbuf_r+0x70>
 8006a2c:	686c      	ldr	r4, [r5, #4]
 8006a2e:	69a3      	ldr	r3, [r4, #24]
 8006a30:	60a3      	str	r3, [r4, #8]
 8006a32:	89a3      	ldrh	r3, [r4, #12]
 8006a34:	071a      	lsls	r2, r3, #28
 8006a36:	d52f      	bpl.n	8006a98 <__swbuf_r+0x84>
 8006a38:	6923      	ldr	r3, [r4, #16]
 8006a3a:	b36b      	cbz	r3, 8006a98 <__swbuf_r+0x84>
 8006a3c:	6923      	ldr	r3, [r4, #16]
 8006a3e:	6820      	ldr	r0, [r4, #0]
 8006a40:	1ac0      	subs	r0, r0, r3
 8006a42:	6963      	ldr	r3, [r4, #20]
 8006a44:	b2f6      	uxtb	r6, r6
 8006a46:	4283      	cmp	r3, r0
 8006a48:	4637      	mov	r7, r6
 8006a4a:	dc04      	bgt.n	8006a56 <__swbuf_r+0x42>
 8006a4c:	4621      	mov	r1, r4
 8006a4e:	4628      	mov	r0, r5
 8006a50:	f000 f93c 	bl	8006ccc <_fflush_r>
 8006a54:	bb30      	cbnz	r0, 8006aa4 <__swbuf_r+0x90>
 8006a56:	68a3      	ldr	r3, [r4, #8]
 8006a58:	3b01      	subs	r3, #1
 8006a5a:	60a3      	str	r3, [r4, #8]
 8006a5c:	6823      	ldr	r3, [r4, #0]
 8006a5e:	1c5a      	adds	r2, r3, #1
 8006a60:	6022      	str	r2, [r4, #0]
 8006a62:	701e      	strb	r6, [r3, #0]
 8006a64:	6963      	ldr	r3, [r4, #20]
 8006a66:	3001      	adds	r0, #1
 8006a68:	4283      	cmp	r3, r0
 8006a6a:	d004      	beq.n	8006a76 <__swbuf_r+0x62>
 8006a6c:	89a3      	ldrh	r3, [r4, #12]
 8006a6e:	07db      	lsls	r3, r3, #31
 8006a70:	d506      	bpl.n	8006a80 <__swbuf_r+0x6c>
 8006a72:	2e0a      	cmp	r6, #10
 8006a74:	d104      	bne.n	8006a80 <__swbuf_r+0x6c>
 8006a76:	4621      	mov	r1, r4
 8006a78:	4628      	mov	r0, r5
 8006a7a:	f000 f927 	bl	8006ccc <_fflush_r>
 8006a7e:	b988      	cbnz	r0, 8006aa4 <__swbuf_r+0x90>
 8006a80:	4638      	mov	r0, r7
 8006a82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006a84:	4b0a      	ldr	r3, [pc, #40]	; (8006ab0 <__swbuf_r+0x9c>)
 8006a86:	429c      	cmp	r4, r3
 8006a88:	d101      	bne.n	8006a8e <__swbuf_r+0x7a>
 8006a8a:	68ac      	ldr	r4, [r5, #8]
 8006a8c:	e7cf      	b.n	8006a2e <__swbuf_r+0x1a>
 8006a8e:	4b09      	ldr	r3, [pc, #36]	; (8006ab4 <__swbuf_r+0xa0>)
 8006a90:	429c      	cmp	r4, r3
 8006a92:	bf08      	it	eq
 8006a94:	68ec      	ldreq	r4, [r5, #12]
 8006a96:	e7ca      	b.n	8006a2e <__swbuf_r+0x1a>
 8006a98:	4621      	mov	r1, r4
 8006a9a:	4628      	mov	r0, r5
 8006a9c:	f000 f81a 	bl	8006ad4 <__swsetup_r>
 8006aa0:	2800      	cmp	r0, #0
 8006aa2:	d0cb      	beq.n	8006a3c <__swbuf_r+0x28>
 8006aa4:	f04f 37ff 	mov.w	r7, #4294967295
 8006aa8:	e7ea      	b.n	8006a80 <__swbuf_r+0x6c>
 8006aaa:	bf00      	nop
 8006aac:	08007604 	.word	0x08007604
 8006ab0:	08007624 	.word	0x08007624
 8006ab4:	080075e4 	.word	0x080075e4

08006ab8 <__ascii_wctomb>:
 8006ab8:	b149      	cbz	r1, 8006ace <__ascii_wctomb+0x16>
 8006aba:	2aff      	cmp	r2, #255	; 0xff
 8006abc:	bf85      	ittet	hi
 8006abe:	238a      	movhi	r3, #138	; 0x8a
 8006ac0:	6003      	strhi	r3, [r0, #0]
 8006ac2:	700a      	strbls	r2, [r1, #0]
 8006ac4:	f04f 30ff 	movhi.w	r0, #4294967295
 8006ac8:	bf98      	it	ls
 8006aca:	2001      	movls	r0, #1
 8006acc:	4770      	bx	lr
 8006ace:	4608      	mov	r0, r1
 8006ad0:	4770      	bx	lr
	...

08006ad4 <__swsetup_r>:
 8006ad4:	4b32      	ldr	r3, [pc, #200]	; (8006ba0 <__swsetup_r+0xcc>)
 8006ad6:	b570      	push	{r4, r5, r6, lr}
 8006ad8:	681d      	ldr	r5, [r3, #0]
 8006ada:	4606      	mov	r6, r0
 8006adc:	460c      	mov	r4, r1
 8006ade:	b125      	cbz	r5, 8006aea <__swsetup_r+0x16>
 8006ae0:	69ab      	ldr	r3, [r5, #24]
 8006ae2:	b913      	cbnz	r3, 8006aea <__swsetup_r+0x16>
 8006ae4:	4628      	mov	r0, r5
 8006ae6:	f000 f985 	bl	8006df4 <__sinit>
 8006aea:	4b2e      	ldr	r3, [pc, #184]	; (8006ba4 <__swsetup_r+0xd0>)
 8006aec:	429c      	cmp	r4, r3
 8006aee:	d10f      	bne.n	8006b10 <__swsetup_r+0x3c>
 8006af0:	686c      	ldr	r4, [r5, #4]
 8006af2:	89a3      	ldrh	r3, [r4, #12]
 8006af4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006af8:	0719      	lsls	r1, r3, #28
 8006afa:	d42c      	bmi.n	8006b56 <__swsetup_r+0x82>
 8006afc:	06dd      	lsls	r5, r3, #27
 8006afe:	d411      	bmi.n	8006b24 <__swsetup_r+0x50>
 8006b00:	2309      	movs	r3, #9
 8006b02:	6033      	str	r3, [r6, #0]
 8006b04:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006b08:	81a3      	strh	r3, [r4, #12]
 8006b0a:	f04f 30ff 	mov.w	r0, #4294967295
 8006b0e:	e03e      	b.n	8006b8e <__swsetup_r+0xba>
 8006b10:	4b25      	ldr	r3, [pc, #148]	; (8006ba8 <__swsetup_r+0xd4>)
 8006b12:	429c      	cmp	r4, r3
 8006b14:	d101      	bne.n	8006b1a <__swsetup_r+0x46>
 8006b16:	68ac      	ldr	r4, [r5, #8]
 8006b18:	e7eb      	b.n	8006af2 <__swsetup_r+0x1e>
 8006b1a:	4b24      	ldr	r3, [pc, #144]	; (8006bac <__swsetup_r+0xd8>)
 8006b1c:	429c      	cmp	r4, r3
 8006b1e:	bf08      	it	eq
 8006b20:	68ec      	ldreq	r4, [r5, #12]
 8006b22:	e7e6      	b.n	8006af2 <__swsetup_r+0x1e>
 8006b24:	0758      	lsls	r0, r3, #29
 8006b26:	d512      	bpl.n	8006b4e <__swsetup_r+0x7a>
 8006b28:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006b2a:	b141      	cbz	r1, 8006b3e <__swsetup_r+0x6a>
 8006b2c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006b30:	4299      	cmp	r1, r3
 8006b32:	d002      	beq.n	8006b3a <__swsetup_r+0x66>
 8006b34:	4630      	mov	r0, r6
 8006b36:	f7ff fb6f 	bl	8006218 <_free_r>
 8006b3a:	2300      	movs	r3, #0
 8006b3c:	6363      	str	r3, [r4, #52]	; 0x34
 8006b3e:	89a3      	ldrh	r3, [r4, #12]
 8006b40:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006b44:	81a3      	strh	r3, [r4, #12]
 8006b46:	2300      	movs	r3, #0
 8006b48:	6063      	str	r3, [r4, #4]
 8006b4a:	6923      	ldr	r3, [r4, #16]
 8006b4c:	6023      	str	r3, [r4, #0]
 8006b4e:	89a3      	ldrh	r3, [r4, #12]
 8006b50:	f043 0308 	orr.w	r3, r3, #8
 8006b54:	81a3      	strh	r3, [r4, #12]
 8006b56:	6923      	ldr	r3, [r4, #16]
 8006b58:	b94b      	cbnz	r3, 8006b6e <__swsetup_r+0x9a>
 8006b5a:	89a3      	ldrh	r3, [r4, #12]
 8006b5c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006b60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006b64:	d003      	beq.n	8006b6e <__swsetup_r+0x9a>
 8006b66:	4621      	mov	r1, r4
 8006b68:	4630      	mov	r0, r6
 8006b6a:	f000 fa07 	bl	8006f7c <__smakebuf_r>
 8006b6e:	89a0      	ldrh	r0, [r4, #12]
 8006b70:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006b74:	f010 0301 	ands.w	r3, r0, #1
 8006b78:	d00a      	beq.n	8006b90 <__swsetup_r+0xbc>
 8006b7a:	2300      	movs	r3, #0
 8006b7c:	60a3      	str	r3, [r4, #8]
 8006b7e:	6963      	ldr	r3, [r4, #20]
 8006b80:	425b      	negs	r3, r3
 8006b82:	61a3      	str	r3, [r4, #24]
 8006b84:	6923      	ldr	r3, [r4, #16]
 8006b86:	b943      	cbnz	r3, 8006b9a <__swsetup_r+0xc6>
 8006b88:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006b8c:	d1ba      	bne.n	8006b04 <__swsetup_r+0x30>
 8006b8e:	bd70      	pop	{r4, r5, r6, pc}
 8006b90:	0781      	lsls	r1, r0, #30
 8006b92:	bf58      	it	pl
 8006b94:	6963      	ldrpl	r3, [r4, #20]
 8006b96:	60a3      	str	r3, [r4, #8]
 8006b98:	e7f4      	b.n	8006b84 <__swsetup_r+0xb0>
 8006b9a:	2000      	movs	r0, #0
 8006b9c:	e7f7      	b.n	8006b8e <__swsetup_r+0xba>
 8006b9e:	bf00      	nop
 8006ba0:	2000000c 	.word	0x2000000c
 8006ba4:	08007604 	.word	0x08007604
 8006ba8:	08007624 	.word	0x08007624
 8006bac:	080075e4 	.word	0x080075e4

08006bb0 <abort>:
 8006bb0:	b508      	push	{r3, lr}
 8006bb2:	2006      	movs	r0, #6
 8006bb4:	f000 fa52 	bl	800705c <raise>
 8006bb8:	2001      	movs	r0, #1
 8006bba:	f7fa feff 	bl	80019bc <_exit>
	...

08006bc0 <__sflush_r>:
 8006bc0:	898a      	ldrh	r2, [r1, #12]
 8006bc2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006bc6:	4605      	mov	r5, r0
 8006bc8:	0710      	lsls	r0, r2, #28
 8006bca:	460c      	mov	r4, r1
 8006bcc:	d458      	bmi.n	8006c80 <__sflush_r+0xc0>
 8006bce:	684b      	ldr	r3, [r1, #4]
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	dc05      	bgt.n	8006be0 <__sflush_r+0x20>
 8006bd4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	dc02      	bgt.n	8006be0 <__sflush_r+0x20>
 8006bda:	2000      	movs	r0, #0
 8006bdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006be0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006be2:	2e00      	cmp	r6, #0
 8006be4:	d0f9      	beq.n	8006bda <__sflush_r+0x1a>
 8006be6:	2300      	movs	r3, #0
 8006be8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006bec:	682f      	ldr	r7, [r5, #0]
 8006bee:	602b      	str	r3, [r5, #0]
 8006bf0:	d032      	beq.n	8006c58 <__sflush_r+0x98>
 8006bf2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006bf4:	89a3      	ldrh	r3, [r4, #12]
 8006bf6:	075a      	lsls	r2, r3, #29
 8006bf8:	d505      	bpl.n	8006c06 <__sflush_r+0x46>
 8006bfa:	6863      	ldr	r3, [r4, #4]
 8006bfc:	1ac0      	subs	r0, r0, r3
 8006bfe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006c00:	b10b      	cbz	r3, 8006c06 <__sflush_r+0x46>
 8006c02:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006c04:	1ac0      	subs	r0, r0, r3
 8006c06:	2300      	movs	r3, #0
 8006c08:	4602      	mov	r2, r0
 8006c0a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006c0c:	6a21      	ldr	r1, [r4, #32]
 8006c0e:	4628      	mov	r0, r5
 8006c10:	47b0      	blx	r6
 8006c12:	1c43      	adds	r3, r0, #1
 8006c14:	89a3      	ldrh	r3, [r4, #12]
 8006c16:	d106      	bne.n	8006c26 <__sflush_r+0x66>
 8006c18:	6829      	ldr	r1, [r5, #0]
 8006c1a:	291d      	cmp	r1, #29
 8006c1c:	d82c      	bhi.n	8006c78 <__sflush_r+0xb8>
 8006c1e:	4a2a      	ldr	r2, [pc, #168]	; (8006cc8 <__sflush_r+0x108>)
 8006c20:	40ca      	lsrs	r2, r1
 8006c22:	07d6      	lsls	r6, r2, #31
 8006c24:	d528      	bpl.n	8006c78 <__sflush_r+0xb8>
 8006c26:	2200      	movs	r2, #0
 8006c28:	6062      	str	r2, [r4, #4]
 8006c2a:	04d9      	lsls	r1, r3, #19
 8006c2c:	6922      	ldr	r2, [r4, #16]
 8006c2e:	6022      	str	r2, [r4, #0]
 8006c30:	d504      	bpl.n	8006c3c <__sflush_r+0x7c>
 8006c32:	1c42      	adds	r2, r0, #1
 8006c34:	d101      	bne.n	8006c3a <__sflush_r+0x7a>
 8006c36:	682b      	ldr	r3, [r5, #0]
 8006c38:	b903      	cbnz	r3, 8006c3c <__sflush_r+0x7c>
 8006c3a:	6560      	str	r0, [r4, #84]	; 0x54
 8006c3c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006c3e:	602f      	str	r7, [r5, #0]
 8006c40:	2900      	cmp	r1, #0
 8006c42:	d0ca      	beq.n	8006bda <__sflush_r+0x1a>
 8006c44:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006c48:	4299      	cmp	r1, r3
 8006c4a:	d002      	beq.n	8006c52 <__sflush_r+0x92>
 8006c4c:	4628      	mov	r0, r5
 8006c4e:	f7ff fae3 	bl	8006218 <_free_r>
 8006c52:	2000      	movs	r0, #0
 8006c54:	6360      	str	r0, [r4, #52]	; 0x34
 8006c56:	e7c1      	b.n	8006bdc <__sflush_r+0x1c>
 8006c58:	6a21      	ldr	r1, [r4, #32]
 8006c5a:	2301      	movs	r3, #1
 8006c5c:	4628      	mov	r0, r5
 8006c5e:	47b0      	blx	r6
 8006c60:	1c41      	adds	r1, r0, #1
 8006c62:	d1c7      	bne.n	8006bf4 <__sflush_r+0x34>
 8006c64:	682b      	ldr	r3, [r5, #0]
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d0c4      	beq.n	8006bf4 <__sflush_r+0x34>
 8006c6a:	2b1d      	cmp	r3, #29
 8006c6c:	d001      	beq.n	8006c72 <__sflush_r+0xb2>
 8006c6e:	2b16      	cmp	r3, #22
 8006c70:	d101      	bne.n	8006c76 <__sflush_r+0xb6>
 8006c72:	602f      	str	r7, [r5, #0]
 8006c74:	e7b1      	b.n	8006bda <__sflush_r+0x1a>
 8006c76:	89a3      	ldrh	r3, [r4, #12]
 8006c78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006c7c:	81a3      	strh	r3, [r4, #12]
 8006c7e:	e7ad      	b.n	8006bdc <__sflush_r+0x1c>
 8006c80:	690f      	ldr	r7, [r1, #16]
 8006c82:	2f00      	cmp	r7, #0
 8006c84:	d0a9      	beq.n	8006bda <__sflush_r+0x1a>
 8006c86:	0793      	lsls	r3, r2, #30
 8006c88:	680e      	ldr	r6, [r1, #0]
 8006c8a:	bf08      	it	eq
 8006c8c:	694b      	ldreq	r3, [r1, #20]
 8006c8e:	600f      	str	r7, [r1, #0]
 8006c90:	bf18      	it	ne
 8006c92:	2300      	movne	r3, #0
 8006c94:	eba6 0807 	sub.w	r8, r6, r7
 8006c98:	608b      	str	r3, [r1, #8]
 8006c9a:	f1b8 0f00 	cmp.w	r8, #0
 8006c9e:	dd9c      	ble.n	8006bda <__sflush_r+0x1a>
 8006ca0:	6a21      	ldr	r1, [r4, #32]
 8006ca2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006ca4:	4643      	mov	r3, r8
 8006ca6:	463a      	mov	r2, r7
 8006ca8:	4628      	mov	r0, r5
 8006caa:	47b0      	blx	r6
 8006cac:	2800      	cmp	r0, #0
 8006cae:	dc06      	bgt.n	8006cbe <__sflush_r+0xfe>
 8006cb0:	89a3      	ldrh	r3, [r4, #12]
 8006cb2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006cb6:	81a3      	strh	r3, [r4, #12]
 8006cb8:	f04f 30ff 	mov.w	r0, #4294967295
 8006cbc:	e78e      	b.n	8006bdc <__sflush_r+0x1c>
 8006cbe:	4407      	add	r7, r0
 8006cc0:	eba8 0800 	sub.w	r8, r8, r0
 8006cc4:	e7e9      	b.n	8006c9a <__sflush_r+0xda>
 8006cc6:	bf00      	nop
 8006cc8:	20400001 	.word	0x20400001

08006ccc <_fflush_r>:
 8006ccc:	b538      	push	{r3, r4, r5, lr}
 8006cce:	690b      	ldr	r3, [r1, #16]
 8006cd0:	4605      	mov	r5, r0
 8006cd2:	460c      	mov	r4, r1
 8006cd4:	b913      	cbnz	r3, 8006cdc <_fflush_r+0x10>
 8006cd6:	2500      	movs	r5, #0
 8006cd8:	4628      	mov	r0, r5
 8006cda:	bd38      	pop	{r3, r4, r5, pc}
 8006cdc:	b118      	cbz	r0, 8006ce6 <_fflush_r+0x1a>
 8006cde:	6983      	ldr	r3, [r0, #24]
 8006ce0:	b90b      	cbnz	r3, 8006ce6 <_fflush_r+0x1a>
 8006ce2:	f000 f887 	bl	8006df4 <__sinit>
 8006ce6:	4b14      	ldr	r3, [pc, #80]	; (8006d38 <_fflush_r+0x6c>)
 8006ce8:	429c      	cmp	r4, r3
 8006cea:	d11b      	bne.n	8006d24 <_fflush_r+0x58>
 8006cec:	686c      	ldr	r4, [r5, #4]
 8006cee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d0ef      	beq.n	8006cd6 <_fflush_r+0xa>
 8006cf6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006cf8:	07d0      	lsls	r0, r2, #31
 8006cfa:	d404      	bmi.n	8006d06 <_fflush_r+0x3a>
 8006cfc:	0599      	lsls	r1, r3, #22
 8006cfe:	d402      	bmi.n	8006d06 <_fflush_r+0x3a>
 8006d00:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006d02:	f000 f915 	bl	8006f30 <__retarget_lock_acquire_recursive>
 8006d06:	4628      	mov	r0, r5
 8006d08:	4621      	mov	r1, r4
 8006d0a:	f7ff ff59 	bl	8006bc0 <__sflush_r>
 8006d0e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006d10:	07da      	lsls	r2, r3, #31
 8006d12:	4605      	mov	r5, r0
 8006d14:	d4e0      	bmi.n	8006cd8 <_fflush_r+0xc>
 8006d16:	89a3      	ldrh	r3, [r4, #12]
 8006d18:	059b      	lsls	r3, r3, #22
 8006d1a:	d4dd      	bmi.n	8006cd8 <_fflush_r+0xc>
 8006d1c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006d1e:	f000 f908 	bl	8006f32 <__retarget_lock_release_recursive>
 8006d22:	e7d9      	b.n	8006cd8 <_fflush_r+0xc>
 8006d24:	4b05      	ldr	r3, [pc, #20]	; (8006d3c <_fflush_r+0x70>)
 8006d26:	429c      	cmp	r4, r3
 8006d28:	d101      	bne.n	8006d2e <_fflush_r+0x62>
 8006d2a:	68ac      	ldr	r4, [r5, #8]
 8006d2c:	e7df      	b.n	8006cee <_fflush_r+0x22>
 8006d2e:	4b04      	ldr	r3, [pc, #16]	; (8006d40 <_fflush_r+0x74>)
 8006d30:	429c      	cmp	r4, r3
 8006d32:	bf08      	it	eq
 8006d34:	68ec      	ldreq	r4, [r5, #12]
 8006d36:	e7da      	b.n	8006cee <_fflush_r+0x22>
 8006d38:	08007604 	.word	0x08007604
 8006d3c:	08007624 	.word	0x08007624
 8006d40:	080075e4 	.word	0x080075e4

08006d44 <std>:
 8006d44:	2300      	movs	r3, #0
 8006d46:	b510      	push	{r4, lr}
 8006d48:	4604      	mov	r4, r0
 8006d4a:	e9c0 3300 	strd	r3, r3, [r0]
 8006d4e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006d52:	6083      	str	r3, [r0, #8]
 8006d54:	8181      	strh	r1, [r0, #12]
 8006d56:	6643      	str	r3, [r0, #100]	; 0x64
 8006d58:	81c2      	strh	r2, [r0, #14]
 8006d5a:	6183      	str	r3, [r0, #24]
 8006d5c:	4619      	mov	r1, r3
 8006d5e:	2208      	movs	r2, #8
 8006d60:	305c      	adds	r0, #92	; 0x5c
 8006d62:	f7fd fba5 	bl	80044b0 <memset>
 8006d66:	4b05      	ldr	r3, [pc, #20]	; (8006d7c <std+0x38>)
 8006d68:	6263      	str	r3, [r4, #36]	; 0x24
 8006d6a:	4b05      	ldr	r3, [pc, #20]	; (8006d80 <std+0x3c>)
 8006d6c:	62a3      	str	r3, [r4, #40]	; 0x28
 8006d6e:	4b05      	ldr	r3, [pc, #20]	; (8006d84 <std+0x40>)
 8006d70:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006d72:	4b05      	ldr	r3, [pc, #20]	; (8006d88 <std+0x44>)
 8006d74:	6224      	str	r4, [r4, #32]
 8006d76:	6323      	str	r3, [r4, #48]	; 0x30
 8006d78:	bd10      	pop	{r4, pc}
 8006d7a:	bf00      	nop
 8006d7c:	08007095 	.word	0x08007095
 8006d80:	080070b7 	.word	0x080070b7
 8006d84:	080070ef 	.word	0x080070ef
 8006d88:	08007113 	.word	0x08007113

08006d8c <_cleanup_r>:
 8006d8c:	4901      	ldr	r1, [pc, #4]	; (8006d94 <_cleanup_r+0x8>)
 8006d8e:	f000 b8af 	b.w	8006ef0 <_fwalk_reent>
 8006d92:	bf00      	nop
 8006d94:	08006ccd 	.word	0x08006ccd

08006d98 <__sfmoreglue>:
 8006d98:	b570      	push	{r4, r5, r6, lr}
 8006d9a:	1e4a      	subs	r2, r1, #1
 8006d9c:	2568      	movs	r5, #104	; 0x68
 8006d9e:	4355      	muls	r5, r2
 8006da0:	460e      	mov	r6, r1
 8006da2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006da6:	f7ff fa87 	bl	80062b8 <_malloc_r>
 8006daa:	4604      	mov	r4, r0
 8006dac:	b140      	cbz	r0, 8006dc0 <__sfmoreglue+0x28>
 8006dae:	2100      	movs	r1, #0
 8006db0:	e9c0 1600 	strd	r1, r6, [r0]
 8006db4:	300c      	adds	r0, #12
 8006db6:	60a0      	str	r0, [r4, #8]
 8006db8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006dbc:	f7fd fb78 	bl	80044b0 <memset>
 8006dc0:	4620      	mov	r0, r4
 8006dc2:	bd70      	pop	{r4, r5, r6, pc}

08006dc4 <__sfp_lock_acquire>:
 8006dc4:	4801      	ldr	r0, [pc, #4]	; (8006dcc <__sfp_lock_acquire+0x8>)
 8006dc6:	f000 b8b3 	b.w	8006f30 <__retarget_lock_acquire_recursive>
 8006dca:	bf00      	nop
 8006dcc:	20000458 	.word	0x20000458

08006dd0 <__sfp_lock_release>:
 8006dd0:	4801      	ldr	r0, [pc, #4]	; (8006dd8 <__sfp_lock_release+0x8>)
 8006dd2:	f000 b8ae 	b.w	8006f32 <__retarget_lock_release_recursive>
 8006dd6:	bf00      	nop
 8006dd8:	20000458 	.word	0x20000458

08006ddc <__sinit_lock_acquire>:
 8006ddc:	4801      	ldr	r0, [pc, #4]	; (8006de4 <__sinit_lock_acquire+0x8>)
 8006dde:	f000 b8a7 	b.w	8006f30 <__retarget_lock_acquire_recursive>
 8006de2:	bf00      	nop
 8006de4:	20000453 	.word	0x20000453

08006de8 <__sinit_lock_release>:
 8006de8:	4801      	ldr	r0, [pc, #4]	; (8006df0 <__sinit_lock_release+0x8>)
 8006dea:	f000 b8a2 	b.w	8006f32 <__retarget_lock_release_recursive>
 8006dee:	bf00      	nop
 8006df0:	20000453 	.word	0x20000453

08006df4 <__sinit>:
 8006df4:	b510      	push	{r4, lr}
 8006df6:	4604      	mov	r4, r0
 8006df8:	f7ff fff0 	bl	8006ddc <__sinit_lock_acquire>
 8006dfc:	69a3      	ldr	r3, [r4, #24]
 8006dfe:	b11b      	cbz	r3, 8006e08 <__sinit+0x14>
 8006e00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006e04:	f7ff bff0 	b.w	8006de8 <__sinit_lock_release>
 8006e08:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006e0c:	6523      	str	r3, [r4, #80]	; 0x50
 8006e0e:	4b13      	ldr	r3, [pc, #76]	; (8006e5c <__sinit+0x68>)
 8006e10:	4a13      	ldr	r2, [pc, #76]	; (8006e60 <__sinit+0x6c>)
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	62a2      	str	r2, [r4, #40]	; 0x28
 8006e16:	42a3      	cmp	r3, r4
 8006e18:	bf04      	itt	eq
 8006e1a:	2301      	moveq	r3, #1
 8006e1c:	61a3      	streq	r3, [r4, #24]
 8006e1e:	4620      	mov	r0, r4
 8006e20:	f000 f820 	bl	8006e64 <__sfp>
 8006e24:	6060      	str	r0, [r4, #4]
 8006e26:	4620      	mov	r0, r4
 8006e28:	f000 f81c 	bl	8006e64 <__sfp>
 8006e2c:	60a0      	str	r0, [r4, #8]
 8006e2e:	4620      	mov	r0, r4
 8006e30:	f000 f818 	bl	8006e64 <__sfp>
 8006e34:	2200      	movs	r2, #0
 8006e36:	60e0      	str	r0, [r4, #12]
 8006e38:	2104      	movs	r1, #4
 8006e3a:	6860      	ldr	r0, [r4, #4]
 8006e3c:	f7ff ff82 	bl	8006d44 <std>
 8006e40:	68a0      	ldr	r0, [r4, #8]
 8006e42:	2201      	movs	r2, #1
 8006e44:	2109      	movs	r1, #9
 8006e46:	f7ff ff7d 	bl	8006d44 <std>
 8006e4a:	68e0      	ldr	r0, [r4, #12]
 8006e4c:	2202      	movs	r2, #2
 8006e4e:	2112      	movs	r1, #18
 8006e50:	f7ff ff78 	bl	8006d44 <std>
 8006e54:	2301      	movs	r3, #1
 8006e56:	61a3      	str	r3, [r4, #24]
 8006e58:	e7d2      	b.n	8006e00 <__sinit+0xc>
 8006e5a:	bf00      	nop
 8006e5c:	08007260 	.word	0x08007260
 8006e60:	08006d8d 	.word	0x08006d8d

08006e64 <__sfp>:
 8006e64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e66:	4607      	mov	r7, r0
 8006e68:	f7ff ffac 	bl	8006dc4 <__sfp_lock_acquire>
 8006e6c:	4b1e      	ldr	r3, [pc, #120]	; (8006ee8 <__sfp+0x84>)
 8006e6e:	681e      	ldr	r6, [r3, #0]
 8006e70:	69b3      	ldr	r3, [r6, #24]
 8006e72:	b913      	cbnz	r3, 8006e7a <__sfp+0x16>
 8006e74:	4630      	mov	r0, r6
 8006e76:	f7ff ffbd 	bl	8006df4 <__sinit>
 8006e7a:	3648      	adds	r6, #72	; 0x48
 8006e7c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006e80:	3b01      	subs	r3, #1
 8006e82:	d503      	bpl.n	8006e8c <__sfp+0x28>
 8006e84:	6833      	ldr	r3, [r6, #0]
 8006e86:	b30b      	cbz	r3, 8006ecc <__sfp+0x68>
 8006e88:	6836      	ldr	r6, [r6, #0]
 8006e8a:	e7f7      	b.n	8006e7c <__sfp+0x18>
 8006e8c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006e90:	b9d5      	cbnz	r5, 8006ec8 <__sfp+0x64>
 8006e92:	4b16      	ldr	r3, [pc, #88]	; (8006eec <__sfp+0x88>)
 8006e94:	60e3      	str	r3, [r4, #12]
 8006e96:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006e9a:	6665      	str	r5, [r4, #100]	; 0x64
 8006e9c:	f000 f847 	bl	8006f2e <__retarget_lock_init_recursive>
 8006ea0:	f7ff ff96 	bl	8006dd0 <__sfp_lock_release>
 8006ea4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006ea8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006eac:	6025      	str	r5, [r4, #0]
 8006eae:	61a5      	str	r5, [r4, #24]
 8006eb0:	2208      	movs	r2, #8
 8006eb2:	4629      	mov	r1, r5
 8006eb4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006eb8:	f7fd fafa 	bl	80044b0 <memset>
 8006ebc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006ec0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006ec4:	4620      	mov	r0, r4
 8006ec6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006ec8:	3468      	adds	r4, #104	; 0x68
 8006eca:	e7d9      	b.n	8006e80 <__sfp+0x1c>
 8006ecc:	2104      	movs	r1, #4
 8006ece:	4638      	mov	r0, r7
 8006ed0:	f7ff ff62 	bl	8006d98 <__sfmoreglue>
 8006ed4:	4604      	mov	r4, r0
 8006ed6:	6030      	str	r0, [r6, #0]
 8006ed8:	2800      	cmp	r0, #0
 8006eda:	d1d5      	bne.n	8006e88 <__sfp+0x24>
 8006edc:	f7ff ff78 	bl	8006dd0 <__sfp_lock_release>
 8006ee0:	230c      	movs	r3, #12
 8006ee2:	603b      	str	r3, [r7, #0]
 8006ee4:	e7ee      	b.n	8006ec4 <__sfp+0x60>
 8006ee6:	bf00      	nop
 8006ee8:	08007260 	.word	0x08007260
 8006eec:	ffff0001 	.word	0xffff0001

08006ef0 <_fwalk_reent>:
 8006ef0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006ef4:	4606      	mov	r6, r0
 8006ef6:	4688      	mov	r8, r1
 8006ef8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006efc:	2700      	movs	r7, #0
 8006efe:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006f02:	f1b9 0901 	subs.w	r9, r9, #1
 8006f06:	d505      	bpl.n	8006f14 <_fwalk_reent+0x24>
 8006f08:	6824      	ldr	r4, [r4, #0]
 8006f0a:	2c00      	cmp	r4, #0
 8006f0c:	d1f7      	bne.n	8006efe <_fwalk_reent+0xe>
 8006f0e:	4638      	mov	r0, r7
 8006f10:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006f14:	89ab      	ldrh	r3, [r5, #12]
 8006f16:	2b01      	cmp	r3, #1
 8006f18:	d907      	bls.n	8006f2a <_fwalk_reent+0x3a>
 8006f1a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006f1e:	3301      	adds	r3, #1
 8006f20:	d003      	beq.n	8006f2a <_fwalk_reent+0x3a>
 8006f22:	4629      	mov	r1, r5
 8006f24:	4630      	mov	r0, r6
 8006f26:	47c0      	blx	r8
 8006f28:	4307      	orrs	r7, r0
 8006f2a:	3568      	adds	r5, #104	; 0x68
 8006f2c:	e7e9      	b.n	8006f02 <_fwalk_reent+0x12>

08006f2e <__retarget_lock_init_recursive>:
 8006f2e:	4770      	bx	lr

08006f30 <__retarget_lock_acquire_recursive>:
 8006f30:	4770      	bx	lr

08006f32 <__retarget_lock_release_recursive>:
 8006f32:	4770      	bx	lr

08006f34 <__swhatbuf_r>:
 8006f34:	b570      	push	{r4, r5, r6, lr}
 8006f36:	460e      	mov	r6, r1
 8006f38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f3c:	2900      	cmp	r1, #0
 8006f3e:	b096      	sub	sp, #88	; 0x58
 8006f40:	4614      	mov	r4, r2
 8006f42:	461d      	mov	r5, r3
 8006f44:	da07      	bge.n	8006f56 <__swhatbuf_r+0x22>
 8006f46:	2300      	movs	r3, #0
 8006f48:	602b      	str	r3, [r5, #0]
 8006f4a:	89b3      	ldrh	r3, [r6, #12]
 8006f4c:	061a      	lsls	r2, r3, #24
 8006f4e:	d410      	bmi.n	8006f72 <__swhatbuf_r+0x3e>
 8006f50:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006f54:	e00e      	b.n	8006f74 <__swhatbuf_r+0x40>
 8006f56:	466a      	mov	r2, sp
 8006f58:	f000 f902 	bl	8007160 <_fstat_r>
 8006f5c:	2800      	cmp	r0, #0
 8006f5e:	dbf2      	blt.n	8006f46 <__swhatbuf_r+0x12>
 8006f60:	9a01      	ldr	r2, [sp, #4]
 8006f62:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006f66:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006f6a:	425a      	negs	r2, r3
 8006f6c:	415a      	adcs	r2, r3
 8006f6e:	602a      	str	r2, [r5, #0]
 8006f70:	e7ee      	b.n	8006f50 <__swhatbuf_r+0x1c>
 8006f72:	2340      	movs	r3, #64	; 0x40
 8006f74:	2000      	movs	r0, #0
 8006f76:	6023      	str	r3, [r4, #0]
 8006f78:	b016      	add	sp, #88	; 0x58
 8006f7a:	bd70      	pop	{r4, r5, r6, pc}

08006f7c <__smakebuf_r>:
 8006f7c:	898b      	ldrh	r3, [r1, #12]
 8006f7e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006f80:	079d      	lsls	r5, r3, #30
 8006f82:	4606      	mov	r6, r0
 8006f84:	460c      	mov	r4, r1
 8006f86:	d507      	bpl.n	8006f98 <__smakebuf_r+0x1c>
 8006f88:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006f8c:	6023      	str	r3, [r4, #0]
 8006f8e:	6123      	str	r3, [r4, #16]
 8006f90:	2301      	movs	r3, #1
 8006f92:	6163      	str	r3, [r4, #20]
 8006f94:	b002      	add	sp, #8
 8006f96:	bd70      	pop	{r4, r5, r6, pc}
 8006f98:	ab01      	add	r3, sp, #4
 8006f9a:	466a      	mov	r2, sp
 8006f9c:	f7ff ffca 	bl	8006f34 <__swhatbuf_r>
 8006fa0:	9900      	ldr	r1, [sp, #0]
 8006fa2:	4605      	mov	r5, r0
 8006fa4:	4630      	mov	r0, r6
 8006fa6:	f7ff f987 	bl	80062b8 <_malloc_r>
 8006faa:	b948      	cbnz	r0, 8006fc0 <__smakebuf_r+0x44>
 8006fac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006fb0:	059a      	lsls	r2, r3, #22
 8006fb2:	d4ef      	bmi.n	8006f94 <__smakebuf_r+0x18>
 8006fb4:	f023 0303 	bic.w	r3, r3, #3
 8006fb8:	f043 0302 	orr.w	r3, r3, #2
 8006fbc:	81a3      	strh	r3, [r4, #12]
 8006fbe:	e7e3      	b.n	8006f88 <__smakebuf_r+0xc>
 8006fc0:	4b0d      	ldr	r3, [pc, #52]	; (8006ff8 <__smakebuf_r+0x7c>)
 8006fc2:	62b3      	str	r3, [r6, #40]	; 0x28
 8006fc4:	89a3      	ldrh	r3, [r4, #12]
 8006fc6:	6020      	str	r0, [r4, #0]
 8006fc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006fcc:	81a3      	strh	r3, [r4, #12]
 8006fce:	9b00      	ldr	r3, [sp, #0]
 8006fd0:	6163      	str	r3, [r4, #20]
 8006fd2:	9b01      	ldr	r3, [sp, #4]
 8006fd4:	6120      	str	r0, [r4, #16]
 8006fd6:	b15b      	cbz	r3, 8006ff0 <__smakebuf_r+0x74>
 8006fd8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006fdc:	4630      	mov	r0, r6
 8006fde:	f000 f8d1 	bl	8007184 <_isatty_r>
 8006fe2:	b128      	cbz	r0, 8006ff0 <__smakebuf_r+0x74>
 8006fe4:	89a3      	ldrh	r3, [r4, #12]
 8006fe6:	f023 0303 	bic.w	r3, r3, #3
 8006fea:	f043 0301 	orr.w	r3, r3, #1
 8006fee:	81a3      	strh	r3, [r4, #12]
 8006ff0:	89a0      	ldrh	r0, [r4, #12]
 8006ff2:	4305      	orrs	r5, r0
 8006ff4:	81a5      	strh	r5, [r4, #12]
 8006ff6:	e7cd      	b.n	8006f94 <__smakebuf_r+0x18>
 8006ff8:	08006d8d 	.word	0x08006d8d

08006ffc <_malloc_usable_size_r>:
 8006ffc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007000:	1f18      	subs	r0, r3, #4
 8007002:	2b00      	cmp	r3, #0
 8007004:	bfbc      	itt	lt
 8007006:	580b      	ldrlt	r3, [r1, r0]
 8007008:	18c0      	addlt	r0, r0, r3
 800700a:	4770      	bx	lr

0800700c <_raise_r>:
 800700c:	291f      	cmp	r1, #31
 800700e:	b538      	push	{r3, r4, r5, lr}
 8007010:	4604      	mov	r4, r0
 8007012:	460d      	mov	r5, r1
 8007014:	d904      	bls.n	8007020 <_raise_r+0x14>
 8007016:	2316      	movs	r3, #22
 8007018:	6003      	str	r3, [r0, #0]
 800701a:	f04f 30ff 	mov.w	r0, #4294967295
 800701e:	bd38      	pop	{r3, r4, r5, pc}
 8007020:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007022:	b112      	cbz	r2, 800702a <_raise_r+0x1e>
 8007024:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007028:	b94b      	cbnz	r3, 800703e <_raise_r+0x32>
 800702a:	4620      	mov	r0, r4
 800702c:	f000 f830 	bl	8007090 <_getpid_r>
 8007030:	462a      	mov	r2, r5
 8007032:	4601      	mov	r1, r0
 8007034:	4620      	mov	r0, r4
 8007036:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800703a:	f000 b817 	b.w	800706c <_kill_r>
 800703e:	2b01      	cmp	r3, #1
 8007040:	d00a      	beq.n	8007058 <_raise_r+0x4c>
 8007042:	1c59      	adds	r1, r3, #1
 8007044:	d103      	bne.n	800704e <_raise_r+0x42>
 8007046:	2316      	movs	r3, #22
 8007048:	6003      	str	r3, [r0, #0]
 800704a:	2001      	movs	r0, #1
 800704c:	e7e7      	b.n	800701e <_raise_r+0x12>
 800704e:	2400      	movs	r4, #0
 8007050:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007054:	4628      	mov	r0, r5
 8007056:	4798      	blx	r3
 8007058:	2000      	movs	r0, #0
 800705a:	e7e0      	b.n	800701e <_raise_r+0x12>

0800705c <raise>:
 800705c:	4b02      	ldr	r3, [pc, #8]	; (8007068 <raise+0xc>)
 800705e:	4601      	mov	r1, r0
 8007060:	6818      	ldr	r0, [r3, #0]
 8007062:	f7ff bfd3 	b.w	800700c <_raise_r>
 8007066:	bf00      	nop
 8007068:	2000000c 	.word	0x2000000c

0800706c <_kill_r>:
 800706c:	b538      	push	{r3, r4, r5, lr}
 800706e:	4d07      	ldr	r5, [pc, #28]	; (800708c <_kill_r+0x20>)
 8007070:	2300      	movs	r3, #0
 8007072:	4604      	mov	r4, r0
 8007074:	4608      	mov	r0, r1
 8007076:	4611      	mov	r1, r2
 8007078:	602b      	str	r3, [r5, #0]
 800707a:	f7fa fc8f 	bl	800199c <_kill>
 800707e:	1c43      	adds	r3, r0, #1
 8007080:	d102      	bne.n	8007088 <_kill_r+0x1c>
 8007082:	682b      	ldr	r3, [r5, #0]
 8007084:	b103      	cbz	r3, 8007088 <_kill_r+0x1c>
 8007086:	6023      	str	r3, [r4, #0]
 8007088:	bd38      	pop	{r3, r4, r5, pc}
 800708a:	bf00      	nop
 800708c:	2000044c 	.word	0x2000044c

08007090 <_getpid_r>:
 8007090:	f7fa bc7c 	b.w	800198c <_getpid>

08007094 <__sread>:
 8007094:	b510      	push	{r4, lr}
 8007096:	460c      	mov	r4, r1
 8007098:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800709c:	f000 f894 	bl	80071c8 <_read_r>
 80070a0:	2800      	cmp	r0, #0
 80070a2:	bfab      	itete	ge
 80070a4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80070a6:	89a3      	ldrhlt	r3, [r4, #12]
 80070a8:	181b      	addge	r3, r3, r0
 80070aa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80070ae:	bfac      	ite	ge
 80070b0:	6563      	strge	r3, [r4, #84]	; 0x54
 80070b2:	81a3      	strhlt	r3, [r4, #12]
 80070b4:	bd10      	pop	{r4, pc}

080070b6 <__swrite>:
 80070b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80070ba:	461f      	mov	r7, r3
 80070bc:	898b      	ldrh	r3, [r1, #12]
 80070be:	05db      	lsls	r3, r3, #23
 80070c0:	4605      	mov	r5, r0
 80070c2:	460c      	mov	r4, r1
 80070c4:	4616      	mov	r6, r2
 80070c6:	d505      	bpl.n	80070d4 <__swrite+0x1e>
 80070c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80070cc:	2302      	movs	r3, #2
 80070ce:	2200      	movs	r2, #0
 80070d0:	f000 f868 	bl	80071a4 <_lseek_r>
 80070d4:	89a3      	ldrh	r3, [r4, #12]
 80070d6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80070da:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80070de:	81a3      	strh	r3, [r4, #12]
 80070e0:	4632      	mov	r2, r6
 80070e2:	463b      	mov	r3, r7
 80070e4:	4628      	mov	r0, r5
 80070e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80070ea:	f000 b817 	b.w	800711c <_write_r>

080070ee <__sseek>:
 80070ee:	b510      	push	{r4, lr}
 80070f0:	460c      	mov	r4, r1
 80070f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80070f6:	f000 f855 	bl	80071a4 <_lseek_r>
 80070fa:	1c43      	adds	r3, r0, #1
 80070fc:	89a3      	ldrh	r3, [r4, #12]
 80070fe:	bf15      	itete	ne
 8007100:	6560      	strne	r0, [r4, #84]	; 0x54
 8007102:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007106:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800710a:	81a3      	strheq	r3, [r4, #12]
 800710c:	bf18      	it	ne
 800710e:	81a3      	strhne	r3, [r4, #12]
 8007110:	bd10      	pop	{r4, pc}

08007112 <__sclose>:
 8007112:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007116:	f000 b813 	b.w	8007140 <_close_r>
	...

0800711c <_write_r>:
 800711c:	b538      	push	{r3, r4, r5, lr}
 800711e:	4d07      	ldr	r5, [pc, #28]	; (800713c <_write_r+0x20>)
 8007120:	4604      	mov	r4, r0
 8007122:	4608      	mov	r0, r1
 8007124:	4611      	mov	r1, r2
 8007126:	2200      	movs	r2, #0
 8007128:	602a      	str	r2, [r5, #0]
 800712a:	461a      	mov	r2, r3
 800712c:	f7fa fc6d 	bl	8001a0a <_write>
 8007130:	1c43      	adds	r3, r0, #1
 8007132:	d102      	bne.n	800713a <_write_r+0x1e>
 8007134:	682b      	ldr	r3, [r5, #0]
 8007136:	b103      	cbz	r3, 800713a <_write_r+0x1e>
 8007138:	6023      	str	r3, [r4, #0]
 800713a:	bd38      	pop	{r3, r4, r5, pc}
 800713c:	2000044c 	.word	0x2000044c

08007140 <_close_r>:
 8007140:	b538      	push	{r3, r4, r5, lr}
 8007142:	4d06      	ldr	r5, [pc, #24]	; (800715c <_close_r+0x1c>)
 8007144:	2300      	movs	r3, #0
 8007146:	4604      	mov	r4, r0
 8007148:	4608      	mov	r0, r1
 800714a:	602b      	str	r3, [r5, #0]
 800714c:	f7fa fc79 	bl	8001a42 <_close>
 8007150:	1c43      	adds	r3, r0, #1
 8007152:	d102      	bne.n	800715a <_close_r+0x1a>
 8007154:	682b      	ldr	r3, [r5, #0]
 8007156:	b103      	cbz	r3, 800715a <_close_r+0x1a>
 8007158:	6023      	str	r3, [r4, #0]
 800715a:	bd38      	pop	{r3, r4, r5, pc}
 800715c:	2000044c 	.word	0x2000044c

08007160 <_fstat_r>:
 8007160:	b538      	push	{r3, r4, r5, lr}
 8007162:	4d07      	ldr	r5, [pc, #28]	; (8007180 <_fstat_r+0x20>)
 8007164:	2300      	movs	r3, #0
 8007166:	4604      	mov	r4, r0
 8007168:	4608      	mov	r0, r1
 800716a:	4611      	mov	r1, r2
 800716c:	602b      	str	r3, [r5, #0]
 800716e:	f7fa fc74 	bl	8001a5a <_fstat>
 8007172:	1c43      	adds	r3, r0, #1
 8007174:	d102      	bne.n	800717c <_fstat_r+0x1c>
 8007176:	682b      	ldr	r3, [r5, #0]
 8007178:	b103      	cbz	r3, 800717c <_fstat_r+0x1c>
 800717a:	6023      	str	r3, [r4, #0]
 800717c:	bd38      	pop	{r3, r4, r5, pc}
 800717e:	bf00      	nop
 8007180:	2000044c 	.word	0x2000044c

08007184 <_isatty_r>:
 8007184:	b538      	push	{r3, r4, r5, lr}
 8007186:	4d06      	ldr	r5, [pc, #24]	; (80071a0 <_isatty_r+0x1c>)
 8007188:	2300      	movs	r3, #0
 800718a:	4604      	mov	r4, r0
 800718c:	4608      	mov	r0, r1
 800718e:	602b      	str	r3, [r5, #0]
 8007190:	f7fa fc73 	bl	8001a7a <_isatty>
 8007194:	1c43      	adds	r3, r0, #1
 8007196:	d102      	bne.n	800719e <_isatty_r+0x1a>
 8007198:	682b      	ldr	r3, [r5, #0]
 800719a:	b103      	cbz	r3, 800719e <_isatty_r+0x1a>
 800719c:	6023      	str	r3, [r4, #0]
 800719e:	bd38      	pop	{r3, r4, r5, pc}
 80071a0:	2000044c 	.word	0x2000044c

080071a4 <_lseek_r>:
 80071a4:	b538      	push	{r3, r4, r5, lr}
 80071a6:	4d07      	ldr	r5, [pc, #28]	; (80071c4 <_lseek_r+0x20>)
 80071a8:	4604      	mov	r4, r0
 80071aa:	4608      	mov	r0, r1
 80071ac:	4611      	mov	r1, r2
 80071ae:	2200      	movs	r2, #0
 80071b0:	602a      	str	r2, [r5, #0]
 80071b2:	461a      	mov	r2, r3
 80071b4:	f7fa fc6c 	bl	8001a90 <_lseek>
 80071b8:	1c43      	adds	r3, r0, #1
 80071ba:	d102      	bne.n	80071c2 <_lseek_r+0x1e>
 80071bc:	682b      	ldr	r3, [r5, #0]
 80071be:	b103      	cbz	r3, 80071c2 <_lseek_r+0x1e>
 80071c0:	6023      	str	r3, [r4, #0]
 80071c2:	bd38      	pop	{r3, r4, r5, pc}
 80071c4:	2000044c 	.word	0x2000044c

080071c8 <_read_r>:
 80071c8:	b538      	push	{r3, r4, r5, lr}
 80071ca:	4d07      	ldr	r5, [pc, #28]	; (80071e8 <_read_r+0x20>)
 80071cc:	4604      	mov	r4, r0
 80071ce:	4608      	mov	r0, r1
 80071d0:	4611      	mov	r1, r2
 80071d2:	2200      	movs	r2, #0
 80071d4:	602a      	str	r2, [r5, #0]
 80071d6:	461a      	mov	r2, r3
 80071d8:	f7fa fbfa 	bl	80019d0 <_read>
 80071dc:	1c43      	adds	r3, r0, #1
 80071de:	d102      	bne.n	80071e6 <_read_r+0x1e>
 80071e0:	682b      	ldr	r3, [r5, #0]
 80071e2:	b103      	cbz	r3, 80071e6 <_read_r+0x1e>
 80071e4:	6023      	str	r3, [r4, #0]
 80071e6:	bd38      	pop	{r3, r4, r5, pc}
 80071e8:	2000044c 	.word	0x2000044c

080071ec <_init>:
 80071ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071ee:	bf00      	nop
 80071f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80071f2:	bc08      	pop	{r3}
 80071f4:	469e      	mov	lr, r3
 80071f6:	4770      	bx	lr

080071f8 <_fini>:
 80071f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071fa:	bf00      	nop
 80071fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80071fe:	bc08      	pop	{r3}
 8007200:	469e      	mov	lr, r3
 8007202:	4770      	bx	lr
